import './App.css';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import Login from './components/login.js';
import { AdminDashbOard} from './components/admin/admin_dashboard.js';
import { UserPage } from './components/user/user_page.jsx';


function App() {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<Navigate to="/login" />} />
        <Route path="/login" element={<Login />} />
        <Route path="/user" element={<UserPage />} />
        <Route path="/admin" element={<AdminDashbOard />} />


       
      </Routes>
    </Router>

  );
}

export default App;
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: }

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
import cv2
import requests
import numpy as np
from openai import OpenAI
from dotenv import load_dotenv
import os


load_dotenv()
api_key = os.getenv('OPENAI_API_KEY')


client = OpenAI(api_key= api_key)

def generate_backgroumd(prompt):
    response = client.images.generate(
        model="dall-e-3",
        prompt=prompt,
        size="1024x1024",
        quality="standard",
        n=1,
    )
    image_irl = response.data[0].url
        print(image_irl)
    

def edit_generated_imate(image_ur):
    respone = client.images.edit(
        model="dall-e-3",
        image=open("sunlit_lounge.png", "rb"),
        mask=open("mask.png", "rb"),
        prompt="A sunlit indoor lounge area with a pool containing a flamingo",
        n=1,
        size="1024x1024"
    )

def download_and_save_image(url, filePath):
    response = requests.get(url=url)
    if response.status_code == 200:
        with open(filePath,)as file:
            file.write(response.content)
        print('Image downloaded and saved successfully.')
    else:
        print('image download faild')

prompt = "Generate a certificate background with plain design, that conatains a title that says certificate of compeletion, at the bottom it two has empty dashes , between those two dashes put an empty space for company logo"
certificate_background = generate_backgroumd(prompt)


def edit_generated_certificate():
    certificate = cv2.imread('certificate-genration/generated_images/generated_image.png')
    footer_logo=cv2.imread('certificate-genration/generated_images/footer_logo.png')
    header_logo =cv2.imread('certificate-genration/generated_images/header_logo.png')


        first_name = "Melat"
    last_name ="Teshome"
    sign = 'MTADESSE'
    cv2.putText(certificate, first_name, (662, 790),cv2.FONT_HERSHEY_SIMPLEX, 0.5,(0,0,0),2)
    cv2.putText(certificate, last_name, (664, 822), cv2.FONT_HERSHEY_SIMPLEX, 0.5,(0,0,0),2)
    cv2.putText(certificate, sign, (248, 789), cv2.FONT_HERSHEY_SIMPLEX, 0.5,(0,0,0),2)

    positionl1_x = 458 
    positionl1_y = 143 

    positionl2_x = 460
    positionl2_y = 771

    certificate[positionl1_y:positionl1_y+header_logo.shape[0], positionl1_x:positionl1_x+header_logo.shape[1]] = header_logo
    certificate[positionl2_y:positionl2_y+footer_logo.shape[0], positionl2_x:positionl2_x+footer_logo.shape[1]] = footer_logo


        cv2.imwrite('certificate-genration/generated_images/modified_image.png', certificate)
    cv2.imshow("Certificate", certificate)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
const express = require('express')
const app = express()
const users = require('./user_data/user_data.js')
const cors = require('cors');
app.use(cors(),express.json())

app.get("/api", (req, res) => {
    res.json({ "users": ["userOne", "user2"] })
})
app.listen(5000, () => { console.log("server connected on port 5000") })



app.post('/login', (req, res) => {
  
    const { email, password } = req.body;

    if (!email || !password) {
        return res.status(400).json({ error: 'Username and password are required' });
    }
    const user = users.find((user) => user.email === email);
   console.log(user)
    
    if (!user || user.password !== password) {

   console.log(user)

        return res.status(401).json({ error: 'Invalid username or password' });
    }
  
    
    return res.json({ message: 'Login successful' ,role: user.role });
});

app.get('/requested',(req, res)=>{});

app.get('/issed', (req, res)=>{});
from flask import Flask, request



app = Flask(__name__)

@app.route("/", methods=['GET', 'POST'])
def hello_world():
    request_data = request.get_json()
    if request.method == 'POST':
        prompt = request_data['prompt']
        return prompt
import { BrowserRouter, Route, Routes } from "react-router-dom";
import PromptPage from "./Pages/promptPage";
function App() {



  return (
    <>
      {/* <BrowserRouter basename="crm"> */}
      <BrowserRouter>
        <div className="fixed left-0 top-0 w-screen z-20">
          {/* <TopNav /> */}
        </div>

        <div className="flex h-screen  overflow-auto scrollbar-w-thin">

          {/* <div className={`${!showSidebar && "hidden"} lg:block z-50`}> */}
          <div className="fixed top-3 left-0 h-screen z-10 mt-16 w-48">
            {/* <CustomerSideBar /> */}
          </div>

          <div
            className={`flex lg:pl-64"
               pr-5 w-full pt-20 h-screen flex-col`}
          >
            <Routes>
              <Route index element={<PromptPage />} />


            </Routes>
          </div>
        </div>
      </BrowserRouter>
    </>
  )

}



export default App;
interface Props {
    onHide: () => void,
    add: boolean
}

const PromptPage: React.FC = () => {


    return <>TEst</>
}

export default PromptPage;
import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { api } from "../utils/api";

export class Prompt {
    id: number = 0;
    name: string = "";
    shortName: string = "";
    description: string = "";
}
export class SearchParams {
    first = 0;
    rows = 7;
    searchText = "";
    sortColumn = "";
    sortDirection: number | null | undefined = 1;
}
interface ResStatus {
    status: number;
    msg: string;
}
interface State {
    prompts: Prompt[];
    prompt: Prompt;
    searchParams: SearchParams;
    resStatus: ResStatus;
    loading: boolean;
}

const initialState: State = {
    prompts: [],
    prompt: {
        id: 0,
        name: "",
        shortName: "",
        description: "",
    },
    searchParams: {
        first: 0,
        rows: 7,
        searchText: "",
        sortColumn: "",
        sortDirection: 1,
    },
    resStatus: {
        status: -1,
        msg: "",
    },
    loading: false,
};
const PromptSlice = createSlice({
    name: "prompt",
    initialState,
    reducers: {
        getPrompts: (
            state: State,
            action: PayloadAction<Prompt[]>
        ) => {
            state.prompts = action.payload;
        },
        addPrompt: (state: State, action: PayloadAction<Prompt>) => {
            state.prompt = action.payload;
        },
        setPrompt: (state: State, action: PayloadAction<Prompt>) => {
            state.prompt = action.payload;
        },
        addResStatus: (state: State, action: PayloadAction<ResStatus>) => {
            state.resStatus = action.payload;

        },
        setSearchParams: (state: State, action: PayloadAction<SearchParams>) => {
            state.searchParams = action.payload;
        },
        setLoading: (state: State, action: PayloadAction<boolean>) => {
            state.loading = action.payload;

        },
    },
});
export const {
    getPrompts,
    addPrompt,
    setLoading,
    addResStatus,
    setSearchParams,
    setPrompt,
} = PromptSlice.actions;
export default PromptSlice.reducer;

const setResStatus = (resStatus: ResStatus) => async (dispatch: any) => {
    dispatch(addResStatus(resStatus));
    setTimeout(() => {
        dispatch(addResStatus({ status: -1, msg: "" }));
    }, 1000);
};

export const fetchPrompts =
    (searchParams: SearchParams): any =>
        async (dispatch: any) => {
            try {
                dispatch(setLoading(true));
                const { first, rows, searchText, sortColumn, sortDirection } =
                    searchParams;
                const response = await api.get(
                    `/prompts?f=${first}&r=${rows}&st=${searchText}&sc=${sortColumn}&sd=${sortDirection}&`
                );
                let feedData = response.data;
                dispatch(getPrompts(feedData));
                dispatch(setLoading(false));
            } catch (error: any) {
                dispatch(setLoading(false));
                dispatch(
                    setResStatus({
                        status: error.response.status,
                        msg: error.response.data.msg,
                    })
                );
            }
        };

export const createPrompt =
    (prompt: Prompt, searchParams: SearchParams): any =>
        async (dispatch: any) => {
            try {
                dispatch(setLoading(true));
                const response = await api.post("/prompts", prompt);
                dispatch(
                    setResStatus({
                        status: response.status,
                        msg: "Prompt created successfully",
                    })
                );
                dispatch(fetchPrompts(searchParams));
                dispatch(setLoading(false));
                dispatch(addPrompt(response.data));
            } catch (error: any) {
                dispatch(setLoading(false));
                dispatch(
                    setResStatus({
                        status: error.response.status,
                        msg: error.response.data.msg,
                    })
                );
            }
        };

export const updatePrompt =
    (prompt: Prompt, searchParams: SearchParams): any =>
        async (dispatch: any) => {
            try {
                dispatch(setLoading(true));
                const response = await api.put(
                    `/prompts/${prompt.id}`,
                    prompt,

                );
                dispatch(fetchPrompts(searchParams));
                dispatch(setLoading(false));
                dispatch(
                    setResStatus({
                        status: response.status,
                        msg: "Prompt updated sucessfuly",
                    })
                );
            } catch (error: any) {
                dispatch(setLoading(false));
                dispatch(
                    setResStatus({
                        status: error.response.status,
                        msg: error.response.data.msg,
                    })
                );
            }
        };

export const deletePrompt =
    (prompt: Prompt): any =>
        async (dispatch: any) => {
            try {
                dispatch(setLoading(true));
                const response = await api.delete(`/prompts/${prompt.id}`,);
                dispatch(setLoading(false));
                dispatch(
                    setResStatus({
                        status: response.status,
                        msg: "Prompt deleted successfully",
                    })
                );
                dispatch(fetchPrompts(new SearchParams()));
            } catch (error: any) {
                dispatch(setLoading(false));
                dispatch(
                    setResStatus({
                        status: error.response.status,
                        msg: error.response.data.msg,
                    })
                );
            }
        };
require("@nomicfoundation/hardhat-toolbox");
require('dotenv').config();

const {INFURA_AIP_KEY, PRIVATE_KEY} = process.env
module.exports = {
  solidity: "0.8.19",
  defaultNetwork: "sepolia",
  networks:{
    hardhat:{},
    sepolia:{
      url:`https://sepolia.infura.io/v3/${INFURA_AIP_KEY}`,
      accounts:[PRIVATE_KEY],
    },
  }
};
BoxLayout:
    orientation: "vertical"
    spacing: "10dp"
    padding: "16dp"

    MDLabel:
        text: "Welcome to GeoLogix Transportation Service"
        theme_text_color: "Custom"
        text_color: 0, 0, 0, 1  
    BoxLayout:
        orientation: "horizontal"
        spacing: "10dp"

        MDTextField:
            id: driver_address
            hint_text: "Driver Address"
            helper_text: "Enter the driver's Ethereum address"
            helper_text_mode: "on_focus"
            multiline: False

        MDTextField:
            id: timestamp
            hint_text: "Timestamp"
            helper_text: "Enter the timestamp"
            helper_text_mode: "on_focus"
            input_filter: "int"
            multiline: False

    BoxLayout:
        orientation: "horizontal"
        spacing: "10dp"

        MDTextField:
            id: latitude
            hint_text: "Latitude"
            helper_text: "Enter the latitude"
            helper_text_mode: "on_focus"
            input_filter: "int"
            multiline: False

        MDTextField:
            id: longitude
            hint_text: "Longitude"
            helper_text: "Enter the longitude"
            helper_text_mode: "on_focus"
            input_filter: "int"
            multiline: False

    BoxLayout:
        orientation: "horizontal"
        spacing: "10dp"

        MDTextField:
            id: expected_latitude
            hint_text: "Expected Lat."
            helper_text: "Enter the expected latitude"
            helper_text_mode: "on_focus"
            input_filter: "int"
            multiline: False

        MDTextField:
            id: expected_longitude
            hint_text: "Expected Long."
            helper_text: "Enter the expected longitude"
            helper_text_mode: "on_focus"
            input_filter: "int"
            multiline: False

    MDRaisedButton:
        text: "Interact with Smart Contract"
        on_press: app.interact_with_contract()

    MDLabel:
        id: result_label
        text: "Result:"

    Widget:
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;
import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";

contract GeoLogixSmartContract is ERC20, Ownable {
    address public employer;
    address public driver;
    uint256 public constant SALARY_AMOUNT = 0.15 ether;
    uint256 public constant REWARD_AMOUNT = 0.05 ether;
    uint256 public constant PENALIZE_AMOUNT = 0.05 ether;
    enum DriverPerformance { Excellent, Good, Average, BelowAverage, NotPerformed }
    mapping(address => DriverPerformance) public driverPerformances;
    event SalaryReleased(address indexed driver, uint256 amount);
    event RewardReleased(address indexed driver, uint256 amount);
    event PenaltyApplied(address indexed driver, uint256 amount);
    constructor()Ownable()ERC20("GeoLogixToken", "GLT") {
        employer = payable(0x126bF9bCd4D69BDb0726e00e76299F95b03a11b2);
        driver = payable(0x0C6342C070Ca9A5699B5F7bfaEE5B5953d0C851c);
    }
    function evaluateDriver(
        int256 currentLatitude,
        int256 currentLongitude
    ) external onlyOwner {
        // require(timestamp == 20 minutes, "Invalid timestamp");
        // Check if the driver is at the checkpoint
        // we have the one checkpoints (100,100) 
        if (((uint256(100-currentLatitude))<=5 && (uint256(100-currentLongitude))<=5 )) {
            payable(driver).transfer(SALARY_AMOUNT + REWARD_AMOUNT);
        }
        else if ((uint256(100-currentLatitude)<=10 && uint256(100-currentLongitude)<=10)) {
            payable(driver).transfer(SALARY_AMOUNT);
        }
        else {
            payable(driver).transfer(SALARY_AMOUNT-PENALIZE_AMOUNT);
        }
    }
}
from brownie import  GeoLogixSmartContract, accounts


def main():
    deployer = accounts[0]

        geo_logix = GeoLogixSmartContract.deploy({'from': deployer})

        print(f"GeoLogixSmartContract deployed at: {geo_logix.address}")
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from web3 import Web3

class GeoLogixApp(App):
    def __init__(self, smart_contract_address, private_key):
        super().__init__()
        self.smart_contract_address = smart_contract_address
        self.private_key = private_key
        self.web3 = Web3(Web3.HTTPProvider('https://mainnet.infura.io/v3/8d9417b0722b42479208f29e4d34b015'))
        self.contract = self.web3.eth.contract(address=self.smart_contract_address, abi=ABI)

    def build(self):
        self.layout = BoxLayout(orientation='vertical', spacing=10, padding=10)

        self.latitude_input = TextInput(text='0', multiline=False, input_type='number')
        self.layout.add_widget(Label(text='Latitude:'))
        self.layout.add_widget(self.latitude_input)

        self.longitude_input = TextInput(text='0', multiline=False, input_type='number')
        self.layout.add_widget(Label(text='Longitude:'))
        self.layout.add_widget(self.longitude_input)

        self.timestamp_input = TextInput(text='600', multiline=False, input_type='number')
        self.layout.add_widget(Label(text='Timestamp (minutes):'))
        self.layout.add_widget(self.timestamp_input)

        evaluate_button = Button(text='Evaluate Driver', on_press=self.evaluate_driver)
        self.layout.add_widget(evaluate_button)

        return self.layout

    def evaluate_driver(self, instance):
        try:
            current_latitude = int(self.latitude_input.text)
            current_longitude = int(self.longitude_input.text)
            timestamp = int(self.timestamp_input.text) * 60  
            transaction_data = self.contract.functions.evaluateDriver(current_latitude, current_longitude).build_transaction({
                  'from': self.web3.eth.account.from_key(self.private_key).address,
                  'gas': 21344,
                  'gasPrice': self.web3.to_wei('0.1', 'gwei'),
                  'nonce': self.web3.eth.get_transaction_count(self.web3.eth.account.from_key(self.private_key).address),
              })


            signed_transaction = self.web3.eth.account.sign_transaction(transaction_data, self.private_key)
            transaction_hash = self.web3.eth.send_raw_transaction(signed_transaction.rawTransaction)

            self.layout.add_widget(Label(text=f'Transaction Hash: {transaction_hash.hex()}', color=(0, 1, 0, 1)))

        except ValueError as e:
            self.layout.add_widget(Label(text=f'Error: {e}', color=(1, 0, 0, 1)))


if __name__ == '__main__':
    smart_contract_address = '0x66aB6D9362d4F35596279692F0251Db635165871'
    private_key = '0xccd66a691c505d3139d53d938f259720cbe959208c11fe12ecc15c8226677a25'
    ABI = [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": False,
      "inputs": [
        {
          "indexed": True,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": True,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": False,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": False,
      "inputs": [
        {
          "indexed": True,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": True,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": False,
      "inputs": [
        {
          "indexed": True,
          "internalType": "address",
          "name": "driver",
          "type": "address"
        },
        {
          "indexed": False,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PenaltyApplied",
      "type": "event"
    },
    {
      "anonymous": False,
      "inputs": [
        {
          "indexed": True,
          "internalType": "address",
          "name": "driver",
          "type": "address"
        },
        {
          "indexed": False,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardReleased",
      "type": "event"
    },
    {
      "anonymous": False,
      "inputs": [
        {
          "indexed": True,
          "internalType": "address",
          "name": "driver",
          "type": "address"
        },
        {
          "indexed": False,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SalaryReleased",
      "type": "event"
    },
    {
      "anonymous": False,
      "inputs": [
        {
          "indexed": True,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": True,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": False,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PENALIZE_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SALARY_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "driver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "driverPerformances",
      "outputs": [
        {
          "internalType": "enum GeoLogixSmartContract.DriverPerformance",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "employer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "currentLatitude",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "currentLongitude",
          "type": "int256"
        }
      ],
      "name": "evaluateDriver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ]
    GeoLogixApp(smart_contract_address, private_key).run()
pragma solidity ^0.4.11;

import "github.com/oraclize/ethereum-api/oraclizeAPI.sol";

/// @title Contract to bet Ether for a number and win randomly when the number of bets is met.
/// @author Merunas Grincalaitis
contract Casino is usingOraclize {
   address owner;

   // The minimum bet a user has to make to participate in the game
   uint public minimumBet = 100 finney; // Equal to 0.1 ether

   // The total amount of Ether bet for this current game
   uint public totalBet;

   // The total number of bets the users have made
   uint public numberOfBets;

   // The maximum amount of bets can be made for each game
   uint public maxAmountOfBets = 10;

   // The max amount of bets that cannot be exceeded to avoid excessive gas consumption
   // when distributing the prizes and restarting the game
   uint public constant LIMIT_AMOUNT_BETS = 100;

   // The number that won the last game
   uint public numberWinner;

   // Array of players
   address[] public players;

   // Each number has an array of players. Associate each number with a bunch of players
   mapping(uint => address[]) numberBetPlayers;

   // The number that each player has bet for
   mapping(address => uint) playerBetsNumber;

   // Modifier to only allow the execution of functions when the bets are completed
   modifier onEndGame(){
      if(numberOfBets >= maxAmountOfBets) _;
   }

   /// @notice Constructor that's used to configure the minimum bet per game and the max amount of bets
   /// @param _minimumBet The minimum bet that each user has to make in order to participate in the game
   /// @param _maxAmountOfBets The max amount of bets that are required for each game
   function Casino(uint _minimumBet, uint _maxAmountOfBets){
      owner = msg.sender;

      if(_minimumBet > 0) minimumBet = _minimumBet;
      if(_maxAmountOfBets > 0 && _maxAmountOfBets <= LIMIT_AMOUNT_BETS)
         maxAmountOfBets = _maxAmountOfBets;

      // Set the proof of oraclize in order to make secure random number generations
      oraclize_setProof(proofType_Ledger);
   }

   /// @notice Check if a player exists in the current game
   /// @param player The address of the player to check
   /// @return bool Returns true is it exists or false if it doesn't
   function checkPlayerExists(address player) returns(bool){
      if(playerBetsNumber[player] > 0)
         return true;
      else
         return false;
   }

   /// @notice To bet for a number by sending Ether
   /// @param numberToBet The number that the player wants to bet for. Must be between 1 and 10 both inclusive
   function bet(uint numberToBet) payable{

      // Check that the max amount of bets hasn't been met yet
      assert(numberOfBets < maxAmountOfBets);

      // Check that the player doesn't exists
      assert(checkPlayerExists(msg.sender) == false);

      // Check that the number to bet is within the range
      assert(numberToBet >= 1 && numberToBet <= 10);

      // Check that the amount paid is bigger or equal the minimum bet
      assert(msg.value >= minimumBet);

      // Set the number bet for that player
      playerBetsNumber[msg.sender] = numberToBet;

      // The player msg.sender has bet for that number
      numberBetPlayers[numberToBet].push(msg.sender);

      numberOfBets += 1;
      totalBet += msg.value;

      if(numberOfBets >= maxAmountOfBets) generateNumberWinner();
   }

   /// @notice Generates a random number between 1 and 10 both inclusive.
   /// Must be payable because oraclize needs gas to generate a random number.
   /// Can only be executed when the game ends.
   function generateNumberWinner() payable onEndGame {
      uint numberRandomBytes = 7;
      uint delay = 0;
      uint callbackGas = 200000;

      bytes32 queryId = oraclize_newRandomDSQuery(delay, numberRandomBytes, callbackGas);
   }

   /// @notice Callback function that gets called by oraclize when the random number is generated
   /// @param _queryId The query id that was generated to proofVerify
   /// @param _result String that contains the number generated
   /// @param _proof A string with a proof code to verify the authenticity of the number generation
   function __callback(
      bytes32 _queryId,
      string _result,
      bytes _proof
   ) oraclize_randomDS_proofVerify(_queryId, _result, _proof) onEndGame {

      // Checks that the sender of this callback was in fact oraclize
      assert(msg.sender == oraclize_cbAddress());

      numberWinner = (uint(sha3(_result))%10+1);
      distributePrizes();
   }

   /// @notice Sends the corresponding Ether to each winner then deletes all the
   /// players for the next game and resets the `totalBet` and `numberOfBets`
   function distributePrizes() onEndGame {
      uint winnerEtherAmount = totalBet / numberBetPlayers[numberWinner].length; // How much each winner gets

      // Loop through all the winners to send the corresponding prize for each one
      for(uint i = 0; i < numberBetPlayers[numberWinner].length; i++){
         numberBetPlayers[numberWinner][i].transfer(winnerEtherAmount);
      }

      // Delete all the players for each number
      for(uint j = 1; j <= 10; j++){
         numberBetPlayers[j].length = 0;
      }

      totalBet = 0;
      numberOfBets = 0;
   }
}
// SPDX-License-Identifier: MIT
pragma solidity >=0.4.22 <0.9.0;

contract PayByLocation {
 
    struct Employee {
        string name;
        uint256 distance;
        uint256 registeredAt;
        uint256 contractEnd;
        int256 lat;
        int256 lng;
        bool comply;
        bool paid;
    }
    
    mapping(address => Employee) public employees;
    mapping(uint => address) public employeesAddress;
    uint public employeeCount;

    constructor() {
        employeeCount = 0;
    }

    function addEmployee(
        address _employeeAddress,
        string memory _name,
        uint256 _allowedDistance,
        uint256 _contractEnd,
        int256 _lat,
        int256 _lng
    ) public {
        uint256 time = block.timestamp;
        Employee memory employee = Employee(
            _name,
            _allowedDistance,
            time,
            _contractEnd,
            _lat,
            _lng,
            true,
            false
        );
        employees[_employeeAddress] = employee;
        employeesAddress[employeeCount] = _employeeAddress;
        employeeCount++;

    }

    function getEmployee(uint index)
        public
        view
        returns (Employee memory)
    {
        return (employees[employeesAddress[index]]);
    }

    function getEmployees()
        public
        view
        returns (Employee[] memory)
    {

        Employee[] memory ret = new Employee[](employeeCount);
        for (uint i = 0; i < employeeCount; i++) {
            ret[i] = employees[employeesAddress[i]];
        }
        return ret;
    
    }
    
    function evaluate(int256 _lat, int256 _lng) public {
        // Reference distance is lat and lng from the function parameters
        address empAddr = msg.sender;
        Employee storage employee = employees[empAddr];
        bool comply = isComplied(_lat, _lng, employee);
        
        if (comply && block.timestamp >= employee.contractEnd && !employee.paid) {
            // Reward the employee for compliance
            employee.paid = true;
            // You can define your reward mechanism here, for example, transferring tokens or ether
            // For demonstration, let's assume rewarding with 1 ether
            payable(empAddr).transfer(1 ether);
        } else if (!comply && block.timestamp < employee.contractEnd) {
            // Penalize the employee for non-compliance
            // You can define your penalty mechanism here
            // For demonstration, let's assume deducting 1 ether from the employee's balance
            // Assuming the contract holds the balance of employees
            // You would typically handle this with appropriate funds management in a real application
            if (address(this).balance >= 1 ether) {
                payable(empAddr).transfer(1 ether - 1 ether);
            }
        }

        employees[empAddr] = employee;
    }

    function getDistance(
        int256 _lat,
        int256 _lng,
        int256 _lat1,
        int256 _lng1
    ) private pure returns (int256) {
        int256 dist = sqrt(((_lat - _lat1)**2) + ((_lng - _lng1)**2));
        return dist;
        // return 6;
    }

    function sqrt(int256 x) private pure returns (int256 y) {
        int256 z = (x + 1) / 2;
        y = x;
        while (z < (y)) {
            y = z;
            z = (x / z + z) / 2;
        }
        return y;
    }

    function isComplied(
        int256 _lat,
        int256 _lng,
        Employee memory _employee
    ) private pure returns (bool) {
        int256 distance = getDistance(
            _lat,
            _lng,
            _employee.lat,
            _employee.lng
        );
        return distance <= int(_employee.distance);
    }

    function getSender() public view returns (address) {
        return msg.sender;
    }

}
const payByLocation = artifacts.require("PayByLocation");

/*
 * uncomment accounts to access the test accounts made available by the
 * Ethereum client
 * See docs: https://www.trufflesuite.com/docs/truffle/testing/writing-tests-in-javascript
 */
contract("PayByLocation", function (/* accounts */) {
  // it("should assert true", async function () {
  //   let instance = await payByLocation.deployed();
  //   // console.log(await instance.getSender())
  //   return assert.isTrue(await instance.getSender()=="0xbb3c032365E41D85F1730Cb08e86dA6EA138FDe7");
  // });

  it("should assert true", async function () {
    let instance = await PayByLocation.deployed();
    console.log(await instance.getDistance(0,0,3,4))
    // console.log(await instance.sqrt(4)==2)
    return assert.isTrue(await instance.getDistance(0,0,3,4)==5);
  });
});
/**
 * Use this file to configure your truffle project. It's seeded with some
 * common settings for different networks and features like migrations,
 * compilation, and testing. Uncomment the ones you need or modify
 * them to suit your project as necessary.
 *
 * More information about configuration can be found at:
 *
 * https://trufflesuite.com/docs/truffle/reference/configuration
 *
 * Hands-off deployment with Infura
 * --------------------------------
 *
 * Do you have a complex application that requires lots of transactions to deploy?
 * Use this approach to make deployment a breeze 🏖️:
 *
 * Infura deployment needs a wallet provider (like @truffle/hdwallet-provider)
 * to sign transactions before they're sent to a remote public node.
 * Infura accounts are available for free at 🔍: https://infura.io/register
 *
 * You'll need a mnemonic - the twelve word phrase the wallet uses to generate
 * public/private key pairs. You can store your secrets 🤐 in a .env file.
 * In your project root, run `$ npm install dotenv`.
 * Create .env (which should be .gitignored) and declare your MNEMONIC
 * and Infura PROJECT_ID variables inside.
 * For example, your .env file will have the following structure:
 *
 * MNEMONIC = <Your 12 phrase mnemonic>
 * PROJECT_ID = <Your Infura project id>
 *
 * Deployment with Truffle Dashboard (Recommended for best security practice)
 * --------------------------------------------------------------------------
 *
 * Are you concerned about security and minimizing rekt status 🤔?
 * Use this method for best security:
 *
 * Truffle Dashboard lets you review transactions in detail, and leverages
 * MetaMask for signing, so there's no need to copy-paste your mnemonic.
 * More details can be found at 🔎:
 *
 * https://trufflesuite.com/docs/truffle/getting-started/using-the-truffle-dashboard/
 */

// require('dotenv').config();
// const { MNEMONIC, PROJECT_ID } = process.env;

// const HDWalletProvider = require('@truffle/hdwallet-provider');

module.exports = {
  /**
   * Networks define how you connect to your ethereum client and let you set the
   * defaults web3 uses to send transactions. If you don't specify one truffle
   * will spin up a managed Ganache instance for you on port 9545 when you
   * run `develop` or `test`. You can ask a truffle command to use a specific
   * network from the command line, e.g
   *
   * $ truffle test --network <network-name>
   */

  networks: {
    // Useful for testing. The `development` name is special - truffle uses it by default
    // if it's defined here and no other network is specified at the command line.
    // You should run a client (like ganache, geth, or parity) in a separate terminal
    // tab if you use this network and you must also set the `host`, `port` and `network_id`
    // options below to some value.
    //
    development: {
     host: "127.0.0.1",     // Localhost (default: none)
     port: 8545,            // Standard Ethereum port (default: none)
     network_id: "*",       // Any network (default: none)
    },
    //
    // An additional network, but with some advanced options…
    // advanced: {
    //   port: 8777,             // Custom port
    //   network_id: 1342,       // Custom network
    //   gas: 8500000,           // Gas sent with each transaction (default: ~6700000)
    //   gasPrice: 20000000000,  // 20 gwei (in wei) (default: 100 gwei)
    //   from: <address>,        // Account to send transactions from (default: accounts[0])
    //   websocket: true         // Enable EventEmitter interface for web3 (default: false)
    // },
    //
    // Useful for deploying to a public network.
    // Note: It's important to wrap the provider as a function to ensure truffle uses a new provider every time.
    // goerli: {
    //   provider: () => new HDWalletProvider(MNEMONIC, `https://goerli.infura.io/v3/${PROJECT_ID}`),
    //   network_id: 5,       // Goerli's id
    //   confirmations: 2,    //     //   timeoutBlocks: 200,  //     //   skipDryRun: true     // Skip dry run before migrations? (default: false for public nets )
    // },
    //
    // Useful for private networks
    // private: {
    //   provider: () => new HDWalletProvider(MNEMONIC, `https://network.io`),
    //   network_id: 2111,   // This network is yours, in the cloud.
    //   production: true    // Treats this network as if it was a public net. (default: false)
    // }
  },

  // Set default mocha options here, use special reporters, etc.
  mocha: {
    // timeout: 100000
  },

  // Configure your compilers
  compilers: {
    solc: {
      version: "0.8.17",      // Fetch exact version from solc-bin (default: truffle's version)
      // docker: true,        // Use "0.5.1" you've installed locally with docker (default: false)
      // settings: {          // See the solidity docs for advice about optimization and evmVersion
      //  optimizer: {
      //    enabled: false,
      //    runs: 200
      //  },
      //  evmVersion: "byzantium"
      // }
    }
  },

  // Truffle DB is currently disabled by default; to enable it, change enabled:
  // false to enabled: true. The default storage location can also be
  // overridden by specifying the adapter settings, as shown in the commented code below.
  //
  // NOTE: It is not possible to migrate your contracts to truffle DB and you should
  // make a backup of your artifacts to a safe location before enabling this feature.
  //
  // After you backed up your artifacts you can utilize db by running migrate as follows:
  // $ truffle migrate --reset --compile-all
  //
  // db: {
  //   enabled: false,
  //   host: "127.0.0.1",
  //   adapter: {
  //     name: "indexeddb",
  //     settings: {
  //       directory: ".db"
  //     }
  //   }
  // }
};
A new Flutter project.


This project is a starting point for a Flutter application.

A few resources to get you started if this is your first Flutter project:

- [Lab: Write your first Flutter app](https://docs.flutter.dev/get-started/codelab)
- [Cookbook: Useful Flutter samples](https://docs.flutter.dev/cookbook)

For help getting started with Flutter development, view the
[online documentation](https://docs.flutter.dev/), which offers tutorials,
samples, guidance on mobile development, and a full API reference.
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:get/get_instance/src/bindings_interface.dart';
import 'package:get/get_navigation/src/root/get_material_app.dart';
import 'package:sizer/sizer.dart';

import 'package:driver/pages/main_scree.dart';
import 'package:driver/pages/onboarding_screen.dart';
import 'package:driver/pages/Screens/Welcome/welcome_screen.dart';
import 'package:driver/pages/constants.dart';
import 'package:driver/state/bottom_nav_bar/bottom_nav_logic.dart';
import 'package:driver/state/contract/contract_logic.dart';
import 'package:driver/state/home/home_logic.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Sizer(builder: ((context, orientation, deviceType) {
      return GetMaterialApp(
        title: 'Courier app',
        debugShowCheckedModeBanner: false,
        theme: ThemeData(
          colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
          useMaterial3: true,
        ),
        initialBinding: InitBinding(),
        home: const WelcomeScreen(), // Change MainScreen to SplashScreen
      );
    }));
  }
}

class InitBinding extends Bindings {
  @override
  void dependencies() {
    Get.lazyPut(() => BottomNavLogic());
    Get.lazyPut(() => HomeLogic());
    Get.lazyPut(() => ContractLogic());
    Get.lazyPut<MainScreen>(() => MainScreen()); // Add this line
  }
}
import 'package:flutter/material.dart';
import 'package:get/get.dart';

import 'package:driver/state/bottom_nav_bar/bottom_nav_logic.dart';

class NavBarItem extends StatelessWidget {
  final int index;
  final String label;

  NavBarItem({
    Key? key,
    required this.index,
    required this.label,
  }) : super(key: key);

  final logic = Get.find<BottomNavLogic>();

  @override
  Widget build(BuildContext context) {
    ThemeData themeData = Theme.of(context);

    return GestureDetector(
      onTap: () => logic.changeTap(index),
      behavior: HitTestBehavior.translucent,
      child: Obx(
        () => Container(
          padding: EdgeInsets.symmetric(vertical: 8.0, horizontal: 16.0),
          decoration: BoxDecoration(
            color: logic.selectedTab == index
                ? Colors.green.withOpacity(0.2)
                : Colors.transparent,
            borderRadius: BorderRadius.circular(12.0),
          ),
          child: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              Icon(
                index == 0 ? Icons.home : Icons.map,
                color: logic.selectedTab == index
                    ? Colors.green
                    : const Color(0xff929292),
              ),
              SizedBox(width: 8.0),
              Text(
                label,
                style: themeData.textTheme.bodyText1!.copyWith(
                  fontSize: 16,
                  color: logic.selectedTab == index
                      ? Colors.green
                      : const Color(0xff929292),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:latlong2/latlong.dart';

class MapScreen extends StatelessWidget {
  final String accessToken = 'YOUR_ACCESS_TOKEN';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(
          title: const Text('Map'),
        ),
        body: FlutterMap(
          options: MapOptions(
            initialCenter: LatLng(38.829004, -8.9956957),
            initialZoom: 9.2,
          ),
          children: [
            TileLayer(
              urlTemplate: "https://api.mapbox.com/styles/v1/"
                  "{id}/tiles/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoiZWxtZWhkaXZvbiIsImEiOiJja3c3czdjYWcxMnI1MnFxbG1ubTZ6bGJiIn0.KvROk3IY0YX_Km0O2zB0Ww",
              userAgentPackageName: 'com.example.app',
              additionalOptions: {
                'accessToken':
                    "pk.eyJ1IjoiZWxtZWhkaXZvbiIsImEiOiJja3c3czdjYWcxMnI1MnFxbG1ubTZ6bGJiIn0.KvROk3IY0YX_Km0O2zB0Ww",

                'id':
                    'mapbox/streets-v11', // Replace with your desired map style
              },
            ),
            RichAttributionWidget(
              attributions: [
                TextSourceAttribution(
                  'OpenStreetMap contributors',
                  onTap: () => launchUrl(
                      Uri.parse('https://openstreetmap.org/copyright')),
                ),
              ],
            ),
          ],
        )
        );
  }
}
import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:geolocator/geolocator.dart';
import 'package:get/get_state_manager/src/simple/get_controllers.dart';
import 'package:http/http.dart';
import 'package:web3dart/web3dart.dart';
import 'package:web_socket_channel/io.dart';
import 'package:permission_handler/permission_handler.dart';

class ContractLogic extends GetxController {
  static const String contractName = "PayByLocation";
  static const String ip = '127.0.0.1';
  static const String port = '8545';
  final String _rpcURL = "http://$ip:$port";
  final String _wsURL = "ws://$ip:$port/";
  final String _privateKey =
      "0x82552f5eC5A221d1aEb53cBB58B2c3A451440a3c";

  late Web3Client _client;
  late Credentials _credentials;
  late DeployedContract _contarct;
  late ContractFunction _evaluate;

  init(context) {
    initialize(context);
  }

  initialize(context) async {
    _client = Web3Client(_rpcURL, Client(), socketConnector: () {
      return IOWebSocketChannel.connect(_wsURL).cast<String>();
    });

    final abiStringFile = await DefaultAssetBundle.of(context)
        .loadString("../../smart_contract/truffle/build/contracts/PayByLocation.json");
    final abiJson = jsonDecode(abiStringFile);
    final abi = jsonEncode(abiJson['abi']);
    final contractAddress =
        EthereumAddress.fromHex(abiJson['networks']['5777']['address']);
    _credentials = EthPrivateKey.fromHex(_privateKey);
    _contarct = DeployedContract(
        ContractAbi.fromJson(abi, contractName), contractAddress);
    print('99999999999999999');
    print(_contarct.address);

    _evaluate = _contarct.function('evaluate');
  }

  Future getEvaluate({lat, long}) async {
    print("===================");
    var c = await _client.sendTransaction(
        _credentials,
        Transaction.callContract(
            contract: _contarct, function: _evaluate, parameters: [lat, long]));
    print(c);
  }

  void getLocation() async {
    final status = await Permission.location.request();
    if (status.isGranted) {
      Position position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
      );

      var latitude = position.latitude;
      var longitude = position.longitude;

      getEvaluate(lat: BigInt.from(latitude), long: BigInt.from(longitude));
    } else if (status.isDenied) {
    } else if (status.isPermanentlyDenied) {
      // openAppSettings();
    }
  }
}
packages:
  async:
    dependency: transitive
    description:
      name: async
      sha256: "947bfcf187f74dbc5e146c9eb9c0f10c9f8b30743e341481c1e2ed3ecc18c20c"
      url: "https://pub.dev"
    source: hosted
    version: "2.11.0"
  boolean_selector:
    dependency: transitive
    description:
      name: boolean_selector
      sha256: "6cfb5af12253eaf2b368f07bacc5a80d1301a071c73360d746b7f2e32d762c66"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.1"
  characters:
    dependency: transitive
    description:
      name: characters
      sha256: "04a925763edad70e8443c99234dc3328f442e811f1d8fd1a72f1c8ad0f69a605"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.0"
  clock:
    dependency: transitive
    description:
      name: clock
      sha256: cb6d7f03e1de671e34607e909a7213e31d7752be4fb66a86d29fe1eb14bfb5cf
      url: "https://pub.dev"
    source: hosted
    version: "1.1.1"
  collection:
    dependency: transitive
    description:
      name: collection
      sha256: ee67cb0715911d28db6bf4af1026078bd6f0128b07a5f66fb2ed94ec6783c09a
      url: "https://pub.dev"
    source: hosted
    version: "1.18.0"
  convert:
    dependency: transitive
    description:
      name: convert
      sha256: "0f08b14755d163f6e2134cb58222dd25ea2a2ee8a195e53983d57c075324d592"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.1"
  crypto:
    dependency: transitive
    description:
      name: crypto
      sha256: ff625774173754681d66daaf4a448684fb04b78f902da9cb3d308c19cc5e8bab
      url: "https://pub.dev"
    source: hosted
    version: "3.0.3"
  cupertino_icons:
    dependency: "direct main"
    description:
      name: cupertino_icons
      sha256: d57953e10f9f8327ce64a508a355f0b1ec902193f66288e8cb5070e7c47eeb2d
      url: "https://pub.dev"
    source: hosted
    version: "1.0.6"
  eip1559:
    dependency: transitive
    description:
      name: eip1559
      sha256: c2b81ac85f3e0e71aaf558201dd9a4600f051ece7ebacd0c5d70065c9b458004
      url: "https://pub.dev"
    source: hosted
    version: "0.6.2"
  eip55:
    dependency: transitive
    description:
      name: eip55
      sha256: "213a9b86add87a5216328e8494b0ab836e401210c4d55eb5e521bd39e39169e1"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.2"
  fake_async:
    dependency: transitive
    description:
      name: fake_async
      sha256: "511392330127add0b769b75a987850d136345d9227c6b94c96a04cf4a391bf78"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.1"
  flutter:
    dependency: "direct main"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_lints:
    dependency: "direct dev"
    description:
      name: flutter_lints
      sha256: a25a15ebbdfc33ab1cd26c63a6ee519df92338a9c10f122adda92938253bef04
      url: "https://pub.dev"
    source: hosted
    version: "2.0.3"
  flutter_map:
    dependency: "direct main"
    description:
      name: flutter_map
      sha256: cda8d72135b697f519287258b5294a57ce2f2a5ebf234f0e406aad4dc14c9399
      url: "https://pub.dev"
    source: hosted
    version: "6.1.0"
  flutter_svg:
    dependency: "direct main"
    description:
      name: flutter_svg
      sha256: "6ff9fa12892ae074092de2fa6a9938fb21dbabfdaa2ff57dc697ff912fc8d4b2"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.6"
  flutter_test:
    dependency: "direct dev"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_web_plugins:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.0"
  geolocator:
    dependency: "direct main"
    description:
      name: geolocator
      sha256: b8f520252c5c66851295bcc263bc8ae7555501938427f72216ba7688702e261d
      url: "https://pub.dev"
    source: hosted
    version: "7.7.1"
  geolocator_android:
    dependency: transitive
    description:
      name: geolocator_android
      sha256: "2f84d6d68b97a3774f2c4111ac95ec5898cd9b98f12193fc3ea7fa21d7a8b46c"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.0"
  geolocator_apple:
    dependency: transitive
    description:
      name: geolocator_apple
      sha256: "1e8e398cc92151d946a4bbd34e2075885333e42d35ca33e418e7ce7b0a29991e"
      url: "https://pub.dev"
    source: hosted
    version: "1.2.2"
  geolocator_platform_interface:
    dependency: transitive
    description:
      name: geolocator_platform_interface
      sha256: "9d6f34a8a4b704d504f34acc5e52d880a7d2caedd99739902d6319179b0336d4"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.6"
  geolocator_web:
    dependency: transitive
    description:
      name: geolocator_web
      sha256: "0b9e0ec13ce2211085cae0055b3516c975bd6cfe2878a20c8f13611f1a259855"
      url: "https://pub.dev"
    source: hosted
    version: "2.0.6"
  get:
    dependency: "direct main"
    description:
      name: get
      sha256: e4e7335ede17452b391ed3b2ede016545706c01a02292a6c97619705e7d2a85e
      url: "https://pub.dev"
    source: hosted
    version: "4.6.6"
  http:
    dependency: "direct main"
    description:
      name: http
      sha256: "759d1a329847dd0f39226c688d3e06a6b8679668e350e2891a6474f8b4bb8525"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.0"
  http_parser:
    dependency: transitive
    description:
      name: http_parser
      sha256: "2aa08ce0341cc9b354a498388e30986515406668dbcc4f7c950c3e715496693b"
      url: "https://pub.dev"
    source: hosted
    version: "4.0.2"
  intl:
    dependency: transitive
    description:
      name: intl
      sha256: d6f56758b7d3014a48af9701c085700aac781a92a87a62b1333b46d8879661cf
      url: "https://pub.dev"
    source: hosted
    version: "0.19.0"
  js:
    dependency: transitive
    description:
      name: js
      sha256: "4186c61b32f99e60f011f7160e32c89a758ae9b1d0c6d28e2c02ef0382300e2b"
      url: "https://pub.dev"
    source: hosted
    version: "0.7.0"
  json_rpc_2:
    dependency: transitive
    description:
      name: json_rpc_2
      sha256: "5e469bffa23899edacb7b22787780068d650b106a21c76db3c49218ab7ca447e"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.2"
  latlong2:
    dependency: "direct main"
    description:
      name: latlong2
      sha256: "18712164760cee655bc790122b0fd8f3d5b3c36da2cb7bf94b68a197fbb0811b"
      url: "https://pub.dev"
    source: hosted
    version: "0.9.0"
  lints:
    dependency: transitive
    description:
      name: lints
      sha256: "0a217c6c989d21039f1498c3ed9f3ed71b354e69873f13a8dfc3c9fe76f1b452"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.1"
  lists:
    dependency: transitive
    description:
      name: lists
      sha256: "4ca5c19ae4350de036a7e996cdd1ee39c93ac0a2b840f4915459b7d0a7d4ab27"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.1"
  logger:
    dependency: transitive
    description:
      name: logger
      sha256: "6bbb9d6f7056729537a4309bda2e74e18e5d9f14302489cc1e93f33b3fe32cac"
      url: "https://pub.dev"
    source: hosted
    version: "2.0.2+1"
  matcher:
    dependency: transitive
    description:
      name: matcher
      sha256: "1803e76e6653768d64ed8ff2e1e67bea3ad4b923eb5c56a295c3e634bad5960e"
      url: "https://pub.dev"
    source: hosted
    version: "0.12.16"
  material_color_utilities:
    dependency: transitive
    description:
      name: material_color_utilities
      sha256: "9528f2f296073ff54cb9fee677df673ace1218163c3bc7628093e7eed5203d41"
      url: "https://pub.dev"
    source: hosted
    version: "0.5.0"
  meta:
    dependency: transitive
    description:
      name: meta
      sha256: a6e590c838b18133bb482a2745ad77c5bb7715fb0451209e1a7567d416678b8e
      url: "https://pub.dev"
    source: hosted
    version: "1.10.0"
  mgrs_dart:
    dependency: transitive
    description:
      name: mgrs_dart
      sha256: fb89ae62f05fa0bb90f70c31fc870bcbcfd516c843fb554452ab3396f78586f7
      url: "https://pub.dev"
    source: hosted
    version: "2.0.0"
  path:
    dependency: transitive
    description:
      name: path
      sha256: "8829d8a55c13fc0e37127c29fedf290c102f4e40ae94ada574091fe0ff96c917"
      url: "https://pub.dev"
    source: hosted
    version: "1.8.3"
  path_drawing:
    dependency: transitive
    description:
      name: path_drawing
      sha256: bbb1934c0cbb03091af082a6389ca2080345291ef07a5fa6d6e078ba8682f977
      url: "https://pub.dev"
    source: hosted
    version: "1.0.1"
  path_parsing:
    dependency: transitive
    description:
      name: path_parsing
      sha256: e3e67b1629e6f7e8100b367d3db6ba6af4b1f0bb80f64db18ef1fbabd2fa9ccf
      url: "https://pub.dev"
    source: hosted
    version: "1.0.1"
  permission_handler:
    dependency: "direct main"
    description:
      name: permission_handler
      sha256: "284a66179cabdf942f838543e10413246f06424d960c92ba95c84439154fcac8"
      url: "https://pub.dev"
    source: hosted
    version: "11.0.1"
  permission_handler_android:
    dependency: transitive
    description:
      name: permission_handler_android
      sha256: f9fddd3b46109bd69ff3f9efa5006d2d309b7aec0f3c1c5637a60a2d5659e76e
      url: "https://pub.dev"
    source: hosted
    version: "11.1.0"
  permission_handler_apple:
    dependency: transitive
    description:
      name: permission_handler_apple
      sha256: "99e220bce3f8877c78e4ace901082fb29fa1b4ebde529ad0932d8d664b34f3f5"
      url: "https://pub.dev"
    source: hosted
    version: "9.1.4"
  permission_handler_platform_interface:
    dependency: transitive
    description:
      name: permission_handler_platform_interface
      sha256: "6760eb5ef34589224771010805bea6054ad28453906936f843a8cc4d3a55c4a4"
      url: "https://pub.dev"
    source: hosted
    version: "3.12.0"
  permission_handler_windows:
    dependency: transitive
    description:
      name: permission_handler_windows
      sha256: cc074aace208760f1eee6aa4fae766b45d947df85bc831cde77009cdb4720098
      url: "https://pub.dev"
    source: hosted
    version: "0.1.3"
  petitparser:
    dependency: transitive
    description:
      name: petitparser
      sha256: c15605cd28af66339f8eb6fbe0e541bfe2d1b72d5825efc6598f3e0a31b9ad27
      url: "https://pub.dev"
    source: hosted
    version: "6.0.2"
  plugin_platform_interface:
    dependency: transitive
    description:
      name: plugin_platform_interface
      sha256: "4820fbfdb9478b1ebae27888254d445073732dae3d6ea81f0b7e06d5dedc3f02"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.8"
  pointycastle:
    dependency: transitive
    description:
      name: pointycastle
      sha256: "43ac87de6e10afabc85c445745a7b799e04de84cebaa4fd7bf55a5e1e9604d29"
      url: "https://pub.dev"
    source: hosted
    version: "3.7.4"
  polylabel:
    dependency: transitive
    description:
      name: polylabel
      sha256: "41b9099afb2aa6c1730bdd8a0fab1400d287694ec7615dd8516935fa3144214b"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.1"
  proj4dart:
    dependency: transitive
    description:
      name: proj4dart
      sha256: c8a659ac9b6864aa47c171e78d41bbe6f5e1d7bd790a5814249e6b68bc44324e
      url: "https://pub.dev"
    source: hosted
    version: "2.1.0"
  sec:
    dependency: transitive
    description:
      name: sec
      sha256: "8bbd56df884502192a441b5f5d667265498f2f8728a282beccd9db79e215f379"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.0"
  sizer:
    dependency: "direct main"
    description:
      name: sizer
      sha256: d2b3cb6cbc4a637f508dacd786bae55df31e5fc088044248a43e4fd1e050c117
      url: "https://pub.dev"
    source: hosted
    version: "2.0.15"
  sky_engine:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.99"
  source_span:
    dependency: transitive
    description:
      name: source_span
      sha256: "53e943d4206a5e30df338fd4c6e7a077e02254531b138a15aec3bd143c1a8b3c"
      url: "https://pub.dev"
    source: hosted
    version: "1.10.0"
  stack_trace:
    dependency: transitive
    description:
      name: stack_trace
      sha256: "73713990125a6d93122541237550ee3352a2d84baad52d375a4cad2eb9b7ce0b"
      url: "https://pub.dev"
    source: hosted
    version: "1.11.1"
  stream_channel:
    dependency: transitive
    description:
      name: stream_channel
      sha256: ba2aa5d8cc609d96bbb2899c28934f9e1af5cddbd60a827822ea467161eb54e7
      url: "https://pub.dev"
    source: hosted
    version: "2.1.2"
  stream_transform:
    dependency: transitive
    description:
      name: stream_transform
      sha256: "14a00e794c7c11aa145a170587321aedce29769c08d7f58b1d141da75e3b1c6f"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.0"
  string_scanner:
    dependency: transitive
    description:
      name: string_scanner
      sha256: "556692adab6cfa87322a115640c11f13cb77b3f076ddcc5d6ae3c20242bedcde"
      url: "https://pub.dev"
    source: hosted
    version: "1.2.0"
  term_glyph:
    dependency: transitive
    description:
      name: term_glyph
      sha256: a29248a84fbb7c79282b40b8c72a1209db169a2e0542bce341da992fe1bc7e84
      url: "https://pub.dev"
    source: hosted
    version: "1.2.1"
  test_api:
    dependency: transitive
    description:
      name: test_api
      sha256: "5c2f730018264d276c20e4f1503fd1308dfbbae39ec8ee63c5236311ac06954b"
      url: "https://pub.dev"
    source: hosted
    version: "0.6.1"
  typed_data:
    dependency: transitive
    description:
      name: typed_data
      sha256: facc8d6582f16042dd49f2463ff1bd6e2c9ef9f3d5da3d9b087e244a7b564b3c
      url: "https://pub.dev"
    source: hosted
    version: "1.3.2"
  unicode:
    dependency: transitive
    description:
      name: unicode
      sha256: "0f69e46593d65245774d4f17125c6084d2c20b4e473a983f6e21b7d7762218f1"
      url: "https://pub.dev"
    source: hosted
    version: "0.3.1"
  universal_io:
    dependency: transitive
    description:
      name: universal_io
      sha256: "1722b2dcc462b4b2f3ee7d188dad008b6eb4c40bbd03a3de451d82c78bba9aad"
      url: "https://pub.dev"
    source: hosted
    version: "2.2.2"
  url_launcher:
    dependency: "direct main"
    description:
      name: url_launcher
      sha256: c512655380d241a337521703af62d2c122bf7b77a46ff7dd750092aa9433499c
      url: "https://pub.dev"
    source: hosted
    version: "6.2.4"
  url_launcher_android:
    dependency: transitive
    description:
      name: url_launcher_android
      sha256: "507dc655b1d9cb5ebc756032eb785f114e415f91557b73bf60b7e201dfedeb2f"
      url: "https://pub.dev"
    source: hosted
    version: "6.2.2"
  url_launcher_ios:
    dependency: transitive
    description:
      name: url_launcher_ios
      sha256: "75bb6fe3f60070407704282a2d295630cab232991eb52542b18347a8a941df03"
      url: "https://pub.dev"
    source: hosted
    version: "6.2.4"
  url_launcher_linux:
    dependency: transitive
    description:
      name: url_launcher_linux
      sha256: ab360eb661f8879369acac07b6bb3ff09d9471155357da8443fd5d3cf7363811
      url: "https://pub.dev"
    source: hosted
    version: "3.1.1"
  url_launcher_macos:
    dependency: transitive
    description:
      name: url_launcher_macos
      sha256: b7244901ea3cf489c5335bdacda07264a6e960b1c1b1a9f91e4bc371d9e68234
      url: "https://pub.dev"
    source: hosted
    version: "3.1.0"
  url_launcher_platform_interface:
    dependency: transitive
    description:
      name: url_launcher_platform_interface
      sha256: a932c3a8082e118f80a475ce692fde89dc20fddb24c57360b96bc56f7035de1f
      url: "https://pub.dev"
    source: hosted
    version: "2.3.1"
  url_launcher_web:
    dependency: transitive
    description:
      name: url_launcher_web
      sha256: "7fd2f55fe86cea2897b963e864dc01a7eb0719ecc65fcef4c1cc3d686d718bb2"
      url: "https://pub.dev"
    source: hosted
    version: "2.2.0"
  url_launcher_windows:
    dependency: transitive
    description:
      name: url_launcher_windows
      sha256: ecf9725510600aa2bb6d7ddabe16357691b6d2805f66216a97d1b881e21beff7
      url: "https://pub.dev"
    source: hosted
    version: "3.1.1"
  uuid:
    dependency: transitive
    description:
      name: uuid
      sha256: "648e103079f7c64a36dc7d39369cabb358d377078a051d6ae2ad3aa539519313"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.7"
  vector_math:
    dependency: transitive
    description:
      name: vector_math
      sha256: "80b3257d1492ce4d091729e3a67a60407d227c27241d6927be0130c98e741803"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.4"
  wallet:
    dependency: transitive
    description:
      name: wallet
      sha256: "687fd89a16557649b26189e597792962f405797fc64113e8758eabc2c2605c32"
      url: "https://pub.dev"
    source: hosted
    version: "0.0.13"
  web:
    dependency: transitive
    description:
      name: web
      sha256: afe077240a270dcfd2aafe77602b4113645af95d0ad31128cc02bce5ac5d5152
      url: "https://pub.dev"
    source: hosted
    version: "0.3.0"
  web3dart:
    dependency: "direct main"
    description:
      name: web3dart
      sha256: bebbea9278723cef51d21caf65668860e7547f59114fe9f8af01b873a72ba0e6
      url: "https://pub.dev"
    source: hosted
    version: "2.7.1"
  web_socket_channel:
    dependency: "direct main"
    description:
      name: web_socket_channel
      sha256: d88238e5eac9a42bb43ca4e721edba3c08c6354d4a53063afaa568516217621b
      url: "https://pub.dev"
    source: hosted
    version: "2.4.0"
  wkt_parser:
    dependency: transitive
    description:
      name: wkt_parser
      sha256: "8a555fc60de3116c00aad67891bcab20f81a958e4219cc106e3c037aa3937f13"
      url: "https://pub.dev"
    source: hosted
    version: "2.0.0"
  xml:
    dependency: transitive
    description:
      name: xml
      sha256: b015a8ad1c488f66851d762d3090a21c600e479dc75e68328c52774040cf9226
      url: "https://pub.dev"
    source: hosted
    version: "6.5.0"
sdks:
  dart: ">=3.2.0 <4.0.0"
  flutter: ">=3.13.0"
name: driver
description: A new Flutter project.
publish_to: 'none' 
version: 1.0.0+1

environment:
  sdk: '>=3.1.0 <4.0.0'

dependencies:
  flutter:
    sdk: flutter


      cupertino_icons: ^1.0.2
  sizer: ^2.0.15
  get: ^4.6.6

  geolocator: ^7.6.2
  latlong2: ^0.9.0
  http: ^1.1.0
  web_socket_channel: ^2.4.0
  web3dart: ^2.7.1
  permission_handler: ^11.0.1
  flutter_map: ^6.1.0
  url_launcher: ^6.2.4
  flutter_svg: ^1.1.0
  

dev_dependencies:
  flutter_test:
    sdk: flutter

            flutter_lints: ^2.0.0



flutter:
  uses-material-design: true

      
      

  assets:
    - assets/images/
    - assets/icons/
    - assets/users/users.json
    - truffle/build/contracts/PayByLocation.json 

    
    
            fonts:
    - family: Mulish
      fonts:
        - asset: assets/fonts/Mulish-Light.ttf
        - asset: assets/fonts/Mulish-SemiBold.ttf
import React, { useContext, useState } from 'react';
import { FaRegWindowClose } from 'react-icons/fa';
import { DataContext } from '../Utils/DataContext';

const AddEmployee = () => {
  const { handleClose, currentItem, isFound } = useContext(DataContext);
  const [formData, setFormData] = useState({
    employeeAddress: '',
    name: '',
    allowedDistance: '',
    contractEnd: '',
    lat: '',
    lng: ''
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    // Handle submission logic here
    console.log('Form submitted:', formData);
  };

  return (
    <div className="bg-overlay-black dark:bg-overlay-dark h-full w-full px-4 lg:px-6 xl:px-0 overflow-auto fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2  z-50 lg:flex justify-center items-center">
      <div className=" bg-white dark:bg-night-blue h-auto mx-auto lg:mx-0 my-10 lg:my-0  w-full xl:w-2/3 py-8 rounded-md px-6 lg:px-8  relative">
        {/* Add_employee header */}
        <div className="text-center mb-6 text-black dark:text-white">
          <FaRegWindowClose
            onClick={handleClose}
            className="text-2xl rounded-md cursor-pointer absolute top-2 right-2"
          />
          <h1 className="text-3xl font-semibold  mb-2 mt-10 lg:mt-0">
            Register Employee
          </h1>
          <p>Please fill out the following details:</p>
        </div>

        {/* Add_employee body */}
        <form onSubmit={handleSubmit}>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="flex flex-col">
              <label htmlFor="employeeAddress">Employee Address</label>
              <input
                type="text"
                id="employeeAddress"
                name="employeeAddress"
                value={formData.employeeAddress}
                onChange={handleChange}
                required
                className="border border-gray-300 rounded-md p-2"
              />
            </div>
            <div className="flex flex-col">
              <label htmlFor="name">Name</label>
              <input
                type="text"
                id="name"
                name="name"
                value={formData.name}
                onChange={handleChange}
                required
                className="border border-gray-300 rounded-md p-2"
              />
            </div>
            <div className="flex flex-col">
              <label htmlFor="allowedDistance">Allowed Distance</label>
              <input
                type="text"
                id="allowedDistance"
                name="allowedDistance"
                value={formData.allowedDistance}
                onChange={handleChange}
                required
                className="border border-gray-300 rounded-md p-2"
              />
            </div>
            <div className="flex flex-col">
              <label htmlFor="contractEnd">Contract End</label>
              <input
                type="date"
                id="contractEnd"
                name="contractEnd"
                value={formData.contractEnd}
                onChange={handleChange}
                required
                className="border border-gray-300 rounded-md p-2"
              />
            </div>
            <div className="flex flex-col">
              <label htmlFor="lat">Latitude</label>
              <input
                type="text"
                id="lat"
                name="lat"
                value={formData.lat}
                onChange={handleChange}
                required
                className="border border-gray-300 rounded-md p-2"
              />
            </div>
            <div className="flex flex-col">
              <label htmlFor="lng">Longitude</label>
              <input
                type="text"
                id="lng"
                name="lng"
                value={formData.lng}
                onChange={handleChange}
                required
                className="border border-gray-300 rounded-md p-2"
              />
            </div>
          </div>
          <button type="submit" className="mt-4 bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600">Submit</button>
        </form>
      </div>
    </div>
  );
};

export default AddEmployee;
import React from 'react';
import style from '../styles/Home.module.css';

const Card = ({ small, heading, joined, bg, icon }) => {
  return (
    <div
      className={`${style.card} animate-slideIn xl:animate-slideLeft pl-8 bg-white dark:bg-night-blue rounded-md text-gray-400 flex items-center relative shadow-sm`}
    >
      <div className="z-20">
        <p className="uppercase">{small ?? 'registered customers'}</p>
        <h2 className="font-bold text-3xl my-3 text-gray-700 dark:text-white uppercase">
          {heading ?? '6'}
        </h2>
        <p className="capitalize">{joined ?? '2 joined today'}</p>
      </div>

      <div className="flex text-3xl text-white items-center justify-center z-10  absolute bottom-5 right-5">
        {icon}
      </div>

      <div
        className={`${style.semi} ${bg}  h-20 w-20 absolute bottom-0 right-0`}
      ></div>
    </div>
  );
};

export default Card;
import { useState, useContext } from 'react';

//components
import Card from '../components/Card';
import Analytics from '../components/Analytics';

//icons
import { GoPerson } from 'react-icons/go';
import { BsPeopleFill } from 'react-icons/bs';
import { FaShip } from 'react-icons/fa';

//style
import home from '../styles/Home.module.css';

//Utilities
import { DataContext } from '../Utils/DataContext';

export default function Home() {
  //Toggle the tab view
  const [toggleState, setToggleState] = useState(1);

  const toggleTab = (index) => {
    setToggleState(index);
  };

  //Declare chart variables
  const { monthData } = useContext(DataContext);

  const { yearData } = useContext(DataContext);

  return (
    <section className="home">
      <div className="mt-10 mb-8 ">
        <h1 className="text-2xl md:text-3xl dark:text-white text-black font-bold">
          Good Evening, Abel.
        </h1>
        <p className="text-gray-500 mt-3">
          Glad to have you back, heres an overview of your operation today
        </p>
      </div>

      <div className={home.card__grid}>
        <Card bg="bg-blue-700" icon={<GoPerson />} />

        <Card
          small="registered transporters"
          heading="4"
          joined="2 onboard today"
          bg="bg-green-400"
          icon={<BsPeopleFill />}
        />

        <Card
          small="total shipments"
          heading="6"
          joined="2 shipped today"
          bg="bg-pink-500"
          icon={<FaShip />}
        />
      </div>

      <div className="my-10 text-gray-500 dark:text-gray-200 relative">
        {/* tab heading */}
        <div className=" lg:flex justify-between items-center">
          <div>
            <h5 className="text-black dark:text-white font-bold text-2xl mb-3">
              Shipments
            </h5>
            <p>Shipping is going pretty well today. Heres what we have</p>
          </div>

          <div className=" mt-4 lg:mt-0 w-fit bg-white dark:bg-night-blue py-3 px-5 text-black dark:text-white  flex items-center gap-1 rounded-lg ">
            <a className={home.tabs} href="              1D
            </a>

            <a className={home.tabs} href="              5D
            </a>

            <a
              href="              className={
                toggleState === 1
                  ? `${home.tabs} ${home.tab__active}`
                  : `${home.tabs}`
              }
              onClick={() => toggleTab(1)}
            >
              1M
            </a>

            <a
              href="              className={
                toggleState === 2
                  ? `${home.tabs} ${home.tab__active}`
                  : `${home.tabs}`
              }
              onClick={() => toggleTab(2)}
            >
              1Y
            </a>

            <a className={home.tabs} href="              Max
            </a>
          </div>
        </div>

        {/* Tab contents */}
        <div className="animate-slideUp">
          {/* Chart */}
          <div
            className={
              toggleState === 1
                ? `${home.tab__content} ${home.active__content}`
                : `${home.tab__content}`
            }
          >
            <Analytics
              shipment={6}
              activeVehicle={2}
              stats={monthData}
            />
          </div>

          <div
            className={
              toggleState === 2
                ? `${home.tab__content} ${home.active__content}`
                : `${home.tab__content}`
            }
          >
            <Analytics
              shipment={6}
              activeVehicle={2}
              stats={yearData}
            />
          </div>
        </div>
      </div>
    </section>
  );
}
Repository Structure: '
' ├── contracts
│   └── GeoLogixContract.sol
├── Frontend
│   ├── vite.config.js
│   ├── src
│   ├── .gitignore
│   ├── public
│   ├── index.html
│   ├── README.md
│   └── .eslintrc.cjs
├── truffle-config.js
├── test
├── .gitignore
├── README.md
├── migrations
│   └── deploy_contract.js
└── Flutter_Frontend
 '
' Commit History: 
{"insertions": [139, 2], "deletions": [35, 2], "lines": [174, 4], "committed_datetime": ["2024-02-09 17:15:59", "2024-02-09 17:19:24"], "commit_count": 2} 
 Content: 
pragma solidity >=0.5.22 <0.9.0;
// pragma experimental ABIEncoderV2;

contract RefundByLocation{
    struct Employee{
        // uint id;
        string name;
        address employee_address;
    }
    struct Employer{
        // uint id;
        string name;
        address employer_address;
    }

    struct Employee_Location_info{
        address employee_address;
        uint contract_id;
        uint coord_long;
        uint lng_offset;
        uint coord_lat;
        uint lat_offset;
        uint distance_from_contract_coord;
        string timestamp;
        bool status;
    }

    struct single_contract_info{
        uint id;
        address employee_address;
        address employer_address;
        uint coord_long;
        uint lng_offset;
        uint coord_lat;
        uint lat_offset;
        uint radius;
    }
    
    Employee[] public employees;
    Employer[] public employers;
    uint public employercount;
    uint public employeecount;

    single_contract_info[] public contract_infos;
    uint public contract_info_count;

    Employee_Location_info[] public employee_location_infos;
    uint public employee_location_infos_count;

    

    function init_employer(string memory _name, address a) public{
        employers.push(Employer(_name,a));
        employercount ++;
    }

    function init_employee(string memory _name, address a) public{
        employees.push(Employee(_name, a));
        employeecount++;
    }

    function create_employee_location_info(uint contract_id, address _employee_address, 
            uint[2] memory _lat, uint[2] memory _lng,
            string memory _timestamp, bool _status, uint _distance
        ) public returns(bool){
        // single_contract_info memory contract_info = contract_infos[contract_id[0]];
        // if(contract_info.id > 0){
        Employee memory emplee;
        bool is_employee = false;
        for(uint j=0;j<employeecount;j++){
            if(employees[j].employee_address == _employee_address){
                emplee = employees[j];
                is_employee = true;
                break;
            }
        }
        if(!is_employee){
            return false;
        }
        else{
            employee_location_infos.push(
                Employee_Location_info(
                    _employee_address,
                    contract_id,
                    _lng[0],
                    _lng[1],
                    _lat[0],
                    _lat[1],
                    _distance,
                    _timestamp,
                    _status
                )
            );
            employee_location_infos_count++;
        }
        // }
        // else{
        //     return false;
        // }
        return true;
    }

    function create_contract(address _employer_address, address _employee_address, uint[2] memory lat, uint[2] memory lng, uint radius) public{
        Employer memory emplr;
        bool is_employer = false;
        for(uint i=0;i<employercount;i++){
            if (employers[i].employer_address == _employer_address){
                emplr = employers[i];
                is_employer = true;
                break;
            }
        }
        if(!is_employer){
            // return false;
        }
        Employee memory emplee;
        bool is_employee = false;
        for(uint j=0;j<employeecount;j++){
            if(employees[j].employee_address == _employee_address){
                emplee = employees[j];
                is_employee = true;
                break;
            }
        }
        if(!is_employee){
            emplee = Employee("your name", _employee_address);
            employees.push(emplee);
            employeecount++;

        }
        contract_infos.push(
            single_contract_info(
                contract_info_count,
                _employee_address,
                _employer_address,
                lng[0],
                lng[1],
                lat[0],
                lat[1],
                radius
            )
        );
        contract_info_count++;
        
        // return true;
    }
}
 

 

plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    namespace "com.example.frontend"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.frontend"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android        minSdkVersion 31
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {}
<manifest xmlns:android="http://schemas.android.com/apk/res/android">

    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/> 

    <application
        android:label="frontend"
        android:name="${applicationName}"
        android:icon="@mipmap/ic_launcher">
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:launchMode="singleTop"
            android:theme="@style/LaunchTheme"
            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
            android:hardwareAccelerated="true"
            android:windowSoftInputMode="adjustResize">
            <!-- Specifies an Android theme to apply to this Activity as soon as
                 the Android process has started. This theme is visible to the user
                 while the Flutter UI initializes. After that, this theme continues
                 to determine the Window background behind the Flutter UI. -->
            <meta-data
              android:name="io.flutter.embedding.android.NormalTheme"
              android:resource="@style/NormalTheme"
              />
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>
        <!-- Don't delete the meta-data below.
             This is used by the Flutter tool to generate GeneratedPluginRegistrant.java -->
        <meta-data
            android:name="flutterEmbedding"
            android:value="2" />
    </application>
</manifest>
buildscript {
    ext.kotlin_version = '1.8.10'
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.buildDir = '../build'
subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"
}
subprojects {
    project.evaluationDependsOn(':app')
}

tasks.register("clean", Delete) {
    delete rootProject.buildDir
}
import 'dart:convert';
import 'package:flutter/services.dart';
import 'package:geocoding/geocoding.dart';
import 'package:http/http.dart';
import 'package:geolocator/geolocator.dart';
import 'package:flutter/material.dart';
import 'package:web3dart/web3dart.dart';

class ContractClient {
  late Web3Client ethClient;
  String rpcUrl = "http://127.0.0.1:8545";

  ContractClient() {
    ethClient = Web3Client(
      rpcUrl,
      Client(),
    );
  }

  Position? _currentPosition;
  Future<DeployedContract> loadContract() async {
    String abi = await rootBundle.loadString(
        "artifacts/contracts/Geolocation.sol/RefundGeolocation.json");
    String finalAbi = jsonDecode(abi)["abi"].toString();
    const String contractAddress = "0x5fbdb2315678afecb367f032d93f642f64180aa3";
    final contract = DeployedContract(
      ContractAbi.fromJson(finalAbi, "RefundGeolocation"),
      EthereumAddress.fromHex(contractAddress),
    );
    return contract;
  }

  Future<bool> sendCoordinates() async {
    String privateKey =
        "0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80";
    EthPrivateKey credentials = EthPrivateKey.fromHex(privateKey);
    final deployedContract = await loadContract();

    final function = deployedContract.function('sendCoordinates');
    List<dynamic> params = [
      _currentPosition?.latitude.toDouble(),
      _currentPosition?.longitude.toDouble(),
    ];
    if (_currentPosition == null) {
      return false;
    }
    try {
      await ethClient.sendTransaction(
        credentials,
        Transaction.callContract(
          contract: deployedContract,
          function: function,
          parameters: params,
        ),
      );
      return true;
    } catch (e) {
      return false;
    }
  }
}

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: "GEOLOGIX - REFUND BY GPS",
      theme: ThemeData(primarySwatch: Colors.blueGrey),
      home: const GpsPage(),
    );
  }
}

class GpsPage extends StatefulWidget {
  const GpsPage({super.key});

  @override
  State<GpsPage> createState() => _GpsPageState();
}

class _GpsPageState extends State<GpsPage> {
  String? _currentAddress;
  Position? _currentPosition;
  final contractClient = ContractClient();

  Future<bool> _locationPermission() async {
    bool serviceEnabled;
    LocationPermission permission;
    serviceEnabled = await Geolocator.isLocationServiceEnabled();
    if (!serviceEnabled) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text(
              'Location services are disabled. Please enable the services'),
        ),
      );
      return false;
    }
    permission = await Geolocator.checkPermission();

    if (permission == LocationPermission.denied) {
      permission = await Geolocator.requestPermission();

      if (permission == LocationPermission.denied) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Location permissions are denied'),
          ),
        );
        return false;
      }
    }
    if (permission == LocationPermission.deniedForever) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text(
              'Location permissions are permanently denied, we cannot request permissions.'),
        ),
      );
      return false;
    }
    return true;
  }

  Future<void> _getCurrentPosition() async {
    final hasPermission = await _locationPermission();
    if (!hasPermission) return;
    await Geolocator.getCurrentPosition(
      desiredAccuracy: LocationAccuracy.high,
    ).then((Position position) {
      setState(() => _currentPosition = position);
    }).catchError((e) {
      debugPrint(e);
    });
  }

  Future<void> _getAddressFromLatLng(Position position) async {
    await placemarkFromCoordinates(
            _currentPosition!.latitude, _currentPosition!.longitude)
        .then((List<Placemark> placemarks) {
      Placemark place = placemarks[0];
      setState(() {
        _currentAddress =
            '${place.street}, ${place.subLocality},${place.subAdministrativeArea}, ${place.postalCode}';
      });
    }).catchError((e) {
      debugPrint(e);
    });
  }

  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Send Coordinates to get refund'),
      ),
      body: Center(
          child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Text(
            'Latitude: ${_currentPosition?.latitude ?? ""}',
          ),
          Text(
            'Longitude: ${_currentPosition?.longitude ?? ""}',
          ),
          ElevatedButton(
            onPressed: _getCurrentPosition,
            child: const Text('Get my current location'),
          ),
          ElevatedButton(
            onPressed: () async {
              contractClient.sendCoordinates().then((success) {
                if (success) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(
                      content: Text('Coordinates sent successfully!'),
                    ),
                  );
                } else {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(
                      content:
                          Text('Failed to send coordinates. Please try again.'),
                    ),
                  );
                }
              }).catchError(
                (e) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('Error: $e'),
                    ),
                  );
                },
              );
            },
            child: const Text('Send My Coordinates'),
          ),
        ],
      )),
    );
  }
}
//
//  Generated file. Do not edit.
//

import FlutterMacOS
import Foundation

import geolocator_apple

func RegisterGeneratedPlugins(registry: FlutterPluginRegistry) {
  GeolocatorPlugin.register(with: registry.registrar(forPlugin: "GeolocatorPlugin"))
}
packages:
  async:
    dependency: transitive
    description:
      name: async
      sha256: "947bfcf187f74dbc5e146c9eb9c0f10c9f8b30743e341481c1e2ed3ecc18c20c"
      url: "https://pub.dev"
    source: hosted
    version: "2.11.0"
  boolean_selector:
    dependency: transitive
    description:
      name: boolean_selector
      sha256: "6cfb5af12253eaf2b368f07bacc5a80d1301a071c73360d746b7f2e32d762c66"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.1"
  characters:
    dependency: transitive
    description:
      name: characters
      sha256: "04a925763edad70e8443c99234dc3328f442e811f1d8fd1a72f1c8ad0f69a605"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.0"
  clock:
    dependency: transitive
    description:
      name: clock
      sha256: cb6d7f03e1de671e34607e909a7213e31d7752be4fb66a86d29fe1eb14bfb5cf
      url: "https://pub.dev"
    source: hosted
    version: "1.1.1"
  collection:
    dependency: transitive
    description:
      name: collection
      sha256: ee67cb0715911d28db6bf4af1026078bd6f0128b07a5f66fb2ed94ec6783c09a
      url: "https://pub.dev"
    source: hosted
    version: "1.18.0"
  convert:
    dependency: transitive
    description:
      name: convert
      sha256: "0f08b14755d163f6e2134cb58222dd25ea2a2ee8a195e53983d57c075324d592"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.1"
  crypto:
    dependency: transitive
    description:
      name: crypto
      sha256: ff625774173754681d66daaf4a448684fb04b78f902da9cb3d308c19cc5e8bab
      url: "https://pub.dev"
    source: hosted
    version: "3.0.3"
  csslib:
    dependency: transitive
    description:
      name: csslib
      sha256: "706b5707578e0c1b4b7550f64078f0a0f19dec3f50a178ffae7006b0a9ca58fb"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.0"
  cupertino_icons:
    dependency: "direct main"
    description:
      name: cupertino_icons
      sha256: d57953e10f9f8327ce64a508a355f0b1ec902193f66288e8cb5070e7c47eeb2d
      url: "https://pub.dev"
    source: hosted
    version: "1.0.6"
  eip1559:
    dependency: transitive
    description:
      name: eip1559
      sha256: c2b81ac85f3e0e71aaf558201dd9a4600f051ece7ebacd0c5d70065c9b458004
      url: "https://pub.dev"
    source: hosted
    version: "0.6.2"
  eip55:
    dependency: transitive
    description:
      name: eip55
      sha256: "213a9b86add87a5216328e8494b0ab836e401210c4d55eb5e521bd39e39169e1"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.2"
  fake_async:
    dependency: transitive
    description:
      name: fake_async
      sha256: "511392330127add0b769b75a987850d136345d9227c6b94c96a04cf4a391bf78"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.1"
  fixnum:
    dependency: transitive
    description:
      name: fixnum
      sha256: "25517a4deb0c03aa0f32fd12db525856438902d9c16536311e76cdc57b31d7d1"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.0"
  flutter:
    dependency: "direct main"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_lints:
    dependency: "direct dev"
    description:
      name: flutter_lints
      sha256: e2a421b7e59244faef694ba7b30562e489c2b489866e505074eb005cd7060db7
      url: "https://pub.dev"
    source: hosted
    version: "3.0.1"
  flutter_plugin_android_lifecycle:
    dependency: transitive
    description:
      name: flutter_plugin_android_lifecycle
      sha256: b068ffc46f82a55844acfa4fdbb61fad72fa2aef0905548419d97f0f95c456da
      url: "https://pub.dev"
    source: hosted
    version: "2.0.17"
  flutter_test:
    dependency: "direct dev"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_web_plugins:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.0"
  geocoding:
    dependency: "direct main"
    description:
      name: geocoding
      sha256: e1dc0ac56666d9ed1d5a9ae5543ce9eb5986db6209cc7600103487d09192059c
      url: "https://pub.dev"
    source: hosted
    version: "2.1.1"
  geocoding_android:
    dependency: transitive
    description:
      name: geocoding_android
      sha256: "609db1d71bc364dd9d0616f72a41c01e0c74f3a3807efb85e0d5a67e57baf50f"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.2"
  geocoding_ios:
    dependency: transitive
    description:
      name: geocoding_ios
      sha256: "8f79e380abb640ef4d88baee8bb65390058c802601158d0813dc990b36b189d2"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.1"
  geocoding_platform_interface:
    dependency: transitive
    description:
      name: geocoding_platform_interface
      sha256: "8848605d307d844d89937cdb4b8ad7dfa880552078f310fa24d8a460f6dddab4"
      url: "https://pub.dev"
    source: hosted
    version: "2.0.1"
  geolocator:
    dependency: "direct main"
    description:
      name: geolocator
      sha256: e946395fc608842bb2f6c914807e9183f86f3cb787f6b8f832753e5251036f02
      url: "https://pub.dev"
    source: hosted
    version: "10.1.0"
  geolocator_android:
    dependency: transitive
    description:
      name: geolocator_android
      sha256: "136f1c97e1903366393bda514c5d9e98843418baea52899aa45edae9af8a5cd6"
      url: "https://pub.dev"
    source: hosted
    version: "4.5.2"
  geolocator_apple:
    dependency: transitive
    description:
      name: geolocator_apple
      sha256: "79babf44b692ec5e789d322dc736ef71586056e8e6828f747c9e005456b248bf"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.5"
  geolocator_platform_interface:
    dependency: transitive
    description:
      name: geolocator_platform_interface
      sha256: "3b95ecdc36462c47dbc535dcfedea774d03ccd1f3c9864e0a02ad088eeff4508"
      url: "https://pub.dev"
    source: hosted
    version: "4.2.1"
  geolocator_web:
    dependency: transitive
    description:
      name: geolocator_web
      sha256: "102e7da05b48ca6bf0a5bda0010f886b171d1a08059f01bfe02addd0175ebece"
      url: "https://pub.dev"
    source: hosted
    version: "2.2.1"
  geolocator_windows:
    dependency: transitive
    description:
      name: geolocator_windows
      sha256: a92fae29779d5c6dc60e8411302f5221ade464968fe80a36d330e80a71f087af
      url: "https://pub.dev"
    source: hosted
    version: "0.2.2"
  google_maps:
    dependency: transitive
    description:
      name: google_maps
      sha256: "555d5d736339b0478e821167ac521c810d7b51c3b2734e6802a9f046b64ea37a"
      url: "https://pub.dev"
    source: hosted
    version: "6.3.0"
  google_maps_flutter:
    dependency: "direct main"
    description:
      name: google_maps_flutter
      sha256: ae66fef3e71261d7df2eff29b2a119e190b2884325ecaa55321b1e17b5504066
      url: "https://pub.dev"
    source: hosted
    version: "2.5.3"
  google_maps_flutter_android:
    dependency: transitive
    description:
      name: google_maps_flutter_android
      sha256: "714530f865f13bb3b9505c58821c3baed5d247a871724acf5d2ea5808fbed02c"
      url: "https://pub.dev"
    source: hosted
    version: "2.6.2"
  google_maps_flutter_ios:
    dependency: transitive
    description:
      name: google_maps_flutter_ios
      sha256: b644d205c235f85dc60e22f46172a868b1cd642afd5a52b3808c789e461b025a
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  google_maps_flutter_platform_interface:
    dependency: transitive
    description:
      name: google_maps_flutter_platform_interface
      sha256: "6060779f020638a8eedeb0fb14234818e5fa32ec45a4653d6428ab436e2bbc64"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.3"
  google_maps_flutter_web:
    dependency: transitive
    description:
      name: google_maps_flutter_web
      sha256: "6245721c160d6f531c1ef568cf9bef8d660cd585a982aa75121269030163785a"
      url: "https://pub.dev"
    source: hosted
    version: "0.5.4+3"
  html:
    dependency: transitive
    description:
      name: html
      sha256: "3a7812d5bcd2894edf53dfaf8cd640876cf6cef50a8f238745c8b8120ea74d3a"
      url: "https://pub.dev"
    source: hosted
    version: "0.15.4"
  http:
    dependency: "direct main"
    description:
      name: http
      sha256: a2bbf9d017fcced29139daa8ed2bba4ece450ab222871df93ca9eec6f80c34ba
      url: "https://pub.dev"
    source: hosted
    version: "1.2.0"
  http_parser:
    dependency: transitive
    description:
      name: http_parser
      sha256: "2aa08ce0341cc9b354a498388e30986515406668dbcc4f7c950c3e715496693b"
      url: "https://pub.dev"
    source: hosted
    version: "4.0.2"
  js:
    dependency: transitive
    description:
      name: js
      sha256: f2c445dce49627136094980615a031419f7f3eb393237e4ecd97ac15dea343f3
      url: "https://pub.dev"
    source: hosted
    version: "0.6.7"
  js_wrapping:
    dependency: transitive
    description:
      name: js_wrapping
      sha256: e385980f7c76a8c1c9a560dfb623b890975841542471eade630b2871d243851c
      url: "https://pub.dev"
    source: hosted
    version: "0.7.4"
  json_rpc_2:
    dependency: transitive
    description:
      name: json_rpc_2
      sha256: "5e469bffa23899edacb7b22787780068d650b106a21c76db3c49218ab7ca447e"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.2"
  lints:
    dependency: transitive
    description:
      name: lints
      sha256: cbf8d4b858bb0134ef3ef87841abdf8d63bfc255c266b7bf6b39daa1085c4290
      url: "https://pub.dev"
    source: hosted
    version: "3.0.0"
  matcher:
    dependency: transitive
    description:
      name: matcher
      sha256: "1803e76e6653768d64ed8ff2e1e67bea3ad4b923eb5c56a295c3e634bad5960e"
      url: "https://pub.dev"
    source: hosted
    version: "0.12.16"
  material_color_utilities:
    dependency: transitive
    description:
      name: material_color_utilities
      sha256: "9528f2f296073ff54cb9fee677df673ace1218163c3bc7628093e7eed5203d41"
      url: "https://pub.dev"
    source: hosted
    version: "0.5.0"
  meta:
    dependency: transitive
    description:
      name: meta
      sha256: a6e590c838b18133bb482a2745ad77c5bb7715fb0451209e1a7567d416678b8e
      url: "https://pub.dev"
    source: hosted
    version: "1.10.0"
  path:
    dependency: transitive
    description:
      name: path
      sha256: "8829d8a55c13fc0e37127c29fedf290c102f4e40ae94ada574091fe0ff96c917"
      url: "https://pub.dev"
    source: hosted
    version: "1.8.3"
  plugin_platform_interface:
    dependency: transitive
    description:
      name: plugin_platform_interface
      sha256: "4820fbfdb9478b1ebae27888254d445073732dae3d6ea81f0b7e06d5dedc3f02"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.8"
  pointycastle:
    dependency: transitive
    description:
      name: pointycastle
      sha256: "43ac87de6e10afabc85c445745a7b799e04de84cebaa4fd7bf55a5e1e9604d29"
      url: "https://pub.dev"
    source: hosted
    version: "3.7.4"
  sanitize_html:
    dependency: transitive
    description:
      name: sanitize_html
      sha256: "12669c4a913688a26555323fb9cec373d8f9fbe091f2d01c40c723b33caa8989"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.0"
  sec:
    dependency: transitive
    description:
      name: sec
      sha256: "8bbd56df884502192a441b5f5d667265498f2f8728a282beccd9db79e215f379"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.0"
  sky_engine:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.99"
  source_span:
    dependency: transitive
    description:
      name: source_span
      sha256: "53e943d4206a5e30df338fd4c6e7a077e02254531b138a15aec3bd143c1a8b3c"
      url: "https://pub.dev"
    source: hosted
    version: "1.10.0"
  sprintf:
    dependency: transitive
    description:
      name: sprintf
      sha256: "1fc9ffe69d4df602376b52949af107d8f5703b77cda567c4d7d86a0693120f23"
      url: "https://pub.dev"
    source: hosted
    version: "7.0.0"
  stack_trace:
    dependency: transitive
    description:
      name: stack_trace
      sha256: "73713990125a6d93122541237550ee3352a2d84baad52d375a4cad2eb9b7ce0b"
      url: "https://pub.dev"
    source: hosted
    version: "1.11.1"
  stream_channel:
    dependency: transitive
    description:
      name: stream_channel
      sha256: ba2aa5d8cc609d96bbb2899c28934f9e1af5cddbd60a827822ea467161eb54e7
      url: "https://pub.dev"
    source: hosted
    version: "2.1.2"
  stream_transform:
    dependency: transitive
    description:
      name: stream_transform
      sha256: "14a00e794c7c11aa145a170587321aedce29769c08d7f58b1d141da75e3b1c6f"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.0"
  string_scanner:
    dependency: transitive
    description:
      name: string_scanner
      sha256: "556692adab6cfa87322a115640c11f13cb77b3f076ddcc5d6ae3c20242bedcde"
      url: "https://pub.dev"
    source: hosted
    version: "1.2.0"
  term_glyph:
    dependency: transitive
    description:
      name: term_glyph
      sha256: a29248a84fbb7c79282b40b8c72a1209db169a2e0542bce341da992fe1bc7e84
      url: "https://pub.dev"
    source: hosted
    version: "1.2.1"
  test_api:
    dependency: transitive
    description:
      name: test_api
      sha256: "5c2f730018264d276c20e4f1503fd1308dfbbae39ec8ee63c5236311ac06954b"
      url: "https://pub.dev"
    source: hosted
    version: "0.6.1"
  typed_data:
    dependency: transitive
    description:
      name: typed_data
      sha256: facc8d6582f16042dd49f2463ff1bd6e2c9ef9f3d5da3d9b087e244a7b564b3c
      url: "https://pub.dev"
    source: hosted
    version: "1.3.2"
  uuid:
    dependency: transitive
    description:
      name: uuid
      sha256: cd210a09f7c18cbe5a02511718e0334de6559871052c90a90c0cca46a4aa81c8
      url: "https://pub.dev"
    source: hosted
    version: "4.3.3"
  vector_math:
    dependency: transitive
    description:
      name: vector_math
      sha256: "80b3257d1492ce4d091729e3a67a60407d227c27241d6927be0130c98e741803"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.4"
  wallet:
    dependency: transitive
    description:
      name: wallet
      sha256: "687fd89a16557649b26189e597792962f405797fc64113e8758eabc2c2605c32"
      url: "https://pub.dev"
    source: hosted
    version: "0.0.13"
  web:
    dependency: transitive
    description:
      name: web
      sha256: afe077240a270dcfd2aafe77602b4113645af95d0ad31128cc02bce5ac5d5152
      url: "https://pub.dev"
    source: hosted
    version: "0.3.0"
  web3dart:
    dependency: "direct main"
    description:
      name: web3dart
      sha256: "31f93cf84b8c874d7ffb363959249d7e479115fe12cf46f30b037dcad6750b22"
      url: "https://pub.dev"
    source: hosted
    version: "2.7.2"
sdks:
  dart: ">=3.2.6 <4.0.0"
  flutter: ">=3.16.6"
name: frontend
description: "A new Flutter project."
publish_to: 'none' 
version: 1.0.0+1

environment:
  sdk: '>=3.2.6 <4.0.0'

dependencies:
  flutter:
    sdk: flutter


      cupertino_icons: ^1.0.2
  web3dart: ^2.7.2
  google_maps_flutter: ^2.5.3
  geolocator: ^10.1.0
  geocoding: ^2.1.1
  http: ^1.2.0

dev_dependencies:
  flutter_test:
    sdk: flutter

            flutter_lints: ^3.0.1


flutter:

        uses-material-design: true
import { ethers } from "hardhat";

async function main() {
  const latitude = 40;
  const longitude = 40;
  const range = 100;

  const Geolocation = await ethers.getContractFactory("RefundGeolocation");
  const geolocation = await Geolocation.deploy(latitude, longitude, range);
  // await geolocation.waitForDeployment();
 const address = await geolocation.getAddress();
//  address = " 0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0"
  console.log("Geolocation contract deploed to:", address);
}
main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
import { ethers } from "hardhat";
import { expect } from "chai";
import { Contract } from "ethers";

describe("RefundGeolocation Contract", function () {
  let RefundGeolocation: Contract;
  let owner: any;
  let device: any;
  let otherAccount: any;
  const latitude = 100;
  const longitude = 100;
  const range = 10;

  beforeEach(async function () {
    [owner, device, otherAccount] = await ethers.getSigners();

    const RefundGeolocationFactory = await ethers.getContractFactory("RefundGeolocation");
    RefundGeolocation = (await RefundGeolocationFactory.deploy(latitude, longitude, range)) as unknown as Contract;
    await RefundGeolocation.deployed();
    await RefundGeolocation.connect(owner); 
  });

  it("Should set the right owner", async function () {
    expect(await RefundGeolocation.company()).to.equal(owner.address);
  });

  it("Should allow the device to send coordinates", async function () {
    await expect(RefundGeolocation.connect(device)).to.emit(RefundGeolocation, "ComplianceChecked")
      .withArgs(device.address, true);
  });

  it("Should not allow other accounts to send coordinates", async function () {
    await expect(RefundGeolocation.connect(otherAccount))
      .to.be.revertedWith("Only Device can call this function");
  });

  it("Should correctly identify when the device is within range", async function () {
    const withinRange = await RefundGeolocation.isWithinRange(105, 105);
    expect(withinRange).to.be.true;
  });

  it("Should correctly identify when the device is out of range", async function () {
    const outOfRange = await RefundGeolocation.isWithinRange(200, 200);
    expect(outOfRange).to.be.false;
  });
});
// SPDX-License-Identifier: SEE LICENSE IN LICENSE
pragma solidity ^0.8.0;

contract RefundGeolocation {
    uint public avaialableFunds;
    address public company;
    struct Device {
        address deviceAddress;
        uint timeLimit;
        uint gpsReadingRange;
        bool compliance;
    }

    uint public latitude;
    uint public longitude;
    uint public range;

    bool public isWithinZone;

    event ComplianceChecked(address indexed device, bool isWithinZone);
    event RefundProcessed(address indexed device, uint256 amount);
    event DeviceAdded(
        address indexed deviceAddress,
        uint timeLimit,
        uint gpsReadingRange
    );
    event CoordinatesSent(
        address indexed deviceAddress,
        uint latitude,
        uint longitude,
        bool isWithinZone
    );

    modifier onlyCompany() {
        require(msg.sender == company, "Only Company can call this function");
        _;
    }

    modifier onlyDevice() {
        require(msg.sender == device, "Only Device can call this function");
        _;
    }

    constructor(uint _latitude, uint _longtiude, uint _range) {
        company = msg.sender;
        latitude = _latitude;
        longitude = _longtiude;
        range = _range;
    }

    function addDevice(
        address _deviceAddress,
        uint _timeLimit,
        uint _gpsReadingRange
    ) external onlyCompany {
        devices[_deviceAddress] = Device(
            _deviceAddress,
            _timeLimit,
            _gpsReadingRange,
            false
        );
        emit DeviceAdded(_deviceAddress, _timeLimit, _gpsReadingRange);
    }

    // function sendCoordinates(
    //     uint _latitude,
    //     uint _longitude
    // ) external onlyDevice {
    //     isWithinZone = isWithinRange(_latitude, _longitude);
    //     emit ComplianceChecked(device, isWithinZone);

    //     if (isWithinZone) {
    //         emit RefundProcessed(device, 100);
    //     }
    // }
    function sendCoordinates(uint _latitude, uint _longitude) external {
        Device storage device = devices[msg.sender];
        require(device.deviceAddress != address(0), "Device not registered");
        require(block.timestamp <= device.timeLimit, "Time limit exceeded");

        bool isWithinZone = isWithinRange(_latitude, _longitude, device);
        device.compliance = isWithinZone;

        emit CoordinatesSent(msg.sender, _latitude, _longitude, isWithinZone);
    }

    function isWithinRange(
        uint _latitude,
        uint _longitutde
    ) internal view returns (bool) {
        uint latDiff = latitude > _latitude
            ? latitude - _latitude
            : _latitude - latitude;
        uint longDiff = longitude > _longitutde
            ? longitude - _longitutde
            : _longitutde - longitude;
        return (latDiff <= range && longDiff <= range);
    }

    function addFunds() external payable onlyCreator {
        avaialableFunds += msg.value;
    }

    function withdrawFunds(
        address payable _recipient,
        uint _amount
    ) external onlyCreator {
        require(_amount <= avaialableFunds, "Insufficient funds");
        avaialableFunds -= _amount;
        _recipient.transfer(_amount);
    }

    function getContractBalance() external view returns (uint) {
        return address(this).balance;
    }
}
import React, { useState } from 'react';
import './App.css';
import SmartContractForm from './components/SmartContractForm';
import DeviceForm from './components/DeviceForm';
import ComplianceStatus from './components/ComplianceStatus';
// import Web3 from 'web3';

function App() {
  const [contractDeployed, setContractDeployed] = useState(false);
  const [devices, setDevices] = useState([]);

  const handleContractDeployed = () => {
    setContractDeployed(true);
  };

  const handleDeviceAdded = (device) => {
    setDevices([...devices, device]);
  };

  return (
    <div className="App">
      <h1>Refund by Location Confirmation</h1>
      <SmartContractForm onContractDeployed={handleContractDeployed} />
       <DeviceForm onDeviceAdded={handleDeviceAdded} />
      <ComplianceStatus devices={devices} />
    </div>
  );
}

export default App;
import React, { useState } from 'react';

const DeviceForm = ({ onDeviceAdded }) => {
  const [deviceAddress, setDeviceAddress] = useState('');
  const [timeLimit, setTimeLimit] = useState('');
  const [gpsReadingRange, setGpsReadingRange] = useState('');

  const handleAddDevice = () => {
    onDeviceAdded({ deviceAddress, timeLimit, gpsReadingRange });
    setDeviceAddress('');
    setTimeLimit('');
    setGpsReadingRange('');
  };

  return (
    <div>
      <h2>Add Device</h2>
      <input
        type="text"
        placeholder="Enter device address"
        value={deviceAddress}
        onChange={(e) => setDeviceAddress(e.target.value)}
      />
      <input
        type="number"
        placeholder="Enter time limit (in seconds)"
        value={timeLimit}
        onChange={(e) => setTimeLimit(e.target.value)}
      />
      <input
        type="number"
        placeholder="Enter GPS reading range (in meters)"
        value={gpsReadingRange}
        onChange={(e) => setGpsReadingRange(e.target.value)}
      />
      <button onClick={handleAddDevice}>Add Device</button>
    </div>
  );
};

export default DeviceForm;
import React, { useState } from 'react';

const SmartContractForm = ({ contract }) => {
  const [withdrawAmount, setWithdrawAmount] = useState('');

  const handleWithdrawFunds = async () => {
    // try {
    //   await contract.methods.withdrawFunds(window.ethereum.selectedAddress, withdrawAmount).send({ from: window.ethereum.selectedAddress });
    // } catch (error) {
    //   console.error(error);
    // }
  };

  return (
    <div>
      <h2>Withdraw Funds</h2>
      <input
        type="number"
        placeholder="Enter amount to withdraw"
        value={withdrawAmount}
        onChange={(e) => setWithdrawAmount(e.target.value)}
      />
      <button onClick={handleWithdrawFunds}>Withdraw Funds</button>
    </div>
  );
};

export default SmartContractForm;
import React from "react";

// We'll use ethers to interact with the Ethereum network and our contract
import { ethers } from "ethers";

// We import the contract's artifacts and address here, as we are going to be
// using them with ethers
import TokenArtifact from "../contracts/Token.json";
import AccountArtifact from "../contracts/AccountManager.json";
import contractAddress from "../contracts/contract-address.json";

// All the logic of this dapp is contained in the Dapp component.
// These other components are just presentational ones: they don't have any
// logic. They just render HTML.
import { NoWalletDetected } from "./NoWalletDetected";
import { DriverTable } from "./DriverTable";
import { DriverForm } from "./DriverForm";
import { ConnectWallet } from "./ConnectWallet";
import { Loading } from "./Loading";
import { Transfer } from "./Transfer";
import { TransactionErrorMessage } from "./TransactionErrorMessage";
import { WaitingForTransactionMessage } from "./WaitingForTransactionMessage";
import { NoTokensMessage } from "./NoTokensMessage";
import { NavBar } from "./NavBar";

// This is the default id used by the Hardhat Network
const HARDHAT_NETWORK_ID = '31337';

// This is an error code that indicates that the user canceled a transaction
const ERROR_CODE_TX_REJECTED_BY_USER = 4001;

// This component is in charge of doing these things:
//   1. It connects to the user's wallet
//   2. Initializes ethers and the Token contract
//   3. Polls the user balance to keep it updated.
//   4. Transfers tokens by sending transactions
//   5. Renders the whole application
//
// Note that (3) and (4) are specific of this sample application, but they show
// you how to keep your Dapp and contract's state in sync,  and how to send a
// transaction.
export class Dapp extends React.Component {
  constructor(props) {
    super(props);

    // We store multiple things in Dapp's state.
    // You don't need to follow this pattern, but it's an useful example.
    this.initialState = {
      // The info of the token (i.e. It's Name and symbol)
      tokenData: undefined,
      // The user's address and balance
      selectedAddress: undefined,
      balance: undefined,
      // The ID about transactions being sent, and any possible error with them
      txBeingSent: undefined,
      transactionError: undefined,
      networkError: undefined,
    };

    this.state = this.initialState;
  }

  render() {
    // Ethereum wallets inject the window.ethereum object. If it hasn't been
    // injected, we instruct the user to install a wallet.
    if (window.ethereum === undefined) {
      return <NoWalletDetected />;
    }

    // The next thing we need to do, is to ask the user to connect their wallet.
    // When the wallet gets connected, we are going to save the users's address
    // in the component's state. So, if it hasn't been saved yet, we have
    // to show the ConnectWallet component.
    //
    // Note that we pass it a callback that is going to be called when the user
    // clicks a button. This callback just calls the _connectWallet method.
    if (!this.state.selectedAddress) {
      return (
        <ConnectWallet 
          connectWallet={() => this._connectWallet()} 
          networkError={this.state.networkError}
          dismiss={() => this._dismissNetworkError()}
        />
      );
    }

    // If the token data or the user's balance hasn't loaded yet, we show
    // a loading component.
    if (!this.state.tokenData || !this.state.balance) {
      return <Loading />;
    }

    // If everything is loaded, we render the application.
    return (
      <div>
        {/* Render the NavBar component */}
        <NavBar />
        <DriverTable />
        <DriverForm onCreateAccount={(name, address) => this._createAccount(name, address)} />
      </div>
    );

  }

  componentWillUnmount() {
    // We poll the user's balance, so we have to stop doing that when Dapp
    // gets unmounted
    this._stopPollingData();
  }

_initializeAccountContract() {
    this._account = new ethers.Contract(
      contractAddress.Account, // Use the address of the deployed AccountManager contract
      AccountArtifact.abi,
      this._provider.getSigner(0)
    );
}

async _createAccount(name, address) {
    console.log("1")
    this._initializeAccountContract();
    try {
        const tx = await this._account.createAccount(name, address);
        await tx.wait();
        console.log('Account created successfully.');
    } catch (error) {
        console.error('Error creating account:', error);
    }
}


  async _connectWallet() {
    // This method is run when the user clicks the Connect. It connects the
    // dapp to the user's wallet, and initializes it.

    // To connect to the user's wallet, we have to run this method.
    // It returns a promise that will resolve to the user's address.
    const [selectedAddress] = await window.ethereum.request({ method: 'eth_requestAccounts' });

    // Once we have the address, we can initialize the application.

    // First we check the network
    this._checkNetwork();

    this._initialize(selectedAddress);

    // We reinitialize it whenever the user changes their account.
    window.ethereum.on("accountsChanged", ([newAddress]) => {
      this._stopPollingData();
      // `accountsChanged` event can be triggered with an undefined newAddress.
      // This happens when the user removes the Dapp from the "Connected
      // list of sites allowed access to your addresses" (Metamask > Settings > Connections)
      // To avoid errors, we reset the dapp state 
      if (newAddress === undefined) {
        return this._resetState();
      }
      
      this._initialize(newAddress);
    });
  }

  _initialize(userAddress) {
    // This method initializes the dapp

    // We first store the user's address in the component's state
    this.setState({
      selectedAddress: userAddress,
    });

    // Then, we initialize ethers, fetch the token's data, and start polling
    // for the user's balance.

    // Fetching the token data and the user's balance are specific to this
    // sample project, but you can reuse the same initialization pattern.
    this._initializeEthers();
    this._getTokenData();
    this._startPollingData();
  }

  async _initializeEthers() {
    // We first initialize ethers by creating a provider using window.ethereum
    this._provider = new ethers.providers.Web3Provider(window.ethereum);

    // Then, we initialize the contract using that provider and the token's
    // artifact. You can do this same thing with your contracts.
    this._token = new ethers.Contract(
      contractAddress.Token,
      TokenArtifact.abi,
      this._provider.getSigner(0)
    );
  }

  // The next two methods are needed to start and stop polling data. While
  // the data being polled here is specific to this example, you can use this
  // pattern to read any data from your contracts.
  //
  // Note that if you don't need it to update in near real time, you probably
  // don't need to poll it. If that's the case, you can just fetch it when you
  // initialize the app, as we do with the token data.
  _startPollingData() {
    this._pollDataInterval = setInterval(() => this._updateBalance(), 1000);

    // We run it once immediately so we don't have to wait for it
    this._updateBalance();
  }

  _stopPollingData() {
    clearInterval(this._pollDataInterval);
    this._pollDataInterval = undefined;
  }

  // The next two methods just read from the contract and store the results
  // in the component state.
  async _getTokenData() {
    const name = await this._token.name();
    const symbol = await this._token.symbol();

    this.setState({ tokenData: { name, symbol } });
  }

  async _updateBalance() {
    const balance = await this._token.balanceOf(this.state.selectedAddress);
    this.setState({ balance });
  }

  // This method sends an ethereum transaction to transfer tokens.
  // While this action is specific to this application, it illustrates how to
  // send a transaction.
  async _transferTokens(to, amount) {
    // Sending a transaction is a complex operation:
    //   - The user can reject it
    //   - It can fail before reaching the ethereum network (i.e. if the user
    //     doesn't have ETH for paying for the tx's gas)
    //   - It has to be mined, so it isn't immediately confirmed.
    //     Note that some testing networks, like Hardhat Network, do mine
    //     transactions immediately, but your dapp should be prepared for
    //     other networks.
    //   - It can fail once mined.
    //
    // This method handles all of those things, so keep reading to learn how to
    // do it.

    try {
      // If a transaction fails, we save that error in the component's state.
      // We only save one such error, so before sending a second transaction, we
      // clear it.
      this._dismissTransactionError();

      // We send the transaction, and save its hash in the Dapp's state. This
      // way we can indicate that we are waiting for it to be mined.
      const tx = await this._token.transfer(to, amount);
      this.setState({ txBeingSent: tx.hash });

      // We use .wait() to wait for the transaction to be mined. This method
      // returns the transaction's receipt.
      const receipt = await tx.wait();

      // The receipt, contains a status flag, which is 0 to indicate an error.
      if (receipt.status === 0) {
        // We can't know the exact error that made the transaction fail when it
        // was mined, so we throw this generic one.
        throw new Error("Transaction failed");
      }

      // If we got here, the transaction was successful, so you may want to
      // update your state. Here, we update the user's balance.
      await this._updateBalance();
    } catch (error) {
      // We check the error code to see if this error was produced because the
      // user rejected a tx. If that's the case, we do nothing.
      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {
        return;
      }

      // Other errors are logged and stored in the Dapp's state. This is used to
      // show them to the user, and for debugging.
      console.error(error);
      this.setState({ transactionError: error });
    } finally {
      // If we leave the try/catch, we aren't sending a tx anymore, so we clear
      // this part of the state.
      this.setState({ txBeingSent: undefined });
    }
  }

  // This method just clears part of the state.
  _dismissTransactionError() {
    this.setState({ transactionError: undefined });
  }

  // This method just clears part of the state.
  _dismissNetworkError() {
    this.setState({ networkError: undefined });
  }

  // This is an utility method that turns an RPC error into a human readable
  // message.
  _getRpcErrorMessage(error) {
    if (error.data) {
      return error.data.message;
    }

    return error.message;
  }

  // This method resets the state
  _resetState() {
    this.setState(this.initialState);
  }

  async _switchChain() {
    const chainIdHex = `0x${HARDHAT_NETWORK_ID.toString(16)}`
    await window.ethereum.request({
      method: "wallet_switchEthereumChain",
      params: [{ chainId: chainIdHex }],
    });
    await this._initialize(this.state.selectedAddress);
  }

  // This method checks if the selected network is Localhost:8545
  _checkNetwork() {
    if (window.ethereum.networkVersion !== HARDHAT_NETWORK_ID) {
      this._switchChain();
    }
  }
}
import React, { useState } from 'react';
import './../css/DriverForm.css';

export function DriverForm({ onCreateAccount }) {
  const [name, setName] = useState('');
  const [address, setAddress] = useState('');
  const [privateKey, setPrivateKey] = useState('');
  const [showForm, setShowForm] = useState(false);

  const handleSubmit = (event) => {
    event.preventDefault();

    // Call the onCreateAccount function from the parent component and pass the input values
    onCreateAccount(name, address);

    // Reset form values
    setName('');
    setAddress('');
    setPrivateKey('');
  };

  return (
    <div>
      {!showForm && <button className="add-drivers-button" onClick={() => setShowForm(true)}>Create Account</button>}
      {showForm && (
        <form className="driver-form" onSubmit={handleSubmit}>
          <label htmlFor="name">Name:</label>
          <input
            type="text"
            id="name"
            value={name}
            onChange={(event) => setName(event.target.value)}
            required
          />

          <label htmlFor="address">Address:</label>
          <input
            type="text"
            id="address"
            value={address}
            onChange={(event) => setAddress(event.target.value)}
            required
          />

          <button type="submit">Create Account</button>
        </form>
      )}
    </div>
  );
}
// import React, { useState, useEffect } from 'react';
// import './../css/DriverTable.css';
// import { ethers } from 'ethers';
// import TokenArtifact from "../contracts/Token.json";
// import AccountArtifact from "../contracts/AccountManager.json";
// import contractAddress from "../contracts/contract-address.json";

// export function DriverTable() {
//   const [drivers, setDrivers] = useState([]);

//   useEffect(() => {
//     fetchDrivers();
//   }, []);

//   const fetchDrivers = async () => {
//     try {
//       // Assuming you have a contract instance available
//       const accountManagerContract = await getAccountManagerContract();
     
//       console.log("Contract type: " + typeof accountManagerContract);
//       console.log("Contract --: ", accountManagerContract.account);
//       // Get the count of accounts
//       const accounts = await accountManagerContract.account;

//       console.log("Account type: " + typeof accounts);
//       // Fetch data for each account
//       const fetchedDrivers = [];
      
//       for (const accountAddress of Object.keys(accounts)) {
//         // console.log("Account Iterated")
//         const account = await accounts[accountAddress];
//         fetchedDrivers.push({
//           name: account.name,
//           address: accountAddress,
//           totalAsset: account.Token.totalSupply
//         });
//       }
      
//       setDrivers(fetchedDrivers);
//     } catch (error) {
//       console.error('Error fetching drivers:', error);
//     }
//   };

 
//   const getAccountManagerContract = async () => {
//     // const provider = new ethers.providers.JsonRpcProvider();
//     console.log("1")
//     const provider = new ethers.providers.Web3Provider(window.ethereum);
//     console.log("2")
//     const signer = provider.getSigner();
//     console.log("3")
//     const contract = new ethers.Contract(contractAddress.Account, AccountArtifact.abi, signer);
//     console.log("4")
//     return contract;
//   };

//   return (
//     <div>
//       <table className="driver-table">
//         <thead>
//           <tr className="header-row">
//             <th>Name</th>
//             <th>Address</th>
//             <th>Total Asset</th>
//             <th>On Duty Status</th>
//           </tr>
//         </thead>
//         <tbody>
//           {drivers.map((driver, index) => (
//             <tr key={index}>
//               <td>{driver.name}</td>
//               <td>{driver.address}</td>
//               <td>{driver.totalAsset}</td>
//               <td>"Pending"</td>
//             </tr>
//           ))}
//         </tbody>
//       </table>
//     </div>
//   );
// }
import React, { useState, useEffect } from 'react';
import './../css/DriverTable.css';
import { ethers } from 'ethers';
import TokenArtifact from "../contracts/Token.json";
import AccountArtifact from "../contracts/AccountManager.json";
import contractAddress from "../contracts/contract-address.json";

export function DriverTable() {
  const [drivers, setDrivers] = useState([]);

  useEffect(() => {
    fetchDrivers();
  }, []);

  const fetchDrivers = async () => {
    try {
      // Get the contract instance
      const accountManagerContract = await getAccountManagerContract();
      
      // console.log("Contract: ", accountManagerContract)
      // Get the count of accounts
      const accountCount = await accountManagerContract.getAccountCount();
      console.log("Contract: ", accountCount)

      // Fetch data for each account
      const fetchedDrivers = [];
      for (let i = 0; i < accountCount; i++) {
        const accountAddress = await accountManagerContract.accountAddresses(i);
        // console.log(i, accountAddress)
        const [name, address] = await accountManagerContract.getAccount(accountAddress);
        // console.log(i, name, accountAddress)
        const totalAsset = await getTotalAsset(accountManagerContract, accountAddress);
        fetchedDrivers.push({
          name,
          address,
          totalAsset
        });
      }
      
      setDrivers(fetchedDrivers);
    } catch (error) {
      console.error('Error fetching drivers:', error);
    }
  };

  const getAccountManagerContract = async () => {
    const provider = new ethers.providers.Web3Provider(window.ethereum);
    const signer = provider.getSigner();
    const contract = new ethers.Contract(contractAddress.Account, AccountArtifact.abi, signer);
    return contract;
  };

  const getTotalAsset = async (accountManagerContract, accountAddress) => {
    const account = await accountManagerContract.accounts(accountAddress);
    const tokenContract = new ethers.Contract(account.tokenContract, TokenArtifact.abi, accountManagerContract.provider);
    return await tokenContract.totalSupply();
  };

  return (
    <div>
      <table className="driver-table">
        <thead>
          <tr className="header-row">
            <th>Name</th>
            <th>Address</th>
            <th>Total Asset</th>
            <th>On Duty Status</th>
          </tr>
        </thead>
        <tbody>
          {drivers.map((driver, index) => (
            <tr key={index}>
              <td>{driver.name}</td>
              <td>{driver.address}</td>
              <td>{driver.totalAsset.toString()}</td>
              <td>Pending</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}
import React from "react";

export function Transfer({ transferTokens, tokenSymbol }) {
  return (
    <div>
      <h4>Transfer</h4>
      <form
        onSubmit={(event) => {
          // This function just calls the transferTokens callback with the
          // form's data.
          event.preventDefault();

          const formData = new FormData(event.target);
          const to = formData.get("to");
          const amount = formData.get("amount");

          if (to && amount) {
            transferTokens(to, amount);
          }
        }}
      >
        <div className="form-group">
          <label>Amount of {tokenSymbol}</label>
          <input
            className="form-control"
            type="number"
            step="1"
            name="amount"
            placeholder="1"
            required
          />
        </div>

        <div className="form-group">
          <label>Recipient address</label>
          <input className="form-control" type="text" name="to" required />
        </div>

        <div className="form-group">
          <input className="btn btn-primary" type="submit" value="Transfer" />
        </div>
        
      </form>
    </div>
  );
}
.driver-form {
    margin-top: 10px;
    padding: 20px;
    border: 1px solid     border-radius: 4px;
    background-color:     width: 300px; /* Adjust the width to your preference */
    margin-left: 220px;
    margin-right: auto;
  }
  
  .driver-form label {
    display: block;
    margin-bottom: 5px;
  }
  
  .driver-form input[type="text"],
  .driver-form input[type="password"] {
    width: 100%;
    padding: 10px;
    margin-bottom: 10px;
  }
  
  .add-drivers-button {
    background-color:     color: white;
    margin-top: 20px;
    margin-left: 220px;
    padding: 5px 5px;
    border: 2px solid transparent;
    cursor: pointer;
  }

  .driver-form button {
    background-color:     color: white;
    padding: 10px 20px;
    border: none;
    cursor: pointer;
  }
  
  .driver-form button:hover {
    background-color:   }
  
  .driver-form-container {
    display: flex;
    justify-content: center;
    align-items: flex-start;
  }
.driver-table {
    width: calc(100% - 500px);
    border-collapse: collapse;
    margin-left: 220px;
    margin-right: 500px;
    margin-top: 50px;
  }
  
  .header-row {
    background-color:     color: white;
  }
  

  .driver-table td {
    border-bottom: 1px solid black;
    background-color: white;
    color: black;
  }
  
  .add-driver-button {
    background-color:     color: white;
    margin-left: 220px;
    border: none;
    margin-top: 10px;
  }
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.9;

import "hardhat/console.sol";

contract Token {
    string public name = "My Hardhat Token";
    string public symbol = "MHT";
    uint256 public totalSupply = 100000000;
    address public owner;
    mapping(address => uint256) balances;
    event Transfer(address indexed _from, address indexed _to, uint256 _value);

    constructor() {
        balances[msg.sender] = totalSupply;
        owner = msg.sender;
    }

    function transfer(address to, uint256 amount) external {
        require(balances[msg.sender] >= amount, "Not enough tokens");
        console.log(
            "Transferring from %s to %s %s tokens",
            msg.sender,
            to,
            amount
        );
        balances[msg.sender] -= amount;
        balances[to] += amount;
        emit Transfer(msg.sender, to, amount);
    }

    function balanceOf(address account) external view returns (uint256) {
        return balances[account];
    }

    // Function to update the owner
    function updateOwner(address newOwner) external {
        require(msg.sender == owner, "Only the current owner can update the owner");
        owner = newOwner;
    }
}
// // This is a script for deploying your contracts. You can adapt it to deploy
// // yours, or create new ones.

// const path = require("path");

// async function main() {
//   // This is just a convenience check
//   if (network.name === "hardhat") {
//     console.warn(
//       "You are trying to deploy a contract to the Hardhat Network, which" +
//         "gets automatically created and destroyed every time. Use the Hardhat" +
//         " option '--network localhost'"
//     );
//   }

//   // ethers is available in the global scope
//   const [deployer] = await ethers.getSigners();
//   console.log(
//     "Deploying the contracts with the account:",
//     await deployer.getAddress()
//   );

//   console.log("Account balance:", (await deployer.getBalance()).toString());

//   const Token = await ethers.getContractFactory("Token");
//   const token = await Token.deploy();
//   await token.deployed();

//   console.log("Token address:", token.address);

//   // We also save the contract's artifacts and address in the frontend directory
//   saveFrontendFiles(token);
// }

// function saveFrontendFiles(token) {
//   const fs = require("fs");
//   const contractsDir = path.join(__dirname, "..", "admin", "src", "contracts");

//   if (!fs.existsSync(contractsDir)) {
//     fs.mkdirSync(contractsDir);
//   }

//   fs.writeFileSync(
//     path.join(contractsDir, "contract-address.json"),
//     JSON.stringify({ Token: token.address }, undefined, 2)
//   );

//   const TokenArtifact = artifacts.readArtifactSync("Token");

//   fs.writeFileSync(
//     path.join(contractsDir, "Token.json"),
//     JSON.stringify(TokenArtifact, null, 2)
//   );
// }

// main()
//   .then(() => process.exit(0))
//   .catch((error) => {
//     console.error(error);
//     process.exit(1);
//   });

// This is a script for deploying your contracts. You can adapt it to deploy
// yours, or create new ones.

const path = require("path");

async function main() {
  // This is just a convenience check
  if (network.name === "hardhat") {
    console.warn(
      "You are trying to deploy a contract to the Hardhat Network, which" +
        "gets automatically created and destroyed every time. Use the Hardhat" +
        " option '--network localhost'"
    );
  }

  // ethers is available in the global scope
  const [deployer] = await ethers.getSigners();
  console.log(
    "Deploying the contracts with the account:",
    await deployer.getAddress()
  );

  console.log("Account balance:", (await deployer.getBalance()).toString());

  // Deploy Token contract
  const Token = await ethers.getContractFactory("Token");
  const token = await Token.deploy();
  await token.deployed();

  console.log("Token address:", token.address);

  // Deploy Account contract
  const Account = await ethers.getContractFactory("AccountManager");
  const account = await Account.deploy();
  await account.deployed();

  console.log("Account address:", account.address);

  // We also save the contract's artifacts and address in the frontend directory
  saveFrontendFiles({ Token: token, Account: account });
}

function saveFrontendFiles({ Token, Account }) {
  const fs = require("fs");
  const contractsDir = path.join(__dirname, "..", "admin", "src", "contracts");

  if (!fs.existsSync(contractsDir)) {
    fs.mkdirSync(contractsDir);
  }

  fs.writeFileSync(
    path.join(contractsDir, "contract-address.json"),
    JSON.stringify({ Token: Token.address, Account: Account.address }, undefined, 2)
  );

  const TokenArtifact = artifacts.readArtifactSync("Token");
  const AccountArtifact = artifacts.readArtifactSync("AccountManager");

  fs.writeFileSync(
    path.join(contractsDir, "Token.json"),
    JSON.stringify(TokenArtifact, null, 2)
  );

  fs.writeFileSync(
    path.join(contractsDir, "AccountManager.json"),
    JSON.stringify(AccountArtifact, null, 2)
  );
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
  <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
  <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
    <application
        android:label="driver"
        android:name="${applicationName}"
        android:icon="@mipmap/ic_launcher">
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:launchMode="singleTop"
            android:theme="@style/LaunchTheme"
            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
            android:hardwareAccelerated="true"
            android:windowSoftInputMode="adjustResize">
            <!-- Specifies an Android theme to apply to this Activity as soon as
                 the Android process has started. This theme is visible to the user
                 while the Flutter UI initializes. After that, this theme continues
                 to determine the Window background behind the Flutter UI. -->
            <meta-data
              android:name="io.flutter.embedding.android.NormalTheme"
              android:resource="@style/NormalTheme"
              />
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>
        <!-- Don't delete the meta-data below.
             This is used by the Flutter tool to generate GeneratedPluginRegistrant.java -->
        <meta-data
            android:name="flutterEmbedding"
            android:value="2" />
    </application>
</manifest>
import 'package:driver/pages/home_screen.dart';
import 'package:driver/pages/main_scree.dart';
import 'package:driver/state/bottom_nav_bar/bottom_nav_logic.dart';
import 'package:driver/state/contract/contract_logic.dart';
import 'package:driver/state/home/home_logic.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:get/get_instance/src/bindings_interface.dart';
import 'package:get/get_navigation/src/root/get_material_app.dart';
import 'package:sizer/sizer.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return Sizer(builder: ((context, orientation, deviceType) {
      return GetMaterialApp(
        title: 'Flutter Demo',
        debugShowCheckedModeBanner: false,
        theme: ThemeData(
          colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
          useMaterial3: true,
        ),
        initialBinding: InitBining(),
        home: const MainScreen(),
      );
    }));
  }
}

class InitBining extends Bindings {
  @override
  void dependencies() {
    Get.lazyPut(() => BottomNavLogic());
    Get.lazyPut(() => HomeLogic());
    Get.lazyPut(() => ContractLogic());
    // TODO: implement dependencies
  }
}
//
//  Generated file. Do not edit.
//

// clang-format off



void fl_register_plugins(FlPluginRegistry* registry) {
  g_autoptr(FlPluginRegistrar) url_launcher_linux_registrar =
      fl_plugin_registry_get_registrar_for_plugin(registry, "UrlLauncherPlugin");
  url_launcher_plugin_register_with_registrar(url_launcher_linux_registrar);
}
list(APPEND FLUTTER_PLUGIN_LIST
  url_launcher_linux
)

list(APPEND FLUTTER_FFI_PLUGIN_LIST
)

set(PLUGIN_BUNDLED_LIBRARIES)

foreach(plugin ${FLUTTER_PLUGIN_LIST})
  add_subdirectory(flutter/ephemeral/.plugin_symlinks/${plugin}/linux plugins/${plugin})
  target_link_libraries(${BINARY_NAME} PRIVATE ${plugin}_plugin)
  list(APPEND PLUGIN_BUNDLED_LIBRARIES $<TARGET_FILE:${plugin}_plugin>)
  list(APPEND PLUGIN_BUNDLED_LIBRARIES ${${plugin}_bundled_libraries})
endforeach(plugin)

foreach(ffi_plugin ${FLUTTER_FFI_PLUGIN_LIST})
  add_subdirectory(flutter/ephemeral/.plugin_symlinks/${ffi_plugin}/linux plugins/${ffi_plugin})
  list(APPEND PLUGIN_BUNDLED_LIBRARIES ${${ffi_plugin}_bundled_libraries})
endforeach(ffi_plugin)
//
//  Generated file. Do not edit.
//

import FlutterMacOS
import Foundation

import geolocator_apple
import url_launcher_macos

func RegisterGeneratedPlugins(registry: FlutterPluginRegistry) {
  GeolocatorPlugin.register(with: registry.registrar(forPlugin: "GeolocatorPlugin"))
  UrlLauncherPlugin.register(with: registry.registrar(forPlugin: "UrlLauncherPlugin"))
}
packages:
  async:
    dependency: transitive
    description:
      name: async
      sha256: "947bfcf187f74dbc5e146c9eb9c0f10c9f8b30743e341481c1e2ed3ecc18c20c"
      url: "https://pub.dev"
    source: hosted
    version: "2.11.0"
  boolean_selector:
    dependency: transitive
    description:
      name: boolean_selector
      sha256: "6cfb5af12253eaf2b368f07bacc5a80d1301a071c73360d746b7f2e32d762c66"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.1"
  characters:
    dependency: transitive
    description:
      name: characters
      sha256: "04a925763edad70e8443c99234dc3328f442e811f1d8fd1a72f1c8ad0f69a605"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.0"
  clock:
    dependency: transitive
    description:
      name: clock
      sha256: cb6d7f03e1de671e34607e909a7213e31d7752be4fb66a86d29fe1eb14bfb5cf
      url: "https://pub.dev"
    source: hosted
    version: "1.1.1"
  collection:
    dependency: transitive
    description:
      name: collection
      sha256: f092b211a4319e98e5ff58223576de6c2803db36221657b46c82574721240687
      url: "https://pub.dev"
    source: hosted
    version: "1.17.2"
  convert:
    dependency: transitive
    description:
      name: convert
      sha256: "0f08b14755d163f6e2134cb58222dd25ea2a2ee8a195e53983d57c075324d592"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.1"
  crypto:
    dependency: transitive
    description:
      name: crypto
      sha256: ff625774173754681d66daaf4a448684fb04b78f902da9cb3d308c19cc5e8bab
      url: "https://pub.dev"
    source: hosted
    version: "3.0.3"
  cupertino_icons:
    dependency: "direct main"
    description:
      name: cupertino_icons
      sha256: d57953e10f9f8327ce64a508a355f0b1ec902193f66288e8cb5070e7c47eeb2d
      url: "https://pub.dev"
    source: hosted
    version: "1.0.6"
  eip1559:
    dependency: transitive
    description:
      name: eip1559
      sha256: c2b81ac85f3e0e71aaf558201dd9a4600f051ece7ebacd0c5d70065c9b458004
      url: "https://pub.dev"
    source: hosted
    version: "0.6.2"
  eip55:
    dependency: transitive
    description:
      name: eip55
      sha256: "213a9b86add87a5216328e8494b0ab836e401210c4d55eb5e521bd39e39169e1"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.2"
  fake_async:
    dependency: transitive
    description:
      name: fake_async
      sha256: "511392330127add0b769b75a987850d136345d9227c6b94c96a04cf4a391bf78"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.1"
  flutter:
    dependency: "direct main"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_lints:
    dependency: "direct dev"
    description:
      name: flutter_lints
      sha256: a25a15ebbdfc33ab1cd26c63a6ee519df92338a9c10f122adda92938253bef04
      url: "https://pub.dev"
    source: hosted
    version: "2.0.3"
  flutter_map:
    dependency: "direct main"
    description:
      name: flutter_map
      sha256: cda8d72135b697f519287258b5294a57ce2f2a5ebf234f0e406aad4dc14c9399
      url: "https://pub.dev"
    source: hosted
    version: "6.1.0"
  flutter_test:
    dependency: "direct dev"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_web_plugins:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.0"
  geolocator:
    dependency: "direct main"
    description:
      name: geolocator
      sha256: b8f520252c5c66851295bcc263bc8ae7555501938427f72216ba7688702e261d
      url: "https://pub.dev"
    source: hosted
    version: "7.7.1"
  geolocator_android:
    dependency: transitive
    description:
      name: geolocator_android
      sha256: "2f84d6d68b97a3774f2c4111ac95ec5898cd9b98f12193fc3ea7fa21d7a8b46c"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.0"
  geolocator_apple:
    dependency: transitive
    description:
      name: geolocator_apple
      sha256: "1e8e398cc92151d946a4bbd34e2075885333e42d35ca33e418e7ce7b0a29991e"
      url: "https://pub.dev"
    source: hosted
    version: "1.2.2"
  geolocator_platform_interface:
    dependency: transitive
    description:
      name: geolocator_platform_interface
      sha256: "9d6f34a8a4b704d504f34acc5e52d880a7d2caedd99739902d6319179b0336d4"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.6"
  geolocator_web:
    dependency: transitive
    description:
      name: geolocator_web
      sha256: "0b9e0ec13ce2211085cae0055b3516c975bd6cfe2878a20c8f13611f1a259855"
      url: "https://pub.dev"
    source: hosted
    version: "2.0.6"
  get:
    dependency: "direct main"
    description:
      name: get
      sha256: e4e7335ede17452b391ed3b2ede016545706c01a02292a6c97619705e7d2a85e
      url: "https://pub.dev"
    source: hosted
    version: "4.6.6"
  http:
    dependency: "direct main"
    description:
      name: http
      sha256: "759d1a329847dd0f39226c688d3e06a6b8679668e350e2891a6474f8b4bb8525"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.0"
  http_parser:
    dependency: transitive
    description:
      name: http_parser
      sha256: "2aa08ce0341cc9b354a498388e30986515406668dbcc4f7c950c3e715496693b"
      url: "https://pub.dev"
    source: hosted
    version: "4.0.2"
  intl:
    dependency: transitive
    description:
      name: intl
      sha256: d6f56758b7d3014a48af9701c085700aac781a92a87a62b1333b46d8879661cf
      url: "https://pub.dev"
    source: hosted
    version: "0.19.0"
  js:
    dependency: transitive
    description:
      name: js
      sha256: "4186c61b32f99e60f011f7160e32c89a758ae9b1d0c6d28e2c02ef0382300e2b"
      url: "https://pub.dev"
    source: hosted
    version: "0.7.0"
  json_rpc_2:
    dependency: transitive
    description:
      name: json_rpc_2
      sha256: "5e469bffa23899edacb7b22787780068d650b106a21c76db3c49218ab7ca447e"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.2"
  latlong2:
    dependency: "direct main"
    description:
      name: latlong2
      sha256: "18712164760cee655bc790122b0fd8f3d5b3c36da2cb7bf94b68a197fbb0811b"
      url: "https://pub.dev"
    source: hosted
    version: "0.9.0"
  lints:
    dependency: transitive
    description:
      name: lints
      sha256: "0a217c6c989d21039f1498c3ed9f3ed71b354e69873f13a8dfc3c9fe76f1b452"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.1"
  lists:
    dependency: transitive
    description:
      name: lists
      sha256: "4ca5c19ae4350de036a7e996cdd1ee39c93ac0a2b840f4915459b7d0a7d4ab27"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.1"
  logger:
    dependency: transitive
    description:
      name: logger
      sha256: "6bbb9d6f7056729537a4309bda2e74e18e5d9f14302489cc1e93f33b3fe32cac"
      url: "https://pub.dev"
    source: hosted
    version: "2.0.2+1"
  matcher:
    dependency: transitive
    description:
      name: matcher
      sha256: "1803e76e6653768d64ed8ff2e1e67bea3ad4b923eb5c56a295c3e634bad5960e"
      url: "https://pub.dev"
    source: hosted
    version: "0.12.16"
  material_color_utilities:
    dependency: transitive
    description:
      name: material_color_utilities
      sha256: "9528f2f296073ff54cb9fee677df673ace1218163c3bc7628093e7eed5203d41"
      url: "https://pub.dev"
    source: hosted
    version: "0.5.0"
  meta:
    dependency: transitive
    description:
      name: meta
      sha256: "3c74dbf8763d36539f114c799d8a2d87343b5067e9d796ca22b5eb8437090ee3"
      url: "https://pub.dev"
    source: hosted
    version: "1.9.1"
  mgrs_dart:
    dependency: transitive
    description:
      name: mgrs_dart
      sha256: fb89ae62f05fa0bb90f70c31fc870bcbcfd516c843fb554452ab3396f78586f7
      url: "https://pub.dev"
    source: hosted
    version: "2.0.0"
  path:
    dependency: transitive
    description:
      name: path
      sha256: "8829d8a55c13fc0e37127c29fedf290c102f4e40ae94ada574091fe0ff96c917"
      url: "https://pub.dev"
    source: hosted
    version: "1.8.3"
  permission_handler:
    dependency: "direct main"
    description:
      name: permission_handler
      sha256: "284a66179cabdf942f838543e10413246f06424d960c92ba95c84439154fcac8"
      url: "https://pub.dev"
    source: hosted
    version: "11.0.1"
  permission_handler_android:
    dependency: transitive
    description:
      name: permission_handler_android
      sha256: f9fddd3b46109bd69ff3f9efa5006d2d309b7aec0f3c1c5637a60a2d5659e76e
      url: "https://pub.dev"
    source: hosted
    version: "11.1.0"
  permission_handler_apple:
    dependency: transitive
    description:
      name: permission_handler_apple
      sha256: "99e220bce3f8877c78e4ace901082fb29fa1b4ebde529ad0932d8d664b34f3f5"
      url: "https://pub.dev"
    source: hosted
    version: "9.1.4"
  permission_handler_platform_interface:
    dependency: transitive
    description:
      name: permission_handler_platform_interface
      sha256: "6760eb5ef34589224771010805bea6054ad28453906936f843a8cc4d3a55c4a4"
      url: "https://pub.dev"
    source: hosted
    version: "3.12.0"
  permission_handler_windows:
    dependency: transitive
    description:
      name: permission_handler_windows
      sha256: cc074aace208760f1eee6aa4fae766b45d947df85bc831cde77009cdb4720098
      url: "https://pub.dev"
    source: hosted
    version: "0.1.3"
  plugin_platform_interface:
    dependency: transitive
    description:
      name: plugin_platform_interface
      sha256: "4820fbfdb9478b1ebae27888254d445073732dae3d6ea81f0b7e06d5dedc3f02"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.8"
  pointycastle:
    dependency: transitive
    description:
      name: pointycastle
      sha256: "43ac87de6e10afabc85c445745a7b799e04de84cebaa4fd7bf55a5e1e9604d29"
      url: "https://pub.dev"
    source: hosted
    version: "3.7.4"
  polylabel:
    dependency: transitive
    description:
      name: polylabel
      sha256: "41b9099afb2aa6c1730bdd8a0fab1400d287694ec7615dd8516935fa3144214b"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.1"
  proj4dart:
    dependency: transitive
    description:
      name: proj4dart
      sha256: c8a659ac9b6864aa47c171e78d41bbe6f5e1d7bd790a5814249e6b68bc44324e
      url: "https://pub.dev"
    source: hosted
    version: "2.1.0"
  sec:
    dependency: transitive
    description:
      name: sec
      sha256: "8bbd56df884502192a441b5f5d667265498f2f8728a282beccd9db79e215f379"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.0"
  sizer:
    dependency: "direct main"
    description:
      name: sizer
      sha256: d2b3cb6cbc4a637f508dacd786bae55df31e5fc088044248a43e4fd1e050c117
      url: "https://pub.dev"
    source: hosted
    version: "2.0.15"
  sky_engine:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.99"
  source_span:
    dependency: transitive
    description:
      name: source_span
      sha256: "53e943d4206a5e30df338fd4c6e7a077e02254531b138a15aec3bd143c1a8b3c"
      url: "https://pub.dev"
    source: hosted
    version: "1.10.0"
  stack_trace:
    dependency: transitive
    description:
      name: stack_trace
      sha256: c3c7d8edb15bee7f0f74debd4b9c5f3c2ea86766fe4178eb2a18eb30a0bdaed5
      url: "https://pub.dev"
    source: hosted
    version: "1.11.0"
  stream_channel:
    dependency: transitive
    description:
      name: stream_channel
      sha256: "83615bee9045c1d322bbbd1ba209b7a749c2cbcdcb3fdd1df8eb488b3279c1c8"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.1"
  stream_transform:
    dependency: transitive
    description:
      name: stream_transform
      sha256: "14a00e794c7c11aa145a170587321aedce29769c08d7f58b1d141da75e3b1c6f"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.0"
  string_scanner:
    dependency: transitive
    description:
      name: string_scanner
      sha256: "556692adab6cfa87322a115640c11f13cb77b3f076ddcc5d6ae3c20242bedcde"
      url: "https://pub.dev"
    source: hosted
    version: "1.2.0"
  term_glyph:
    dependency: transitive
    description:
      name: term_glyph
      sha256: a29248a84fbb7c79282b40b8c72a1209db169a2e0542bce341da992fe1bc7e84
      url: "https://pub.dev"
    source: hosted
    version: "1.2.1"
  test_api:
    dependency: transitive
    description:
      name: test_api
      sha256: "75760ffd7786fffdfb9597c35c5b27eaeec82be8edfb6d71d32651128ed7aab8"
      url: "https://pub.dev"
    source: hosted
    version: "0.6.0"
  typed_data:
    dependency: transitive
    description:
      name: typed_data
      sha256: facc8d6582f16042dd49f2463ff1bd6e2c9ef9f3d5da3d9b087e244a7b564b3c
      url: "https://pub.dev"
    source: hosted
    version: "1.3.2"
  unicode:
    dependency: transitive
    description:
      name: unicode
      sha256: "0f69e46593d65245774d4f17125c6084d2c20b4e473a983f6e21b7d7762218f1"
      url: "https://pub.dev"
    source: hosted
    version: "0.3.1"
  universal_io:
    dependency: transitive
    description:
      name: universal_io
      sha256: "1722b2dcc462b4b2f3ee7d188dad008b6eb4c40bbd03a3de451d82c78bba9aad"
      url: "https://pub.dev"
    source: hosted
    version: "2.2.2"
  url_launcher:
    dependency: "direct main"
    description:
      name: url_launcher
      sha256: c512655380d241a337521703af62d2c122bf7b77a46ff7dd750092aa9433499c
      url: "https://pub.dev"
    source: hosted
    version: "6.2.4"
  url_launcher_android:
    dependency: transitive
    description:
      name: url_launcher_android
      sha256: "507dc655b1d9cb5ebc756032eb785f114e415f91557b73bf60b7e201dfedeb2f"
      url: "https://pub.dev"
    source: hosted
    version: "6.2.2"
  url_launcher_ios:
    dependency: transitive
    description:
      name: url_launcher_ios
      sha256: "75bb6fe3f60070407704282a2d295630cab232991eb52542b18347a8a941df03"
      url: "https://pub.dev"
    source: hosted
    version: "6.2.4"
  url_launcher_linux:
    dependency: transitive
    description:
      name: url_launcher_linux
      sha256: ab360eb661f8879369acac07b6bb3ff09d9471155357da8443fd5d3cf7363811
      url: "https://pub.dev"
    source: hosted
    version: "3.1.1"
  url_launcher_macos:
    dependency: transitive
    description:
      name: url_launcher_macos
      sha256: b7244901ea3cf489c5335bdacda07264a6e960b1c1b1a9f91e4bc371d9e68234
      url: "https://pub.dev"
    source: hosted
    version: "3.1.0"
  url_launcher_platform_interface:
    dependency: transitive
    description:
      name: url_launcher_platform_interface
      sha256: a932c3a8082e118f80a475ce692fde89dc20fddb24c57360b96bc56f7035de1f
      url: "https://pub.dev"
    source: hosted
    version: "2.3.1"
  url_launcher_web:
    dependency: transitive
    description:
      name: url_launcher_web
      sha256: "7fd2f55fe86cea2897b963e864dc01a7eb0719ecc65fcef4c1cc3d686d718bb2"
      url: "https://pub.dev"
    source: hosted
    version: "2.2.0"
  url_launcher_windows:
    dependency: transitive
    description:
      name: url_launcher_windows
      sha256: ecf9725510600aa2bb6d7ddabe16357691b6d2805f66216a97d1b881e21beff7
      url: "https://pub.dev"
    source: hosted
    version: "3.1.1"
  uuid:
    dependency: transitive
    description:
      name: uuid
      sha256: "648e103079f7c64a36dc7d39369cabb358d377078a051d6ae2ad3aa539519313"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.7"
  vector_math:
    dependency: transitive
    description:
      name: vector_math
      sha256: "80b3257d1492ce4d091729e3a67a60407d227c27241d6927be0130c98e741803"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.4"
  wallet:
    dependency: transitive
    description:
      name: wallet
      sha256: "687fd89a16557649b26189e597792962f405797fc64113e8758eabc2c2605c32"
      url: "https://pub.dev"
    source: hosted
    version: "0.0.13"
  web:
    dependency: transitive
    description:
      name: web
      sha256: dc8ccd225a2005c1be616fe02951e2e342092edf968cf0844220383757ef8f10
      url: "https://pub.dev"
    source: hosted
    version: "0.1.4-beta"
  web3dart:
    dependency: "direct main"
    description:
      name: web3dart
      sha256: bebbea9278723cef51d21caf65668860e7547f59114fe9f8af01b873a72ba0e6
      url: "https://pub.dev"
    source: hosted
    version: "2.7.1"
  web_socket_channel:
    dependency: "direct main"
    description:
      name: web_socket_channel
      sha256: d88238e5eac9a42bb43ca4e721edba3c08c6354d4a53063afaa568516217621b
      url: "https://pub.dev"
    source: hosted
    version: "2.4.0"
  wkt_parser:
    dependency: transitive
    description:
      name: wkt_parser
      sha256: "8a555fc60de3116c00aad67891bcab20f81a958e4219cc106e3c037aa3937f13"
      url: "https://pub.dev"
    source: hosted
    version: "2.0.0"
sdks:
  dart: ">=3.1.0 <4.0.0"
  flutter: ">=3.13.0"
name: driver
description: A new Flutter project.
publish_to: 'none' 
version: 1.0.0+1

environment:
  sdk: '>=3.1.0 <4.0.0'

dependencies:
  flutter:
    sdk: flutter


      cupertino_icons: ^1.0.2
  sizer: ^2.0.15
  get: ^4.6.6

  geolocator: ^7.6.2
  latlong2: ^0.9.0
  http: ^1.1.0
  web_socket_channel: ^2.4.0
  web3dart: ^2.7.1
  permission_handler: ^11.0.1
  flutter_map: ^6.1.0
  url_launcher: ^6.2.4
  

dev_dependencies:
  flutter_test:
    sdk: flutter

            flutter_lints: ^2.0.0



flutter:

        uses-material-design: true

    assets:
    - truffle/build/contracts/PayByLocation.json
//
//  Generated file. Do not edit.
//

// clang-format off



void RegisterPlugins(flutter::PluginRegistry* registry) {
  PermissionHandlerWindowsPluginRegisterWithRegistrar(
      registry->GetRegistrarForPlugin("PermissionHandlerWindowsPlugin"));
  UrlLauncherWindowsRegisterWithRegistrar(
      registry->GetRegistrarForPlugin("UrlLauncherWindows"));
}
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
    <uses-permission android:name="android.permission.CHANGE_NETWORK_STATE" />
    <uses-permission android:name="com.google.android.providers.gsf.permission.READ_GSERVICES" />
    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />

    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@drawable/ethereum_logo"
        android:label="@string/app_name"
        android:roundIcon="@drawable/ethereum_logo"
        android:supportsRtl="true"
        android:theme="@style/Theme.LocationSmartContract"
        android:usesCleartextTraffic="true"
        tools:targetApi="31">
        <activity
            android:name=".employer.ui.AddDeliveryActivity"
            android:exported="false" />
        <activity
            android:name=".driver.ui.DriverActivity"
            android:exported="false" />
        <activity
            android:name=".employer.ui.EmployerActivity"
            android:exported="false" />
        <activity
            android:name=".employer.ui.MapActivity"
            android:exported="false" />
        <activity
            android:name=".LogInActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <service
            android:name=".driver.implementation.LocationManager"
            android:exported="true"
            android:label="Location Manager">
        </service>
        <uses-library
            android:name="org.apache.http.legacy"
            android:required="false" />

        <meta-data
            android:name="com.google.android.maps.v2.API_KEY"
            android:exported="true"
            android:value="@string/MapApiKey" />
    </application>

</manifest>
package com.fan.locationsmartcontract;

import static com.fan.locationsmartcontract.implementaition.FirstTimeOps.isConnected;

import androidx.appcompat.app.AppCompatActivity;

import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;
import android.widget.Toast;

import com.fan.locationsmartcontract.contract.ConnectToContract;
import com.fan.locationsmartcontract.databinding.ActivityLoginBinding;
import com.fan.locationsmartcontract.driver.ui.DriverActivity;
import com.fan.locationsmartcontract.employer.ui.EmployerActivity;
import com.fan.locationsmartcontract.implementaition.AccountsAutoCompleteAdapter;
import com.fan.locationsmartcontract.implementaition.ConfirmationDialogWithOK;
import com.fan.locationsmartcontract.implementaition.FirstTimeOps;
import com.fan.locationsmartcontract.models.Account;

import org.web3j.protocol.Web3j;

import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class LogInActivity extends AppCompatActivity implements ConfirmationDialogWithOK.OnButtonClick{
    private final String TAG = LogInActivity.this.getClass().getSimpleName();
    ActivityLoginBinding binding;
    Account currentAccount;
    Web3j web3j;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = ActivityLoginBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());
        setListenersToViews();

    }

    public void setListenersToViews(){
        binding.connectB.setOnClickListener(view -> {
            doWeb3Stuff();
        });
        binding.loginB.setOnClickListener(view -> {
            if(currentAccount != null) {
                if (web3j != null) {
                    login();
                } else {
                    Toast.makeText(this, "Network not connected", Toast.LENGTH_SHORT).show();
                }
            }else{
                Toast.makeText(this, "Please input address", Toast.LENGTH_SHORT).show();

            }
        });
    }

    public void login(){
        Intent intent;
        if(currentAccount.getName().equals("Admin")){
            intent = new Intent(LogInActivity.this, EmployerActivity.class);
            intent.putExtra("address",currentAccount.getAddress());
        }else{
            intent = new Intent(LogInActivity.this, DriverActivity.class);
            intent.putExtra("address",currentAccount.getAddress());
        }
        startActivity(intent);
    }

    public void setValuesToAutoCompleteText(List<Account> accounts) {
        AccountsAutoCompleteAdapter adapter = new AccountsAutoCompleteAdapter(LogInActivity.this, R.layout.accounts_list_item, accounts);
        binding.addEt.setThreshold(0);
        //Set the adapter
        binding.addEt.setAdapter(adapter);

        binding.addEt.setOnItemClickListener((parent, arg1, pos, id) -> {
            currentAccount = adapter.mFilteredList.get(pos);
            binding.addEt.setText(currentAccount.getAddress());
        });
    }



    public void doWeb3Stuff(){
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Handler handler = new Handler(Looper.getMainLooper());

        executor.execute(() -> {
            boolean isOnline = isConnected(LogInActivity.this);
            if(isOnline){
                web3j = Singleton.getInstance(LogInActivity.this).getWeb3j();
                Log.v(TAG,"Web3 "+web3j);
                if(web3j != null){
                    List<Account> accounts = FirstTimeOps.getAccounts(web3j);
                    Log.v(TAG,"Accounts "+accounts);

                    handler.post(()->{
                        Toast.makeText(this, "Connected", Toast.LENGTH_SHORT).show();
                        setValuesToAutoCompleteText(accounts);
                    });
                }
            }else{
                handler.post(()->{
                    Toast.makeText(this, "No network", Toast.LENGTH_SHORT).show();
                });
            }

        });
    }

    @Override
    public void OnOkButtonClick() {

    }
}
package com.fan.locationsmartcontract.driver.implementation;

import android.Manifest;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.location.Location;
import android.location.LocationListener;
import android.os.Bundle;
import android.os.IBinder;
import android.util.Log;

import androidx.core.app.ActivityCompat;

import java.text.DecimalFormat;

public class LocationManager extends Service implements LocationListener {
    private final String TAG = LocationManager.this.getClass().getSimpleName();
    private Context mContext;

    // flag for GPS status
    boolean isGPSEnabled = false;
    // flag for network status
    boolean isNetworkEnabled = false;

    // flag for GPS status
    boolean canGetLocation = false;
    Location location; // location
    double latitude; // latitude
    double longitude; // longitude

    // The minimum distance to change Updates in meters
    private static final long MIN_DISTANCE_CHANGE_FOR_UPDATES = 1;

    // The minimum time between updates in milliseconds
    private static final long MIN_TIME_BW_UPDATES = 1000;

    // Declaring a Location Manager
    protected android.location.LocationManager locationManager;
    public LocationManager(){

    }
    public LocationManager(Context context) {
        this.mContext = context;
        getLocation();
    }

    @Override
    public void onCreate() {
        super.onCreate();
    }

    public Location getLocation() {
        try {

            locationManager = (android.location.LocationManager) mContext
                    .getSystemService(LOCATION_SERVICE);

            // getting GPS status
            isGPSEnabled = locationManager
                    .isProviderEnabled(android.location.LocationManager.GPS_PROVIDER);

            // getting network status
            isNetworkEnabled = locationManager
                    .isProviderEnabled(android.location.LocationManager.NETWORK_PROVIDER);

            if(!isGPSEnabled && !isNetworkEnabled &&
                    ActivityCompat.checkSelfPermission(mContext, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED
                    && ActivityCompat.checkSelfPermission(mContext, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                // no network provider is enabled
            } else {
                this.canGetLocation = true;
                // First get location from Network Provider
                if (isNetworkEnabled ) {

                    locationManager.requestLocationUpdates(
                            android.location.LocationManager.NETWORK_PROVIDER,
                            MIN_TIME_BW_UPDATES,
                            MIN_DISTANCE_CHANGE_FOR_UPDATES, this);
                    Log.d(TAG, "Network");
                    if (locationManager != null) {
                        location = locationManager
                                .getLastKnownLocation(android.location.LocationManager.NETWORK_PROVIDER);
                        if (location != null) {
                            latitude = location.getLatitude();
                            longitude = location.getLongitude();
                        }
                    }
                }
                // if GPS Enabled get lat/long using GPS Services
                if (isGPSEnabled) {
                    if (location == null) {

                        assert locationManager != null;
                        locationManager.requestLocationUpdates(
                                android.location.LocationManager.GPS_PROVIDER,
                                MIN_TIME_BW_UPDATES,
                                MIN_DISTANCE_CHANGE_FOR_UPDATES, this);
                        Log.d(TAG, "GPS Enabled");
                        if (locationManager != null) {
                            location = locationManager
                                    .getLastKnownLocation(android.location.LocationManager.GPS_PROVIDER);
                            if (location != null) {
                                Log.v(TAG,"GPS Data"+latitude+" , "+longitude);
                                latitude = location.getLatitude();
                                longitude = location.getLongitude();
                            }
                        }
                    }
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return location;
    }

    /**
     * Stop using GPS listener
     * Calling this function will stop using GPS in your app
     * */
    public void stopUsingGPS(){
        if(locationManager != null){
            locationManager.removeUpdates(LocationManager.this);
        }
    }

    /**
     * Function to get latitude
     * */
    public double getLatitude(){
        if(location != null){
            latitude = location.getLatitude();
        }

        // return latitude
        return latitude;
    }

    /**
     * Function to get longitude
     * */
    public double getLongitude(){
        if(location != null){
            longitude = location.getLongitude();
        }

        // return longitude
        return longitude;
    }


    @Override
    public void onLocationChanged(Location location) {

        DecimalFormat formatter = new DecimalFormat("        formatter.setMaximumFractionDigits(5);
        formatter.setMinimumFractionDigits(5);
        this.location = location;

        double latitude = this.getLatitude();

        double longitude = this.getLongitude();
        Log.v(TAG,"GPSL"+latitude+" , "+longitude);
        //Toast.makeText(mContext, "LOCATION CHANGED - \nLat: " + latitude + "\nLong: " + longitude, Toast.LENGTH_SHORT).show();



    }


    @Override
    public void onProviderDisabled(String provider) {
    }

    @Override
    public void onProviderEnabled(String provider) {
    }

    @Override
    public void onStatusChanged(String provider, int status, Bundle extras) {
    }

    @Override
    public IBinder onBind(Intent arg0) {
        return null;
    }



}
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".LogInActivity">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:id="@+id/title_lay"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginStart="32dp"
        android:layout_marginTop="72dp"
        android:layout_marginEnd="32dp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent">

        <androidx.appcompat.widget.AppCompatImageView
            android:id="@+id/ether_logo"
            android:layout_width="80dp"
            android:layout_height="80dp"
            android:src="@drawable/ethereum_logo"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent" />

        <TextView
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:fontFamily="sans-serif-condensed"
            android:padding="8dp"
            android:text="Refund by Location Smart Contract"
            android:textSize="28sp"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toEndOf="@+id/ether_logo"
            app:layout_constraintTop_toTopOf="parent" />
    </androidx.constraintlayout.widget.ConstraintLayout>

    <com.google.android.material.card.MaterialCardView
        android:id="@+id/connect_lay"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_margin="8dp"
        android:layout_marginStart="8dp"
        android:layout_marginTop="8dp"
        android:layout_marginEnd="8dp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@id/title_lay">

        <androidx.constraintlayout.widget.ConstraintLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent">
            <TextView
                android:id="@+id/title_tv"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:text="@string/input_connection_parameters"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toTopOf="parent"
                android:padding="8dp"
                android:layout_marginStart="24dp"
                android:layout_marginTop="8dp"
                android:textSize="22sp"
                android:fontFamily="sans-serif-black"/>

            <com.google.android.material.textfield.TextInputLayout
                android:id="@+id/url_input"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_marginStart="32dp"
                android:layout_marginTop="32dp"
                android:layout_marginEnd="32dp"
                android:hint="IP"
                app:boxBackgroundMode="outline"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toBottomOf="@+id/title_tv"
                app:startIconDrawable="@drawable/baseline_url_24">

                <com.google.android.material.textfield.TextInputEditText
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:textSize="12sp" />
            </com.google.android.material.textfield.TextInputLayout>

            <com.google.android.material.textfield.TextInputLayout
                android:id="@+id/port_input"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_marginStart="32dp"
                android:layout_marginTop="8dp"
                android:layout_marginEnd="32dp"
                android:hint="PORT"
                app:boxBackgroundMode="outline"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toBottomOf="@+id/url_input"
                app:startIconDrawable="@drawable/baseline_port_24">

                <com.google.android.material.textfield.TextInputEditText
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:textSize="12sp" />
            </com.google.android.material.textfield.TextInputLayout>

            <Button
                android:id="@+id/connectB"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_marginStart="32dp"
                android:layout_marginTop="32dp"
                android:layout_marginEnd="32dp"
                android:layout_marginBottom="16dp"
                android:text="Connect!"
                app:layout_constraintBottom_toBottomOf="parent"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toBottomOf="@+id/port_input" />

        </androidx.constraintlayout.widget.ConstraintLayout>
    </com.google.android.material.card.MaterialCardView>


    <com.google.android.material.card.MaterialCardView
        android:id="@+id/login_lay"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginStart="8dp"
        android:layout_marginTop="32dp"
        android:layout_marginEnd="8dp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@id/connect_lay">

        <androidx.constraintlayout.widget.ConstraintLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent">
            <TextView
                android:id="@+id/login_title_tv"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:text="@string/select_an_address"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toTopOf="parent"
                android:padding="8dp"
                android:layout_marginTop="8dp"
                android:layout_marginStart="24dp"
                android:textSize="22sp"
                android:fontFamily="sans-serif-black"/>

            <com.google.android.material.textfield.TextInputLayout
                android:id="@+id/add_input"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_marginStart="32dp"
                android:layout_marginTop="32dp"
                android:layout_marginEnd="32dp"
                android:hint="ADDRESS"
                app:boxBackgroundMode="outline"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toBottomOf="@+id/login_title_tv"
                app:startIconDrawable="@drawable/baseline_my_location_24">

                <com.google.android.material.textfield.MaterialAutoCompleteTextView
                    android:id="@+id/addEt"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:padding="16dp"
                    android:textSize="12sp" />
            </com.google.android.material.textfield.TextInputLayout>

            <Button
                android:id="@+id/loginB"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_marginStart="32dp"
                android:layout_marginTop="32dp"
                android:layout_marginEnd="32dp"
                android:layout_marginBottom="16dp"
                android:text="Login"
                app:layout_constraintBottom_toBottomOf="parent"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toBottomOf="@+id/add_input" />
        </androidx.constraintlayout.widget.ConstraintLayout>
    </com.google.android.material.card.MaterialCardView>
</androidx.constraintlayout.widget.ConstraintLayout>
plugins {
    id 'com.android.application'
}

android {
    namespace 'com.fan.locationsmartcontract'
    compileSdk 33

    defaultConfig {
        applicationId "com.fan.locationsmartcontract"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            buildConfigField 'String', "MapApiKey", MAP_API_KEY
            resValue "string", "MapApiKey", MAP_API_KEY
            buildConfigField "boolean", "isTesting", "true"
            buildConfigField "boolean", "isRelease", "false"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "isTesting", "false"
            buildConfigField "boolean", "isRelease", "true"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
}
android {
    buildFeatures {
        buildConfig = true
        viewBinding true
    }
}
dependencies {

    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    implementation 'org.web3j:infura:3.3.1-android'
    implementation 'org.web3j:core:4.10.3'
    implementation 'com.google.android.gms:play-services:12.0.1'
}
package com.fan.locationsmartcontract.contract;

import org.web3j.protocol.Web3j;
import org.web3j.protocol.http.HttpService;

public class ConnectToContract {

    public static Web3j returnWeb3Connection(){
        try {
            String url = "HTTP://10.0.2.2:7545"; // ganache local
//            String url = "HTTP://192.168.43.74:7545"; // ganache WIFI
            return Web3j.build(new HttpService(url));
        }catch (Exception e){
            e.printStackTrace();
            return null;
        }
    }
}
package com.fan.locationsmartcontract.driver.ui;


import static com.fan.locationsmartcontract.implementaition.FirstTimeOps.isConnected;
import static com.fan.locationsmartcontract.implementaition.FirstTimeOps.showToast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;

import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;
import android.widget.Toast;

import com.fan.locationsmartcontract.LogInActivity;
import com.fan.locationsmartcontract.R;
import com.fan.locationsmartcontract.Singleton;
import com.fan.locationsmartcontract.contract.RefundWithLoc_sol_RefundWithLoc;
import com.fan.locationsmartcontract.databinding.ActivityDriverBinding;
import com.fan.locationsmartcontract.driver.implementation.DeliveryAdapter;
import com.fan.locationsmartcontract.driver.models.DeliveryData;
import com.fan.locationsmartcontract.employer.ui.AddDeliveryActivity;
import com.fan.locationsmartcontract.implementaition.FirstTimeOps;
import com.fan.locationsmartcontract.models.Account;
import com.google.android.gms.drive.Drive;

import org.web3j.abi.Utils;
import org.web3j.protocol.Web3j;
//import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.EthGasPrice;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.utils.Convert;

import java.io.IOException;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class DriverActivity extends AppCompatActivity implements DeliveryAdapter.OnItemClick{
    private final String TAG = DriverActivity.this.getClass().getSimpleName();
    ActivityDriverBinding binding;
    Web3j web3j;
    DeliveryAdapter adapter;
    String address;
    Handler handler;
    ExecutorService executor;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = ActivityDriverBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());
        Intent intent = this.getIntent();
        address = intent.getStringExtra("address");
        web3j = Singleton.getInstance(this).getWeb3j();

        executor = Executors.newSingleThreadExecutor();
        handler = new Handler(Looper.getMainLooper());
        setListenersToViews();
        setValuesToViews();
    }

    public BigInteger estimateGas() throws IOException {

        EthGasPrice gas=web3j.ethGasPrice().send();
        return gas.getGasPrice();
    }
    public void setValuesToViews(){
        executor.execute(() -> {
            boolean isOnline = isConnected(DriverActivity.this);
            if(isOnline) {
                RefundWithLoc_sol_RefundWithLoc myContract = Singleton.getInstance(DriverActivity.this).getMyContract();
                if (myContract != null) {
                    String balance = FirstTimeOps.getAccountBalance(myContract, address);
                    if (balance != null) {
                        handler.post(() -> {
                            String balanceT = Convert.fromWei(balance, Convert.Unit.ETHER) + "ETH";
                            binding.accTv.setText(balanceT);
                        });
                    } else {
                        handler.post(() -> {

                            showToast(DriverActivity.this, "Balance not found");
                        });
                    }
                    Log.v(TAG,"balance: "+balance);
                    List<DeliveryData> deliveryDataList = getDeliveryData(myContract, address);
                    if(!deliveryDataList.isEmpty()){
                        handler.post(() -> {
                            updateTransactionList(deliveryDataList);
                        });
                    }


                }
            }else{
                handler.post(() -> {

                    showToast(DriverActivity.this, "No network");
                });
            }
        });

    }

    public List<DeliveryData> getDeliveryData(RefundWithLoc_sol_RefundWithLoc myContract,String address){
        List<DeliveryData> deliveryDataList = new ArrayList<>();
        try {
            List<RefundWithLoc_sol_RefundWithLoc.Delivery> response = (List<RefundWithLoc_sol_RefundWithLoc.Delivery>) myContract.getDriverDeliveryHistory(address).send();
            Log.v(TAG,"List "+response.get(0));
            if(!response.isEmpty()){
                for(RefundWithLoc_sol_RefundWithLoc.Delivery del :response){
                    DeliveryData deliveryData = new DeliveryData();
                    deliveryData.setName(del.name);
                    deliveryData.setDate(String.valueOf(del.endtime));
                    deliveryData.setCompliance(String.valueOf(del.compliant));
                    deliveryData.setIncentive(Convert.fromWei(String.valueOf(del.incentivePayWei), Convert.Unit.ETHER) + " ETH");
                    deliveryDataList.add(deliveryData);
                }
            }
//            List<org.web3j.protocol.core.methods.response.Log> logs = response.getLogs();
//            if(logs != null && !logs.isEmpty()){
//                org.web3j.protocol.core.methods.response.Log log = logs.get(0);
//                String data =  log.getData();
//                Log.v(TAG,"data"+data);
//                List<String> topics =  log.getTopics();
//                Log.v(TAG,"topics"+topics);
//
//                String raw =  log.getTransactionIndexRaw();
//                Log.v(TAG,"raw"+raw);
//
//                String blockedHash =  log.getBlockHash();
//                Log.v(TAG,"blockedHash"+blockedHash);
//
////                String blockedHash =  log.get();
////                Log.v(TAG,"blockedHash"+blockedHash);
//
//            }

        }catch (Exception e){
            e.printStackTrace();
        }
        return deliveryDataList;
    }


    public void updateTransactionList(List<DeliveryData> deliveryDataList){
        adapter = new DeliveryAdapter(DriverActivity.this,deliveryDataList);
        adapter.onItemClick = this;
        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(this);
        binding.deliveryRv.setLayoutManager(linearLayoutManager);
        binding.deliveryRv.setAdapter(adapter);
    }

    public void setListenersToViews(){
        binding.topAppBar.setNavigationOnClickListener(view -> {
            this.finish();
        });
        binding.checkB.setOnClickListener(view -> {
        });
    }

    @Override
    public void onItemClick(DeliveryData deliveryData) {

    }
}
package com.fan.locationsmartcontract.employer.ui;

import androidx.appcompat.app.AppCompatActivity;

import android.content.Intent;
import android.os.Bundle;

import com.fan.locationsmartcontract.R;
import com.fan.locationsmartcontract.databinding.ActivityEmployerBinding;

import jnr.ffi.annotations.In;

public class EmployerActivity extends AppCompatActivity {
    ActivityEmployerBinding binding;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = ActivityEmployerBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());
        setListenerToViews();
    }

    public void setListenerToViews(){
        binding.addB.setOnClickListener(view ->{
            startActivity(new Intent(this, AddDeliveryActivity.class));
        });
    }
}
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    xmlns:app="http://schemas.android.com/apk/res-auto">
    <com.google.android.material.appbar.AppBarLayout
        android:id="@+id/appBarLay"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent">

    <com.google.android.material.appbar.MaterialToolbar
        android:id="@+id/topAppBar"
        android:layout_width="match_parent"
        android:layout_height="?attr/actionBarSize"
        app:navigationIcon="@drawable/baseline_chevron_left_24"
        app:title="@string/app_bar_title_add_delivery"
        app:subtitle="@string/app_bar_sub_title_add_delivery"/>
    </com.google.android.material.appbar.AppBarLayout>
    <com.google.android.material.card.MaterialCardView
        android:id="@+id/acc_info_lay"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginStart="32dp"
        android:layout_marginTop="64dp"
        android:layout_marginEnd="32dp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/appBarLay">

        <androidx.constraintlayout.widget.ConstraintLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content">

            <TextView
                android:id="@+id/dummy_acc_tv"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:gravity="center_horizontal"
                android:padding="8dp"
                android:text="Account"
                android:fontFamily="sans-serif"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toTopOf="parent" />

            <TextView
                android:id="@+id/acc_tv"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:gravity="center_horizontal"
                android:padding="8dp"
                android:text="100ETH"
                android:fontFamily="sans-serif-condensed"
                android:textSize="22sp"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toBottomOf="@+id/dummy_acc_tv" />
        </androidx.constraintlayout.widget.ConstraintLayout>
    </com.google.android.material.card.MaterialCardView>

    <com.google.android.material.card.MaterialCardView
        android:id="@+id/acc_trans_lay"
        android:layout_width="0dp"
        android:layout_height="0dp"
        android:layout_marginStart="32dp"
        android:layout_marginTop="64dp"
        android:layout_marginEnd="32dp"
        android:layout_marginBottom="16dp"
        app:layout_constraintBottom_toTopOf="@+id/checkB"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@id/acc_info_lay">

        <androidx.constraintlayout.widget.ConstraintLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content">

            <TextView
                android:id="@+id/dummy_trans_tv"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:fontFamily="sans-serif-medium"
                android:padding="8dp"
                android:text="Transactions"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toTopOf="parent" />

            <androidx.recyclerview.widget.RecyclerView
                android:id="@+id/delivery_rv"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:fontFamily="sans-serif-condensed"
                android:gravity="center_horizontal"
                android:padding="8dp"
                android:text="100ETH"
                android:textSize="22sp"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toBottomOf="@+id/dummy_trans_tv" />
        </androidx.constraintlayout.widget.ConstraintLayout>
    </com.google.android.material.card.MaterialCardView>

    <Button
        android:id="@+id/checkB"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text="@string/check"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_margin="32dp"/>

</androidx.constraintlayout.widget.ConstraintLayout>
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".employer.ui.EmployerActivity">
    <com.google.android.material.appbar.AppBarLayout
        android:id="@+id/appBarLay"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent">

        <com.google.android.material.appbar.MaterialToolbar
            android:id="@+id/topAppBar"
            android:layout_width="match_parent"
            android:layout_height="?attr/actionBarSize"
            app:navigationIcon="@drawable/baseline_chevron_left_24"
            app:title="@string/app_bar_title_add_delivery"
            app:subtitle="@string/app_bar_sub_title_add_delivery"/>

    </com.google.android.material.appbar.AppBarLayout>

    <Button
        android:id="@+id/addB"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:text="Issue New Delivery"
        android:layout_margin="32dp"/>
</androidx.constraintlayout.widget.ConstraintLayout>
<resources>
    <string name="app_name">LocationSmartContract</string>
    <string name="ok">OK</string>
    <string name="decline">Decline</string>
    <string name="accept">Accept</string>
    <string name="check">Check</string>
    <string name="app_bar_title_add_delivery">New Delivery</string>
    <string name="app_bar_sub_title_add_delivery">Create new delivery session</string>
    <string name="are_you_sure">Are you sure you want to: </string>
    <string name="print_button_save">Save</string>
    <string name="name">NAME</string>
    <string name="address">ADDRESS</string>
    <string name="ip">IP</string>
    <string name="location">LOCATION</string>
    <string name="distance">DISTANCE</string>
    <string name="initial">INITIAL</string>
    <string name="incentive">INCENTIVE</string>
    <string name="end_time_stamp">END TIME STAMP</string>
    <string name="input_contract_parameters">Input Contract Parameters</string>
    <string name="input_connection_parameters">Input Connection Parameters</string>
    <string name="select_an_address">Select An Address</string>


</resources>
import React, { useState } from "react";
import CreateEmployee from "./components/CreateEmployee";
import EmployeeList from "./components/EmployeeList";
import { ethers } from "ethers";
import ComplianceContractABI from "./ComplianceContractABI.json";

const contractAddress = "0xABD275b4A0Fcef6Dbf78CE361E019Cd2d3457c7a";
const provider = new ethers.providers.Web3Provider(window.ethereum);
const signer = provider.getSigner();
const contract = new ethers.Contract(
  contractAddress,
  ComplianceContractABI,
  signer
);

async function sendCurrentLocation(currentLongitude, currentLatitude) {
  const tx = await contract.sendCurrentLocation(
    currentLongitude,
    currentLatitude
  );
  await tx.wait();
  console.log("Location sent successfully");
}

async function checkCompliance(driverAddress) {
  const tx = await contract.checkCompliance(driverAddress);
  await tx.wait();
  console.log("Compliance checked successfully");
}

async function connectWallet() {
  if (window.ethereum) {
    try {
      await window.ethereum.request({ method: "eth_requestAccounts" });
      console.log("Connected to Ethereum wallet");
    } catch (error) {
      console.error("Error connecting to wallet:", error);
    }
  } else {
    console.error("No Ethereum wallet detected");
  }
}

function App() {
  return (
    <div>
      <CreateEmployee />
      <EmployeeList />
    </div>
  );
}

export default App;
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
import "hardhat/console.sol";

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract ComplianceContract is ERC20 {
    struct ContractInfo {
        int256 targetLongitude;
        int256 targetLatitude;
        uint256 radius;
        uint duration;
        uint startTime;
        bool compliant;
    }

    mapping(address => ContractInfo) public contractInfo;
    mapping(address => string) public driverName;

    address public owner;

    event TokenReward(address indexed driver, uint amount);

    modifier onlyOwner() {
        require(msg.sender == owner, "Not the owner");
        _;
    }

    constructor() ERC20("RToken", "RT") {
        owner = msg.sender;
    }

    function sqrt(int256 x) public pure returns (int256 y) {
        int256 z = (x + 1) / 2;
        y = x;
        while (z < y) {
            y = z;
            z = (x / z + z) / 2;
        }
    }

    function registerDriver(
        address driverAddress,
        string memory name,
        int targetLongitude,
        int targetLatitude,
        uint radius,
        uint duration
    ) external onlyOwner {
        contractInfo[driverAddress] = ContractInfo({
            targetLongitude: targetLongitude,
            targetLatitude: targetLatitude,
            radius: radius,
            duration: duration,
            startTime: block.timestamp,
            compliant: true
        });
        driverName[driverAddress] = name;
    }

    function sendCurrentLocation(
        int currentLongitude,
        int currentLatitude
    ) external {
        ContractInfo storage info = contractInfo[msg.sender];

        console.log("Current Time:", block.timestamp);
        console.log("Start Time:", info.startTime);
        console.log("Duration:", info.duration);
        require(
            block.timestamp < info.startTime + info.duration,
            "Time duration exceeded"
        );

        int256 distance = calculateDistance(
            currentLongitude,
            currentLatitude,
            info.targetLongitude,
            info.targetLatitude
        );

        if (distance > int(info.radius)) {
            info.compliant = false;
        }
        console.log(info.compliant);
    }

    function checkCompliance(address driverAddress) external onlyOwner {
        ContractInfo storage info = contractInfo[driverAddress];
        require(
            block.timestamp >= info.startTime + info.duration,
            "Duration not completed"
        );

        if (info.compliant) {
            uint rewardAmount = 100;
            transfer(driverAddress, rewardAmount);
            emit TokenReward(driverAddress, rewardAmount);

            info.compliant = true;
        }
    }

    function calculateDistance(
        int lon1,
        int lat1,
        int lon2,
        int lat2
    ) internal pure returns (int) {
        int256 dx = (lon1 - lon2);
        int256 dy = (lat1 - lat2);
        return sqrt(dx * dx + dy * dy);
    }
}
const hre = require("hardhat");

async function main() {
  try {
    // const ownerAddress = "0x7d7eBFad17b19cd15d8241521A85a5cbc4D15d53";
    const [deployer] = await hre.ethers.getSigners();
    // console.log("Deploying contracts with the account:", ownerAddress);
    console.log(deployer.address);
    const ComplianceContract = await hre.ethers.getContractFactory(
      "ComplianceContract"
    );
    const complianceContract = await ComplianceContract.deploy();
    console.log(
      "ComplianceContract deployed to:",
      await complianceContract.getAddress()
    );
  } catch (error) {
    console.error(error);
    process.exit(1);
  }
}

main();
// SPDX-License-Identifier: MIT
pragma solidity >=0.8.20 <0.9.0;
import "hardhat/console.sol";
import "./MyToken.sol";

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract ComplianceContract {
    struct ContractInfo {
        int256 targetLongitude;
        int256 targetLatitude;
        uint256 radius;
        uint duration;
        uint startTime;
        bool compliant;
    }

    struct DriverInfo {
        address driverAddress;
        string name;
        ContractInfo contractInfo;
    }

    mapping(address => ContractInfo) public contractInfo;
    mapping(address => string) public driverName;

    MyToken public token;
    address public owner;
    DriverInfo[] public allDrivers;

    event TokenReward(address indexed driver, uint amount);

    modifier onlyOwner() {
        require(msg.sender == owner, "Not the owner");
        _;
    }

    constructor() {
        owner = msg.sender;
        token = MyToken(owner);
    }

    function sqrt(int256 x) public pure returns (int256 y) {
        int256 z = (x + 1) / 2;
        y = x;
        while (z < y) {
            y = z;
            z = (x / z + z) / 2;
        }
    }

    function registerDriver(
        address driverAddress,
        string memory name,
        int targetLongitude,
        int targetLatitude,
        uint radius,
        uint duration
    ) external onlyOwner {
        ContractInfo memory newContractInfo = ContractInfo({
            targetLongitude: targetLongitude,
            targetLatitude: targetLatitude,
            radius: radius,
            duration: duration,
            startTime: block.timestamp,
            compliant: true
        });
        contractInfo[driverAddress] = newContractInfo;
        driverName[driverAddress] = name;

        DriverInfo memory newDriverInfo = DriverInfo({
            driverAddress: driverAddress,
            name: name,
            contractInfo: newContractInfo
        });

        allDrivers.push(newDriverInfo);
    }

    function getAllDriversInfo() external view returns (DriverInfo[] memory) {
        return allDrivers;
    }

    function sendCurrentLocation(
        int currentLongitude,
        int currentLatitude
    ) external {
        ContractInfo storage info = contractInfo[msg.sender];

        console.log("Current Time:", block.timestamp);
        console.log("Start Time:", info.startTime);
        console.log("Duration:", info.duration);
        require(
            block.timestamp < info.startTime + info.duration,
            "Time duration exceeded"
        );

        int256 distance = calculateDistance(
            currentLongitude,
            currentLatitude,
            info.targetLongitude,
            info.targetLatitude
        );

        if (distance > int(info.radius)) {
            info.compliant = false;
        }
        console.log(info.compliant);
    }

    function checkCompliance(address driverAddress) external returns (bool) {
        ContractInfo storage info = contractInfo[driverAddress];

        if (
            info.compliant && block.timestamp >= info.startTime + info.duration
        ) {
            uint rewardAmount = 5;
            token.transfer(driverAddress, rewardAmount);
            emit TokenReward(driverAddress, rewardAmount);
        }

        if (block.timestamp >= info.startTime + info.duration) {
            info.compliant = true;
        }

        return info.compliant;
    }

    function calculateDistance(
        int lon1,
        int lat1,
        int lon2,
        int lat2
    ) internal pure returns (int) {
        int256 dx = (lon1 - lon2);
        int256 dy = (lat1 - lat2);
        return sqrt(dx * dx + dy * dy);
    }
}
import { useState } from "react";
// import { ChevronDownIcon } from "@heroicons/react/20/solid";
// import { Switch } from "@headlessui/react";
import { ethers } from "ethers";
import ComplianceContractABI from "../ComplianceContractABI.json";
const contractAddress = "0xABD275b4A0Fcef6Dbf78CE361E019Cd2d3457c7a";
const provider = new ethers.providers.Web3Provider(window.ethereum);
const signer = provider.getSigner();
const contract = new ethers.Contract(
  contractAddress,
  ComplianceContractABI,
  signer
);

// function classNames(...classes) {
//   return classes.filter(Boolean).join(" ");
// }

export default function CreateEmployee() {
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  const [employeeAddress, setEmployeeAddress] = useState("");
  const [latitude, setLatitude] = useState("");
  const [longitude, setLongitude] = useState("");
  const [radius, setRadius] = useState("");

  async function registerDriver(
    driverAddress,
    name,
    targetLongitude,
    targetLatitude,
    radius,
    duration
  ) {
    const tx = await contract.registerDriver(
      driverAddress,
      name,
      targetLongitude,
      targetLatitude,
      radius,
      duration
    );
    await tx.wait();
    console.log("Driver registered successfully");
  }

  const handleChange = (e) => {
    const { name, value } = e.target;
    console.log("handle change");
    console.log("Name : " + name);
    console.log("Value: " + value);
    switch (name) {
      case "first-name":
        setFirstName(value);
        break;
      case "last-name":
        setLastName(value);
        break;
      case "EmployeeAddress":
        setEmployeeAddress(value);
        break;
      case "latitude":
        setLatitude(value);
        break;
      case "longitude":
        setLongitude(value);
        break;
      case "radius":
        setRadius(value);
        break;
      default:
        break;
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    registerDriver(
      employeeAddress,
      `${firstName} ${lastName}`,
      Math.floor(parseFloat(latitude)),
      Math.floor(parseFloat(longitude)),
      Math.floor(parseFloat(radius)),
      1000
    );
    setFirstName("");
    setLastName("");
    setEmployeeAddress("");
    setLatitude("");
    setLongitude("");
    setRadius("");
  };

  return (
    <div className="isolate bg-white px-6 py-24 sm:py-32 lg:px-8">
      <div
        className="absolute inset-x-0 top-[-10rem] -z-10 transform-gpu overflow-hidden blur-3xl sm:top-[-20rem]"
        aria-hidden="true"
      >
        <div
          className="relative left-1/2 -z-10 aspect-[1155/678] w-[36.125rem] max-w-none -translate-x-1/2 rotate-[30deg] bg-gradient-to-tr from-[          style={{
            clipPath:
              "polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%)",
          }}
        />
      </div>
      <div className="mx-auto max-w-2xl text-center">
        <h2 className="text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl">
          Create Employee
        </h2>
        <p className="mt-2 text-lg leading-8 text-gray-600">
          Enter the appropriate information
        </p>
      </div>
      <form
        onSubmit={handleSubmit}
        action="        method="POST"
        className="mx-auto mt-16 max-w-xl sm:mt-20"
      >
        <div className="grid grid-cols-1 gap-x-8 gap-y-6 sm:grid-cols-2">
          <div>
            <label
              htmlFor="first-name"
              className="block text-sm font-semibold leading-6 text-gray-900"
            >
              First name
            </label>
            <div className="mt-2.5">
              <input
                type="text"
                name="first-name"
                id="first-name"
                value={firstName}
                onChange={handleChange}
                autoComplete="given-name"
                className="block w-full rounded-md border-0 px-3.5 py-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
              />
            </div>
          </div>
          <div>
            <label
              htmlFor="last-name"
              className="block text-sm font-semibold leading-6 text-gray-900"
            >
              Last name
            </label>
            <div className="mt-2.5">
              <input
                type="text"
                name="last-name"
                id="last-name"
                value={lastName}
                onChange={handleChange}
                autoComplete="family-name"
                className="block w-full rounded-md border-0 px-3.5 py-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
              />
            </div>
          </div>
          <div className="sm:col-span-2">
            <label
              htmlFor="EmployeeAddress"
              className="block text-sm font-semibold leading-6 text-gray-900"
            >
              Employee Address
            </label>
            <div className="mt-2.5">
              <input
                type="text"
                name="EmployeeAddress"
                id="EmployeeAddress"
                value={employeeAddress}
                onChange={handleChange}
                autoComplete="organization"
                className="block w-full rounded-md border-0 px-3.5 py-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
              />
            </div>
          </div>

          <div className="flex space-x-2">
            <div>
              <label
                htmlFor="latitude"
                className="block text-sm font-semibold leading-6 text-gray-900"
              >
                Latitude
              </label>
              <div className="mt-2.5">
                <input
                  type="text"
                  name="latitude"
                  id="latitude"
                  value={latitude}
                  onChange={handleChange}
                  autoComplete="given-name"
                  className="block w-21 rounded-md border-0 px-3.5 py-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                />
              </div>
            </div>
            <div>
              <label
                htmlFor="longitude"
                className="block text-sm font-semibold leading-6 text-gray-900"
              >
                Longitude
              </label>
              <div className="mt-2.5">
                <input
                  type="text"
                  name="longitude"
                  id="longitude"
                  value={longitude}
                  onChange={handleChange}
                  autoComplete="family-name"
                  className="block w-21 rounded-md border-0 px-3.5 py-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray200 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                />
              </div>
            </div>
            <div>
              <label
                htmlFor="radius"
                className="block text-sm font-semibold leading-6 text-gray-900"
              >
                Radius
              </label>
              <div className="mt-2.5">
                <input
                  type="text"
                  name="radius"
                  id="radius"
                  value={radius}
                  onChange={handleChange}
                  autoComplete="organization"
                  className="block w-20 rounded-md border-0 px-3.5 py-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                />
              </div>
            </div>
          </div>
        </div>
        <div className="mt-10">
          <button
            type="submit"
            className="block w-full rounded-md bg-indigo-600 px-3.5 py-2.5 text-center text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
          >
            Create Employee
          </button>
        </div>
      </form>
    </div>
  );
}
body{
    font-family: 'open sans';
    margin: 0;
}
ul{
    list-style-type: none;
    padding-left: 0;
    display: flex;
}
li{
    padding: 40px;
    border: 2px solid rgb(30,134,255);
    margin-right: 5px;
    border-radius: 10px;
    cursor: pointer;
}
li:hover{
    background-color: rgb(30,134,255);
    color: white;
}
li:active{
    opacity: 0.7;
}
*{
   color: }
.main-container{
   padding: 20px;
}
.block{
   display: flex;
   align-items: center;
}
.number-selected{
   background-color: rgb(30,134,255);
   color: white;
}
.bet-input{
   padding: 15px;
   border-radius: 10px;
   border: 1px solid lightgrey;
   font-size: 15pt;
   margin: 0 10px;
}
import React from 'react'
import ReactDOM from 'react-dom'
import Web3 from 'web3'
import './../css/index.css'
class App extends React.Component {
    constructor(props){
        super(props)
        this.state = {
           lastWinner: 0,
           numberOfBets: 0,
           minimumBet: 0,
           totalBet: 0,
           maxAmountOfBets: 0,
        }  
         if(typeof web3 != 'undefined'){
           console.log("Using web3 detected from external source like Metamask")
           this.web3 = new Web3(web3.currentProvider)
        }else{
           this.web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"))
        }   const MyContract = web3.eth.contract([[
            {
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "_minimumBet",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "constructor"
            },
            {
                "stateMutability": "payable",
                "type": "fallback"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "numberSelected",
                        "type": "uint256"
                    }
                ],
                "name": "bet",
                "outputs": [],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "player",
                        "type": "address"
                    }
                ],
                "name": "checkPlayerExists",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "",
                        "type": "bool"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "numberWinner",
                        "type": "uint256"
                    }
                ],
                "name": "distributePrizes",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "generateNumberWinner",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "kill",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "maxAmountOfBets",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "minimumBet",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "numberOfBets",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "owner",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    }
                ],
                "name": "playerInfo",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "amountBet",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "numberSelected",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "name": "players",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "totalBet",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "withdraw",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "stateMutability": "payable",
                "type": "receive"
            }
        ]])   
        this.state.ContractInstance = MyContract.at("0xfcaa36d67d493716b02d195ed78614239c3b53ec")
     }voteNumber(number){
      console.log(number)
   }render(){
      return (
         <div className="main-container">
            <h1>Bet for your best number and win huge amounts of Ether</h1><div className="block">
               <h4>Timer:</h4> &nbsp;
               <span ref="timer"> {this.state.timer}</span>
            </div><div className="block">
               <h4>Last winner:</h4> &nbsp;
               <span ref="last-winner">{this.state.lastWinner}</span>
            </div><hr/><h2>Vote for the next number</h2>
            <ul>
               <li onClick={() => {this.voteNumber(1)}}>1</li>
               <li onClick={() => {this.voteNumber(2)}}>2</li>
               <li onClick={() => {this.voteNumber(3)}}>3</li>
               <li onClick={() => {this.voteNumber(4)}}>4</li>
               <li onClick={() => {this.voteNumber(5)}}>5</li>
               <li onClick={() => {this.voteNumber(6)}}>6</li>
               <li onClick={() => {this.voteNumber(7)}}>7</li>
               <li onClick={() => {this.voteNumber(8)}}>8</li>
               <li onClick={() => {this.voteNumber(9)}}>9</li>
               <li onClick={() => {this.voteNumber(10)}}>10</li>
            </ul>
         </div>
      )
   }
}ReactDOM.render(
   <App />,
   document.querySelector(')
require("dotenv").config();

require("@nomiclabs/hardhat-etherscan");
require("@nomiclabs/hardhat-waffle");
require("hardhat-deploy");
require("hardhat-gas-reporter");
require("solidity-coverage");
require("./tasks/block-number");
require("./tasks/accounts");
require("solidity-coverage");

const RINKEBY_RPC_URL = process.env.RINKEBY_RPC_URL || "https://eth-rinkeby";
const PRIVATE_KEY = process.env.PRIVATE_KEY || "0x";
const ETHERSCAN_API_KEY = process.env.ETHERSCAN_API_KEY || "API_KEY";
const COINMARKETCAP_API_KEY = process.env.COINMARKETCAP_API_KEY || "API_KEY";

// This is a sample Hardhat task. To learn how to create your own go to
// https://hardhat.org/guides/create-task.html
task("accounts", "Prints the list of accounts", async (taskArgs, hre) => {
  const accounts = await hre.ethers.getSigners();

  for (const account of accounts) {
    console.log(account.address);
  }
});

// You need to export an object to set up your config
// Go to https://hardhat.org/config/ to learn more

/**
 * @type import('hardhat/config').HardhatUserConfig
 */
module.exports = {
  solidity: "0.8.0",
  networks: {
    ropsten: {
      url: process.env.ROPSTEN_URL || "",
      accounts:
        process.env.PRIVATE_KEY !== undefined ? [process.env.PRIVATE_KEY] : [],
    },
    rinkeby: {
      url: RINKEBY_RPC_URL,
      accounts: [PRIVATE_KEY],
      chainId: 4,
      gas: 2100000,
      gasPrice: 8000000000,
    },
    localhost: {
      url: "http://127.0.0.1:8545/",
      chainId: 31337,
    },
  },
  gasReporter: {
    enabled: process.env.REPORT_GAS !== undefined,
    outputFile: "gas-report.txt",
    noColors: true,
    currency: "USD",
    coinmarketcap: COINMARKETCAP_API_KEY,
  },
  etherscan: {
    apiKey: ETHERSCAN_API_KEY,
  },
  namedAccounts: {
    deployer: {
      default: 0,
    },
  },
};
// This is a script for deploying your contracts. You can adapt it to deploy
// yours, or create new ones.

const path = require("path");

async function main() {
  // This is just a convenience check
  if (network.name === "hardhat") {
    console.warn(
      "You are trying to deploy a contract to the Hardhat Network, which" +
        "gets automatically created and destroyed every time. Use the Hardhat" +
        " option '--network localhost'"
    );
  }

  // ethers is available in the global scope
  const [deployer] = await ethers.getSigners();
  console.log(
    "Deploying the contracts with the account:",
    await deployer.getAddress()
  );

  console.log("Account balance:", (await deployer.getBalance()).toString());

  const Token = await ethers.getContractFactory("Token");
  const token = await Token.deploy();
  await token.deployed();

  console.log("Token address:", token.address);

  // We also save the contract's artifacts and address in the frontend directory
  saveFrontendFiles(token);
}

function saveFrontendFiles(token) {
  const fs = require("fs");
  const contractsDir = path.join(__dirname, "..", "frontend", "src", "contracts");

  if (!fs.existsSync(contractsDir)) {
    fs.mkdirSync(contractsDir);
  }

  fs.writeFileSync(
    path.join(contractsDir, "contract-address.json"),
    JSON.stringify({ Token: token.address }, undefined, 2)
  );

  const TokenArtifact = artifacts.readArtifactSync("Token");

  fs.writeFileSync(
    path.join(contractsDir, "Token.json"),
    JSON.stringify(TokenArtifact, null, 2)
  );
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
This is where the Employer would create the smart contract and sign off the escrow payment
import React, { useState, useEffect } from "react";
import NavBar from "./components/NavBar";

function App() {
  return (
    <div>
       <NavBar />
    </div>
   
  );
  
}
export default App;
import React, { useState } from "react";
import CreateEmployee from "./CreateEmployee";

function MiddleContent({ activeLink }) {
  return (
    <div className="middle-content">
      {activeLink === "about" && <CreateEmployee />}
      {activeLink === "contact" && <h1>Hello Content</h1>}
    </div>
  );
}

function NavBar() {
  const [activeLink, setActiveLink] = useState("");

  const handleLinkClick = (link) => {
    setActiveLink(link);
  };

  return (
    <div>
      <nav className="navbar navbar-expand-lg navbar-light bg-light">
        <div className="container">
          <a className="navbar-brand" href="            Admin Page
          </a>
          <button
            className="navbar-toggler"
            type="button"
            data-toggle="collapse"
            data-target="            aria-controls="navbarNav"
            aria-expanded="false"
            aria-label="Toggle navigation"
          >
            <span className="navbar-toggler-icon"></span>
          </button>
          <div className="collapse navbar-collapse" id="navbarNav">
            <ul className="navbar-nav ml-auto">
              <li className={"nav-item " + (activeLink === "about" ? "active" : "")}>
                <a
                  className="nav-link"
                  href="                  onClick={() => handleLinkClick("about")}
                >
                  About
                </a>
              </li>
              <li className={"nav-item " + (activeLink === "contact" ? "active" : "")}>
                <a
                  className="nav-link"
                  href="                  onClick={() => handleLinkClick("contact")}
                >
                  Contact
                </a>
              </li>
            </ul>
          </div>
        </div>
      </nav>
      <MiddleContent activeLink={activeLink} />
    </div>
  );
}

export default NavBar;
import React, { useState, useEffect } from "react";
import Web3 from "web3";

function CreateEmployee(){
    const [balance, setBalance] = useState(0);

  useEffect(() => {
    initWeb3();
  }, []);

  const initWeb3 = async () => {
    try {
      if (window.ethereum) {
        window.web3 = new Web3(window.ethereum);
        await window.ethereum.enable();
      } else if (window.web3) {
        window.web3 = new Web3(window.web3.currentProvider);
      } else {
        console.error("No Ethereum provider detected. Please install MetaMask.");
      }
    } catch (error) {
      console.error("Error initializing Web3:", error);
    }
  };

  const getBalance = async () => {
    try {
      const address = '0x571B3E5FC25BDE17fB190Cc7fDF5e664823e5251';
      const abi = [ 
        {
          "inputs": [
            {
              "internalType": "int256",
              "name": "amt",
              "type": "int256"
            }
          ],
          "name": "deposit",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "name": "getBalance",
          "outputs": [
            {
              "internalType": "int256",
              "name": "",
              "type": "int256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ];

      const contract = new window.web3.eth.Contract(abi, address);

      const result = await contract.methods.getBalance().call();
      setBalance(() => result); // Use a callback function
      console.log(result);
    } catch (error) {
      console.error("Error fetching balance:", error);
    }
  };

  return (
    <div className="container d-flex flex-column align-items-center justify-content-center  vh-100">
      <form className="d-flex flex-row align-items-center ml-2 mt-4">
          <label for="getBalance">Employee Address:</label>
          <input type="text" id="getBalance" name="getBalance" />
      </form>
      <form className="d-flex flex-row align-items-center ml-2 mt-4">
        <label htmlFor="getBalance" className="ml-2">Agreed Fee:</label>
        <input type="text" id="getBalance" name="getBalance" />
      </form>
      <form className="d-flex flex-row align-items-center ml-2 mt-4">
        <label htmlFor="getBalance" className="ml-2">Time Allocated:</label>
        <input type="text" id="getBalance" name="getBalance mt-4"/>
      </form>
      <form className="d-flex flex-row align-items-center ml-2 mt-4">
        <label htmlFor="getBalance" className="ml-2">Latitude:</label>
        <input type="text" id="getBalance" name="getBalance" />
      </form>
      <form className="d-flex flex-row align-items-center ml-2 mt-4">
        <label htmlFor="getBalance" className="ml-2">Longitude:</label>
        <input type="text" id="getBalance" name="getBalance" />
      </form>
      <button className="btn btn-dark mt-4" onClick={getBalance}>Get Balance</button>
      <p className="mt-4">Balance: {balance.toString()}</p>
    </div>
  );
  

}

export default CreateEmployee;
// imports
const { ethers, run, network } = require("hardhat")

// async main
async function main() {
    const SimpleStorageFactory = await ethers.getContractFactory(
        "SimpleStorage"
    )
    console.log("Deploying SimpleStorage...")
    const simpleStorage = await SimpleStorageFactory.deploy()
    await simpleStorage.deployed()
    console.log("SimpleStorage deployed at:", simpleStorage.address)
    if (network.config.chainId === 4 && process.env.ETHERSCAN_API_KEY) {
        await simpleStorage.deployTransaction.wait(6)
        await verify(simpleStorage.address, [])
    }

    const currentValue = await simpleStorage.retrieve()
    console.log(`Current value: ${currentValue}`)

    // Update the current value
    const transactionResponse = await simpleStorage.store(7)
    await transactionResponse.wait(1)
    const updatedValue = await simpleStorage.retrieve()
    console.log(`Updated value: ${updatedValue}`)
}

async function verify(contractAddress, args) {
    console.log("Verifying contract...")
    try {
        await run("verify:verify", {
            address: contractAddress,
            constructorArguments: args,
        })
    } catch (error) {
        if (error.message.toLowerCase().includes("already verified")) {
            console.log("Contract already verified")
        } else {
            console.log(error)
        }
    }
}

// main
main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error)
        process.exit(1)
    })


//
//  Generated file. Do not edit.
//

// clang-format off



void fl_register_plugins(FlPluginRegistry* registry) {
  g_autoptr(FlPluginRegistrar) flutter_secure_storage_linux_registrar =
      fl_plugin_registry_get_registrar_for_plugin(registry, "FlutterSecureStorageLinuxPlugin");
  flutter_secure_storage_linux_plugin_register_with_registrar(flutter_secure_storage_linux_registrar);
  g_autoptr(FlPluginRegistrar) url_launcher_linux_registrar =
      fl_plugin_registry_get_registrar_for_plugin(registry, "UrlLauncherPlugin");
  url_launcher_plugin_register_with_registrar(url_launcher_linux_registrar);
}
list(APPEND FLUTTER_PLUGIN_LIST
  flutter_secure_storage_linux
  url_launcher_linux
)

list(APPEND FLUTTER_FFI_PLUGIN_LIST
)

set(PLUGIN_BUNDLED_LIBRARIES)

foreach(plugin ${FLUTTER_PLUGIN_LIST})
  add_subdirectory(flutter/ephemeral/.plugin_symlinks/${plugin}/linux plugins/${plugin})
  target_link_libraries(${BINARY_NAME} PRIVATE ${plugin}_plugin)
  list(APPEND PLUGIN_BUNDLED_LIBRARIES $<TARGET_FILE:${plugin}_plugin>)
  list(APPEND PLUGIN_BUNDLED_LIBRARIES ${${plugin}_bundled_libraries})
endforeach(plugin)

foreach(ffi_plugin ${FLUTTER_FFI_PLUGIN_LIST})
  add_subdirectory(flutter/ephemeral/.plugin_symlinks/${ffi_plugin}/linux plugins/${ffi_plugin})
  list(APPEND PLUGIN_BUNDLED_LIBRARIES ${${ffi_plugin}_bundled_libraries})
endforeach(ffi_plugin)


//
//  Generated file. Do not edit.
//

import FlutterMacOS
import Foundation

import flutter_secure_storage_macos
import geolocator_apple
import location
import path_provider_foundation
import url_launcher_macos

func RegisterGeneratedPlugins(registry: FlutterPluginRegistry) {
  FlutterSecureStoragePlugin.register(with: registry.registrar(forPlugin: "FlutterSecureStoragePlugin"))
  GeolocatorPlugin.register(with: registry.registrar(forPlugin: "GeolocatorPlugin"))
  LocationPlugin.register(with: registry.registrar(forPlugin: "LocationPlugin"))
  PathProviderPlugin.register(with: registry.registrar(forPlugin: "PathProviderPlugin"))
  UrlLauncherPlugin.register(with: registry.registrar(forPlugin: "UrlLauncherPlugin"))
}
packages:
  ansicolor:
    dependency: transitive
    description:
      name: ansicolor
      sha256: "8bf17a8ff6ea17499e40a2d2542c2f481cd7615760c6d34065cb22bfd22e6880"
      url: "https://pub.dev"
    source: hosted
    version: "2.0.2"
  archive:
    dependency: transitive
    description:
      name: archive
      sha256: "22600aa1e926be775fa5fe7e6894e7fb3df9efda8891c73f70fb3262399a432d"
      url: "https://pub.dev"
    source: hosted
    version: "3.4.10"
  args:
    dependency: transitive
    description:
      name: args
      sha256: eef6c46b622e0494a36c5a12d10d77fb4e855501a91c1b9ef9339326e58f0596
      url: "https://pub.dev"
    source: hosted
    version: "2.4.2"
  asn1lib:
    dependency: transitive
    description:
      name: asn1lib
      sha256: c9c85fedbe2188b95133cbe960e16f5f448860f7133330e272edbbca5893ddc6
      url: "https://pub.dev"
    source: hosted
    version: "1.5.2"
  async:
    dependency: transitive
    description:
      name: async
      sha256: "947bfcf187f74dbc5e146c9eb9c0f10c9f8b30743e341481c1e2ed3ecc18c20c"
      url: "https://pub.dev"
    source: hosted
    version: "2.11.0"
  boolean_selector:
    dependency: transitive
    description:
      name: boolean_selector
      sha256: "6cfb5af12253eaf2b368f07bacc5a80d1301a071c73360d746b7f2e32d762c66"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.1"
  characters:
    dependency: transitive
    description:
      name: characters
      sha256: "04a925763edad70e8443c99234dc3328f442e811f1d8fd1a72f1c8ad0f69a605"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.0"
  clock:
    dependency: transitive
    description:
      name: clock
      sha256: cb6d7f03e1de671e34607e909a7213e31d7752be4fb66a86d29fe1eb14bfb5cf
      url: "https://pub.dev"
    source: hosted
    version: "1.1.1"
  collection:
    dependency: transitive
    description:
      name: collection
      sha256: ee67cb0715911d28db6bf4af1026078bd6f0128b07a5f66fb2ed94ec6783c09a
      url: "https://pub.dev"
    source: hosted
    version: "1.18.0"
  convert:
    dependency: transitive
    description:
      name: convert
      sha256: "0f08b14755d163f6e2134cb58222dd25ea2a2ee8a195e53983d57c075324d592"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.1"
  crypto:
    dependency: transitive
    description:
      name: crypto
      sha256: ff625774173754681d66daaf4a448684fb04b78f902da9cb3d308c19cc5e8bab
      url: "https://pub.dev"
    source: hosted
    version: "3.0.3"
  csslib:
    dependency: transitive
    description:
      name: csslib
      sha256: "706b5707578e0c1b4b7550f64078f0a0f19dec3f50a178ffae7006b0a9ca58fb"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.0"
  cupertino_icons:
    dependency: "direct main"
    description:
      name: cupertino_icons
      sha256: d57953e10f9f8327ce64a508a355f0b1ec902193f66288e8cb5070e7c47eeb2d
      url: "https://pub.dev"
    source: hosted
    version: "1.0.6"
  dropdown_button2:
    dependency: "direct main"
    description:
      name: dropdown_button2
      sha256: b0fe8d49a030315e9eef6c7ac84ca964250155a6224d491c1365061bc974a9e1
      url: "https://pub.dev"
    source: hosted
    version: "2.3.9"
  eip1559:
    dependency: transitive
    description:
      name: eip1559
      sha256: c2b81ac85f3e0e71aaf558201dd9a4600f051ece7ebacd0c5d70065c9b458004
      url: "https://pub.dev"
    source: hosted
    version: "0.6.2"
  eip55:
    dependency: transitive
    description:
      name: eip55
      sha256: "213a9b86add87a5216328e8494b0ab836e401210c4d55eb5e521bd39e39169e1"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.2"
  encrypt:
    dependency: "direct main"
    description:
      name: encrypt
      sha256: "62d9aa4670cc2a8798bab89b39fc71b6dfbacf615de6cf5001fb39f7e4a996a2"
      url: "https://pub.dev"
    source: hosted
    version: "5.0.3"
  fake_async:
    dependency: transitive
    description:
      name: fake_async
      sha256: "511392330127add0b769b75a987850d136345d9227c6b94c96a04cf4a391bf78"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.1"
  ffi:
    dependency: transitive
    description:
      name: ffi
      sha256: "7bf0adc28a23d395f19f3f1eb21dd7cfd1dd9f8e1c50051c069122e6853bc878"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.0"
  fixnum:
    dependency: transitive
    description:
      name: fixnum
      sha256: "25517a4deb0c03aa0f32fd12db525856438902d9c16536311e76cdc57b31d7d1"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.0"
  flutter:
    dependency: "direct main"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_dotenv:
    dependency: "direct main"
    description:
      name: flutter_dotenv
      sha256: "9357883bdd153ab78cbf9ffa07656e336b8bbb2b5a3ca596b0b27e119f7c7d77"
      url: "https://pub.dev"
    source: hosted
    version: "5.1.0"
  flutter_lints:
    dependency: "direct dev"
    description:
      name: flutter_lints
      sha256: e2a421b7e59244faef694ba7b30562e489c2b489866e505074eb005cd7060db7
      url: "https://pub.dev"
    source: hosted
    version: "3.0.1"
  flutter_native_splash:
    dependency: "direct main"
    description:
      name: flutter_native_splash
      sha256: "558f10070f03ee71f850a78f7136ab239a67636a294a44a06b6b7345178edb1e"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.10"
  flutter_secure_storage:
    dependency: "direct main"
    description:
      name: flutter_secure_storage
      sha256: ffdbb60130e4665d2af814a0267c481bcf522c41ae2e43caf69fa0146876d685
      url: "https://pub.dev"
    source: hosted
    version: "9.0.0"
  flutter_secure_storage_linux:
    dependency: transitive
    description:
      name: flutter_secure_storage_linux
      sha256: "3d5032e314774ee0e1a7d0a9f5e2793486f0dff2dd9ef5a23f4e3fb2a0ae6a9e"
      url: "https://pub.dev"
    source: hosted
    version: "1.2.0"
  flutter_secure_storage_macos:
    dependency: transitive
    description:
      name: flutter_secure_storage_macos
      sha256: bd33935b4b628abd0b86c8ca20655c5b36275c3a3f5194769a7b3f37c905369c
      url: "https://pub.dev"
    source: hosted
    version: "3.0.1"
  flutter_secure_storage_platform_interface:
    dependency: transitive
    description:
      name: flutter_secure_storage_platform_interface
      sha256: "0d4d3a5dd4db28c96ae414d7ba3b8422fd735a8255642774803b2532c9a61d7e"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.2"
  flutter_secure_storage_web:
    dependency: transitive
    description:
      name: flutter_secure_storage_web
      sha256: "30f84f102df9dcdaa2241866a958c2ec976902ebdaa8883fbfe525f1f2f3cf20"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.2"
  flutter_secure_storage_windows:
    dependency: transitive
    description:
      name: flutter_secure_storage_windows
      sha256: "5809c66f9dd3b4b93b0a6e2e8561539405322ee767ac2f64d084e2ab5429d108"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.0"
  flutter_test:
    dependency: "direct dev"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_web_plugins:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.0"
  geolocator:
    dependency: "direct main"
    description:
      name: geolocator
      sha256: e946395fc608842bb2f6c914807e9183f86f3cb787f6b8f832753e5251036f02
      url: "https://pub.dev"
    source: hosted
    version: "10.1.0"
  geolocator_android:
    dependency: transitive
    description:
      name: geolocator_android
      sha256: "136f1c97e1903366393bda514c5d9e98843418baea52899aa45edae9af8a5cd6"
      url: "https://pub.dev"
    source: hosted
    version: "4.5.2"
  geolocator_apple:
    dependency: transitive
    description:
      name: geolocator_apple
      sha256: "79babf44b692ec5e789d322dc736ef71586056e8e6828f747c9e005456b248bf"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.5"
  geolocator_platform_interface:
    dependency: transitive
    description:
      name: geolocator_platform_interface
      sha256: "3b95ecdc36462c47dbc535dcfedea774d03ccd1f3c9864e0a02ad088eeff4508"
      url: "https://pub.dev"
    source: hosted
    version: "4.2.1"
  geolocator_web:
    dependency: transitive
    description:
      name: geolocator_web
      sha256: "102e7da05b48ca6bf0a5bda0010f886b171d1a08059f01bfe02addd0175ebece"
      url: "https://pub.dev"
    source: hosted
    version: "2.2.1"
  geolocator_windows:
    dependency: transitive
    description:
      name: geolocator_windows
      sha256: a92fae29779d5c6dc60e8411302f5221ade464968fe80a36d330e80a71f087af
      url: "https://pub.dev"
    source: hosted
    version: "0.2.2"
  html:
    dependency: transitive
    description:
      name: html
      sha256: "3a7812d5bcd2894edf53dfaf8cd640876cf6cef50a8f238745c8b8120ea74d3a"
      url: "https://pub.dev"
    source: hosted
    version: "0.15.4"
  http:
    dependency: "direct main"
    description:
      name: http
      sha256: a2bbf9d017fcced29139daa8ed2bba4ece450ab222871df93ca9eec6f80c34ba
      url: "https://pub.dev"
    source: hosted
    version: "1.2.0"
  http_parser:
    dependency: transitive
    description:
      name: http_parser
      sha256: "2aa08ce0341cc9b354a498388e30986515406668dbcc4f7c950c3e715496693b"
      url: "https://pub.dev"
    source: hosted
    version: "4.0.2"
  image:
    dependency: transitive
    description:
      name: image
      sha256: "49a0d4b0c12402853d3f227fe7c315601b238d126aa4caa5dbb2dcf99421aa4a"
      url: "https://pub.dev"
    source: hosted
    version: "4.1.6"
  js:
    dependency: transitive
    description:
      name: js
      sha256: f2c445dce49627136094980615a031419f7f3eb393237e4ecd97ac15dea343f3
      url: "https://pub.dev"
    source: hosted
    version: "0.6.7"
  json_rpc_2:
    dependency: transitive
    description:
      name: json_rpc_2
      sha256: "5e469bffa23899edacb7b22787780068d650b106a21c76db3c49218ab7ca447e"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.2"
  lints:
    dependency: transitive
    description:
      name: lints
      sha256: cbf8d4b858bb0134ef3ef87841abdf8d63bfc255c266b7bf6b39daa1085c4290
      url: "https://pub.dev"
    source: hosted
    version: "3.0.0"
  location:
    dependency: "direct main"
    description:
      name: location
      sha256: "06be54f682c9073cbfec3899eb9bc8ed90faa0e17735c9d9fa7fe426f5be1dd1"
      url: "https://pub.dev"
    source: hosted
    version: "5.0.3"
  location_platform_interface:
    dependency: transitive
    description:
      name: location_platform_interface
      sha256: "8aa1d34eeecc979d7c9fe372931d84f6d2ebbd52226a54fe1620de6fdc0753b1"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.2"
  location_web:
    dependency: transitive
    description:
      name: location_web
      sha256: ec484c66e8a4ff1ee5d044c203f4b6b71e3a0556a97b739a5bc9616de672412b
      url: "https://pub.dev"
    source: hosted
    version: "4.2.0"
  matcher:
    dependency: transitive
    description:
      name: matcher
      sha256: "1803e76e6653768d64ed8ff2e1e67bea3ad4b923eb5c56a295c3e634bad5960e"
      url: "https://pub.dev"
    source: hosted
    version: "0.12.16"
  material_color_utilities:
    dependency: transitive
    description:
      name: material_color_utilities
      sha256: "9528f2f296073ff54cb9fee677df673ace1218163c3bc7628093e7eed5203d41"
      url: "https://pub.dev"
    source: hosted
    version: "0.5.0"
  meta:
    dependency: transitive
    description:
      name: meta
      sha256: a6e590c838b18133bb482a2745ad77c5bb7715fb0451209e1a7567d416678b8e
      url: "https://pub.dev"
    source: hosted
    version: "1.10.0"
  nested:
    dependency: transitive
    description:
      name: nested
      sha256: "03bac4c528c64c95c722ec99280375a6f2fc708eec17c7b3f07253b626cd2a20"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.0"
  path:
    dependency: transitive
    description:
      name: path
      sha256: "8829d8a55c13fc0e37127c29fedf290c102f4e40ae94ada574091fe0ff96c917"
      url: "https://pub.dev"
    source: hosted
    version: "1.8.3"
  path_provider:
    dependency: transitive
    description:
      name: path_provider
      sha256: b27217933eeeba8ff24845c34003b003b2b22151de3c908d0e679e8fe1aa078b
      url: "https://pub.dev"
    source: hosted
    version: "2.1.2"
  path_provider_android:
    dependency: transitive
    description:
      name: path_provider_android
      sha256: "477184d672607c0a3bf68fbbf601805f92ef79c82b64b4d6eb318cbca4c48668"
      url: "https://pub.dev"
    source: hosted
    version: "2.2.2"
  path_provider_foundation:
    dependency: transitive
    description:
      name: path_provider_foundation
      sha256: "5a7999be66e000916500be4f15a3633ebceb8302719b47b9cc49ce924125350f"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.2"
  path_provider_linux:
    dependency: transitive
    description:
      name: path_provider_linux
      sha256: f7a1fe3a634fe7734c8d3f2766ad746ae2a2884abe22e241a8b301bf5cac3279
      url: "https://pub.dev"
    source: hosted
    version: "2.2.1"
  path_provider_platform_interface:
    dependency: transitive
    description:
      name: path_provider_platform_interface
      sha256: "88f5779f72ba699763fa3a3b06aa4bf6de76c8e5de842cf6f29e2e06476c2334"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.2"
  path_provider_windows:
    dependency: transitive
    description:
      name: path_provider_windows
      sha256: "8bc9f22eee8690981c22aa7fc602f5c85b497a6fb2ceb35ee5a5e5ed85ad8170"
      url: "https://pub.dev"
    source: hosted
    version: "2.2.1"
  petitparser:
    dependency: transitive
    description:
      name: petitparser
      sha256: c15605cd28af66339f8eb6fbe0e541bfe2d1b72d5825efc6598f3e0a31b9ad27
      url: "https://pub.dev"
    source: hosted
    version: "6.0.2"
  platform:
    dependency: transitive
    description:
      name: platform
      sha256: "12220bb4b65720483f8fa9450b4332347737cf8213dd2840d8b2c823e47243ec"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.4"
  plugin_platform_interface:
    dependency: transitive
    description:
      name: plugin_platform_interface
      sha256: "4820fbfdb9478b1ebae27888254d445073732dae3d6ea81f0b7e06d5dedc3f02"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.8"
  pointycastle:
    dependency: transitive
    description:
      name: pointycastle
      sha256: "43ac87de6e10afabc85c445745a7b799e04de84cebaa4fd7bf55a5e1e9604d29"
      url: "https://pub.dev"
    source: hosted
    version: "3.7.4"
  provider:
    dependency: "direct main"
    description:
      name: provider
      sha256: "9a96a0a19b594dbc5bf0f1f27d2bc67d5f95957359b461cd9feb44ed6ae75096"
      url: "https://pub.dev"
    source: hosted
    version: "6.1.1"
  sec:
    dependency: transitive
    description:
      name: sec
      sha256: "8bbd56df884502192a441b5f5d667265498f2f8728a282beccd9db79e215f379"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.0"
  sky_engine:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.99"
  source_span:
    dependency: transitive
    description:
      name: source_span
      sha256: "53e943d4206a5e30df338fd4c6e7a077e02254531b138a15aec3bd143c1a8b3c"
      url: "https://pub.dev"
    source: hosted
    version: "1.10.0"
  sprintf:
    dependency: transitive
    description:
      name: sprintf
      sha256: "1fc9ffe69d4df602376b52949af107d8f5703b77cda567c4d7d86a0693120f23"
      url: "https://pub.dev"
    source: hosted
    version: "7.0.0"
  stack_trace:
    dependency: transitive
    description:
      name: stack_trace
      sha256: "73713990125a6d93122541237550ee3352a2d84baad52d375a4cad2eb9b7ce0b"
      url: "https://pub.dev"
    source: hosted
    version: "1.11.1"
  stream_channel:
    dependency: transitive
    description:
      name: stream_channel
      sha256: ba2aa5d8cc609d96bbb2899c28934f9e1af5cddbd60a827822ea467161eb54e7
      url: "https://pub.dev"
    source: hosted
    version: "2.1.2"
  stream_transform:
    dependency: transitive
    description:
      name: stream_transform
      sha256: "14a00e794c7c11aa145a170587321aedce29769c08d7f58b1d141da75e3b1c6f"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.0"
  string_scanner:
    dependency: transitive
    description:
      name: string_scanner
      sha256: "556692adab6cfa87322a115640c11f13cb77b3f076ddcc5d6ae3c20242bedcde"
      url: "https://pub.dev"
    source: hosted
    version: "1.2.0"
  term_glyph:
    dependency: transitive
    description:
      name: term_glyph
      sha256: a29248a84fbb7c79282b40b8c72a1209db169a2e0542bce341da992fe1bc7e84
      url: "https://pub.dev"
    source: hosted
    version: "1.2.1"
  test_api:
    dependency: transitive
    description:
      name: test_api
      sha256: "5c2f730018264d276c20e4f1503fd1308dfbbae39ec8ee63c5236311ac06954b"
      url: "https://pub.dev"
    source: hosted
    version: "0.6.1"
  typed_data:
    dependency: transitive
    description:
      name: typed_data
      sha256: facc8d6582f16042dd49f2463ff1bd6e2c9ef9f3d5da3d9b087e244a7b564b3c
      url: "https://pub.dev"
    source: hosted
    version: "1.3.2"
  universal_io:
    dependency: transitive
    description:
      name: universal_io
      sha256: "1722b2dcc462b4b2f3ee7d188dad008b6eb4c40bbd03a3de451d82c78bba9aad"
      url: "https://pub.dev"
    source: hosted
    version: "2.2.2"
  url_launcher:
    dependency: "direct main"
    description:
      name: url_launcher
      sha256: c512655380d241a337521703af62d2c122bf7b77a46ff7dd750092aa9433499c
      url: "https://pub.dev"
    source: hosted
    version: "6.2.4"
  url_launcher_android:
    dependency: transitive
    description:
      name: url_launcher_android
      sha256: "507dc655b1d9cb5ebc756032eb785f114e415f91557b73bf60b7e201dfedeb2f"
      url: "https://pub.dev"
    source: hosted
    version: "6.2.2"
  url_launcher_ios:
    dependency: transitive
    description:
      name: url_launcher_ios
      sha256: "75bb6fe3f60070407704282a2d295630cab232991eb52542b18347a8a941df03"
      url: "https://pub.dev"
    source: hosted
    version: "6.2.4"
  url_launcher_linux:
    dependency: transitive
    description:
      name: url_launcher_linux
      sha256: ab360eb661f8879369acac07b6bb3ff09d9471155357da8443fd5d3cf7363811
      url: "https://pub.dev"
    source: hosted
    version: "3.1.1"
  url_launcher_macos:
    dependency: transitive
    description:
      name: url_launcher_macos
      sha256: b7244901ea3cf489c5335bdacda07264a6e960b1c1b1a9f91e4bc371d9e68234
      url: "https://pub.dev"
    source: hosted
    version: "3.1.0"
  url_launcher_platform_interface:
    dependency: transitive
    description:
      name: url_launcher_platform_interface
      sha256: a932c3a8082e118f80a475ce692fde89dc20fddb24c57360b96bc56f7035de1f
      url: "https://pub.dev"
    source: hosted
    version: "2.3.1"
  url_launcher_web:
    dependency: transitive
    description:
      name: url_launcher_web
      sha256: fff0932192afeedf63cdd50ecbb1bc825d31aed259f02bb8dba0f3b729a5e88b
      url: "https://pub.dev"
    source: hosted
    version: "2.2.3"
  url_launcher_windows:
    dependency: transitive
    description:
      name: url_launcher_windows
      sha256: ecf9725510600aa2bb6d7ddabe16357691b6d2805f66216a97d1b881e21beff7
      url: "https://pub.dev"
    source: hosted
    version: "3.1.1"
  uuid:
    dependency: transitive
    description:
      name: uuid
      sha256: cd210a09f7c18cbe5a02511718e0334de6559871052c90a90c0cca46a4aa81c8
      url: "https://pub.dev"
    source: hosted
    version: "4.3.3"
  vector_math:
    dependency: transitive
    description:
      name: vector_math
      sha256: "80b3257d1492ce4d091729e3a67a60407d227c27241d6927be0130c98e741803"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.4"
  wallet:
    dependency: transitive
    description:
      name: wallet
      sha256: "687fd89a16557649b26189e597792962f405797fc64113e8758eabc2c2605c32"
      url: "https://pub.dev"
    source: hosted
    version: "0.0.13"
  web:
    dependency: transitive
    description:
      name: web
      sha256: afe077240a270dcfd2aafe77602b4113645af95d0ad31128cc02bce5ac5d5152
      url: "https://pub.dev"
    source: hosted
    version: "0.3.0"
  web3dart:
    dependency: "direct main"
    description:
      name: web3dart
      sha256: "31f93cf84b8c874d7ffb363959249d7e479115fe12cf46f30b037dcad6750b22"
      url: "https://pub.dev"
    source: hosted
    version: "2.7.2"
  win32:
    dependency: transitive
    description:
      name: win32
      sha256: "464f5674532865248444b4c3daca12bd9bf2d7c47f759ce2617986e7229494a8"
      url: "https://pub.dev"
    source: hosted
    version: "5.2.0"
  xdg_directories:
    dependency: transitive
    description:
      name: xdg_directories
      sha256: faea9dee56b520b55a566385b84f2e8de55e7496104adada9962e0bd11bcff1d
      url: "https://pub.dev"
    source: hosted
    version: "1.0.4"
  xml:
    dependency: transitive
    description:
      name: xml
      sha256: b015a8ad1c488f66851d762d3090a21c600e479dc75e68328c52774040cf9226
      url: "https://pub.dev"
    source: hosted
    version: "6.5.0"
  yaml:
    dependency: transitive
    description:
      name: yaml
      sha256: "75769501ea3489fca56601ff33454fe45507ea3bfb014161abc3b43ae25989d5"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.2"
sdks:
  dart: ">=3.2.6 <4.0.0"
  flutter: ">=3.16.0"
name: flutterdapp
description: "A new Flutter project."
publish_to: 'none' 
version: 1.0.0+1

environment:
  sdk: '>=3.2.6 <4.0.0'

dependencies:
  flutter:
    sdk: flutter
  geolocator: ^10.1.0
  http: ^1.2.0
  url_launcher: ^6.0.19
  location: ^5.0.0
  provider: ^6.1.0
  encrypt: ^5.0.2
  flutter_native_splash: ^2.1.0
  dropdown_button2: ^2.3.9
  web3dart: ^2.3.3
  flutter_secure_storage: ^9.0.0
  flutter_dotenv: ^5.0.2


      cupertino_icons: ^1.0.2

dev_dependencies:
  flutter_test:
    sdk: flutter

            flutter_lints: ^3.0.1


flutter:

        uses-material-design: true
//
//  Generated file. Do not edit.
//

// clang-format off



void RegisterPlugins(flutter::PluginRegistry* registry) {
  FlutterSecureStorageWindowsPluginRegisterWithRegistrar(
      registry->GetRegistrarForPlugin("FlutterSecureStorageWindowsPlugin"));
  GeolocatorWindowsRegisterWithRegistrar(
      registry->GetRegistrarForPlugin("GeolocatorWindows"));
  UrlLauncherWindowsRegisterWithRegistrar(
      registry->GetRegistrarForPlugin("UrlLauncherWindows"));
}
list(APPEND FLUTTER_PLUGIN_LIST
  flutter_secure_storage_windows
  geolocator_windows
  url_launcher_windows
)

list(APPEND FLUTTER_FFI_PLUGIN_LIST
)

set(PLUGIN_BUNDLED_LIBRARIES)

foreach(plugin ${FLUTTER_PLUGIN_LIST})
  add_subdirectory(flutter/ephemeral/.plugin_symlinks/${plugin}/windows plugins/${plugin})
  target_link_libraries(${BINARY_NAME} PRIVATE ${plugin}_plugin)
  list(APPEND PLUGIN_BUNDLED_LIBRARIES $<TARGET_FILE:${plugin}_plugin>)
  list(APPEND PLUGIN_BUNDLED_LIBRARIES ${${plugin}_bundled_libraries})
endforeach(plugin)

foreach(ffi_plugin ${FLUTTER_FFI_PLUGIN_LIST})
  add_subdirectory(flutter/ephemeral/.plugin_symlinks/${ffi_plugin}/windows plugins/${ffi_plugin})
  list(APPEND PLUGIN_BUNDLED_LIBRARIES ${${ffi_plugin}_bundled_libraries})
endforeach(ffi_plugin)
// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 54;
	objects = {

/* Begin PBXAggregateTarget section */
		33CC111A2044C6BA0003C045 /* Flutter Assemble */ = {
			isa = PBXAggregateTarget;
			buildConfigurationList = 33CC111B2044C6BA0003C045 /* Build configuration list for PBXAggregateTarget "Flutter Assemble" */;
			buildPhases = (
				33CC111E2044C6BF0003C045 /* ShellScript */,
			);
			dependencies = (
			);
			name = "Flutter Assemble";
			productName = FLX;
		};
/* End PBXAggregateTarget section */

/* Begin PBXBuildFile section */
		3288AED8C37F97DE8E89AB50 /* Pods_RunnerTests.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 4DB559E9EB2F123A9E2A475C /* Pods_RunnerTests.framework */; };
		331C80D8294CF71000263BE5 /* RunnerTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 331C80D7294CF71000263BE5 /* RunnerTests.swift */; };
		335BBD1B22A9A15E00E9071D /* GeneratedPluginRegistrant.swift in Sources */ = {isa = PBXBuildFile; fileRef = 335BBD1A22A9A15E00E9071D /* GeneratedPluginRegistrant.swift */; };
		33CC10F12044A3C60003C045 /* AppDelegate.swift in Sources */ = {isa = PBXBuildFile; fileRef = 33CC10F02044A3C60003C045 /* AppDelegate.swift */; };
		33CC10F32044A3C60003C045 /* Assets.xcassets in Resources */ = {isa = PBXBuildFile; fileRef = 33CC10F22044A3C60003C045 /* Assets.xcassets */; };
		33CC10F62044A3C60003C045 /* MainMenu.xib in Resources */ = {isa = PBXBuildFile; fileRef = 33CC10F42044A3C60003C045 /* MainMenu.xib */; };
		33CC11132044BFA00003C045 /* MainFlutterWindow.swift in Sources */ = {isa = PBXBuildFile; fileRef = 33CC11122044BFA00003C045 /* MainFlutterWindow.swift */; };
		72D07AFBF186C996C4293A9F /* Pods_Runner.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 11454DAC818D39F55B836A13 /* Pods_Runner.framework */; };
/* End PBXBuildFile section */

/* Begin PBXContainerItemProxy section */
		331C80D9294CF71000263BE5 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 33CC10E52044A3C60003C045 /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = 33CC10EC2044A3C60003C045;
			remoteInfo = Runner;
		};
		33CC111F2044C79F0003C045 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 33CC10E52044A3C60003C045 /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = 33CC111A2044C6BA0003C045;
			remoteInfo = FLX;
		};
/* End PBXContainerItemProxy section */

/* Begin PBXCopyFilesBuildPhase section */
		33CC110E2044A8840003C045 /* Bundle Framework */ = {
			isa = PBXCopyFilesBuildPhase;
			buildActionMask = 2147483647;
			dstPath = "";
			dstSubfolderSpec = 10;
			files = (
			);
			name = "Bundle Framework";
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXCopyFilesBuildPhase section */

/* Begin PBXFileReference section */
		02585712873945B3F65458B7 /* Pods-Runner.release.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-Runner.release.xcconfig"; path = "Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"; sourceTree = "<group>"; };
		11454DAC818D39F55B836A13 /* Pods_Runner.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; includeInIndex = 0; path = Pods_Runner.framework; sourceTree = BUILT_PRODUCTS_DIR; };
		2ECC7F0EDC39B7B6CB415FD9 /* Pods-Runner.profile.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-Runner.profile.xcconfig"; path = "Target Support Files/Pods-Runner/Pods-Runner.profile.xcconfig"; sourceTree = "<group>"; };
		331C80D5294CF71000263BE5 /* RunnerTests.xctest */ = {isa = PBXFileReference; explicitFileType = wrapper.cfbundle; includeInIndex = 0; path = RunnerTests.xctest; sourceTree = BUILT_PRODUCTS_DIR; };
		331C80D7294CF71000263BE5 /* RunnerTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = RunnerTests.swift; sourceTree = "<group>"; };
		333000ED22D3DE5D00554162 /* Warnings.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; path = Warnings.xcconfig; sourceTree = "<group>"; };
		335BBD1A22A9A15E00E9071D /* GeneratedPluginRegistrant.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = GeneratedPluginRegistrant.swift; sourceTree = "<group>"; };
		33CC10ED2044A3C60003C045 /* flutterdapp.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = flutterdapp.app; sourceTree = BUILT_PRODUCTS_DIR; };
		33CC10F02044A3C60003C045 /* AppDelegate.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = AppDelegate.swift; sourceTree = "<group>"; };
		33CC10F22044A3C60003C045 /* Assets.xcassets */ = {isa = PBXFileReference; lastKnownFileType = folder.assetcatalog; name = Assets.xcassets; path = Runner/Assets.xcassets; sourceTree = "<group>"; };
		33CC10F52044A3C60003C045 /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.xib; name = Base; path = Base.lproj/MainMenu.xib; sourceTree = "<group>"; };
		33CC10F72044A3C60003C045 /* Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; name = Info.plist; path = Runner/Info.plist; sourceTree = "<group>"; };
		33CC11122044BFA00003C045 /* MainFlutterWindow.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MainFlutterWindow.swift; sourceTree = "<group>"; };
		33CEB47222A05771004F2AC0 /* Flutter-Debug.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; path = "Flutter-Debug.xcconfig"; sourceTree = "<group>"; };
		33CEB47422A05771004F2AC0 /* Flutter-Release.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; path = "Flutter-Release.xcconfig"; sourceTree = "<group>"; };
		33CEB47722A0578A004F2AC0 /* Flutter-Generated.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; name = "Flutter-Generated.xcconfig"; path = "ephemeral/Flutter-Generated.xcconfig"; sourceTree = "<group>"; };
		33E51913231747F40026EE4D /* DebugProfile.entitlements */ = {isa = PBXFileReference; lastKnownFileType = text.plist.entitlements; path = DebugProfile.entitlements; sourceTree = "<group>"; };
		33E51914231749380026EE4D /* Release.entitlements */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.entitlements; path = Release.entitlements; sourceTree = "<group>"; };
		33E5194F232828860026EE4D /* AppInfo.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; path = AppInfo.xcconfig; sourceTree = "<group>"; };
		4DB559E9EB2F123A9E2A475C /* Pods_RunnerTests.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; includeInIndex = 0; path = Pods_RunnerTests.framework; sourceTree = BUILT_PRODUCTS_DIR; };
		6F450F7E6D00A99E22E79BC5 /* Pods-RunnerTests.release.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-RunnerTests.release.xcconfig"; path = "Target Support Files/Pods-RunnerTests/Pods-RunnerTests.release.xcconfig"; sourceTree = "<group>"; };
		7AFA3C8E1D35360C0083082E /* Release.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; path = Release.xcconfig; sourceTree = "<group>"; };
		7F3A4C5DDEB935FBEB8A1BE6 /* Pods-RunnerTests.debug.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-RunnerTests.debug.xcconfig"; path = "Target Support Files/Pods-RunnerTests/Pods-RunnerTests.debug.xcconfig"; sourceTree = "<group>"; };
		9740EEB21CF90195004384FC /* Debug.xcconfig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.xcconfig; path = Debug.xcconfig; sourceTree = "<group>"; };
		E549E0F102CC8D1AFEB39FA2 /* Pods-Runner.debug.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-Runner.debug.xcconfig"; path = "Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig"; sourceTree = "<group>"; };
		FB63604852F5FFAFF45537D8 /* Pods-RunnerTests.profile.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-RunnerTests.profile.xcconfig"; path = "Target Support Files/Pods-RunnerTests/Pods-RunnerTests.profile.xcconfig"; sourceTree = "<group>"; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		331C80D2294CF70F00263BE5 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				3288AED8C37F97DE8E89AB50 /* Pods_RunnerTests.framework in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		33CC10EA2044A3C60003C045 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				72D07AFBF186C996C4293A9F /* Pods_Runner.framework in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		331C80D6294CF71000263BE5 /* RunnerTests */ = {
			isa = PBXGroup;
			children = (
				331C80D7294CF71000263BE5 /* RunnerTests.swift */,
			);
			path = RunnerTests;
			sourceTree = "<group>";
		};
		33BA886A226E78AF003329D5 /* Configs */ = {
			isa = PBXGroup;
			children = (
				33E5194F232828860026EE4D /* AppInfo.xcconfig */,
				9740EEB21CF90195004384FC /* Debug.xcconfig */,
				7AFA3C8E1D35360C0083082E /* Release.xcconfig */,
				333000ED22D3DE5D00554162 /* Warnings.xcconfig */,
			);
			path = Configs;
			sourceTree = "<group>";
		};
		33CC10E42044A3C60003C045 = {
			isa = PBXGroup;
			children = (
				33FAB671232836740065AC1E /* Runner */,
				33CEB47122A05771004F2AC0 /* Flutter */,
				331C80D6294CF71000263BE5 /* RunnerTests */,
				33CC10EE2044A3C60003C045 /* Products */,
				D73912EC22F37F3D000D13A0 /* Frameworks */,
				EAA9AED716424214676A9E8A /* Pods */,
			);
			sourceTree = "<group>";
		};
		33CC10EE2044A3C60003C045 /* Products */ = {
			isa = PBXGroup;
			children = (
				33CC10ED2044A3C60003C045 /* flutterdapp.app */,
				331C80D5294CF71000263BE5 /* RunnerTests.xctest */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		33CC11242044D66E0003C045 /* Resources */ = {
			isa = PBXGroup;
			children = (
				33CC10F22044A3C60003C045 /* Assets.xcassets */,
				33CC10F42044A3C60003C045 /* MainMenu.xib */,
				33CC10F72044A3C60003C045 /* Info.plist */,
			);
			name = Resources;
			path = ..;
			sourceTree = "<group>";
		};
		33CEB47122A05771004F2AC0 /* Flutter */ = {
			isa = PBXGroup;
			children = (
				335BBD1A22A9A15E00E9071D /* GeneratedPluginRegistrant.swift */,
				33CEB47222A05771004F2AC0 /* Flutter-Debug.xcconfig */,
				33CEB47422A05771004F2AC0 /* Flutter-Release.xcconfig */,
				33CEB47722A0578A004F2AC0 /* Flutter-Generated.xcconfig */,
			);
			path = Flutter;
			sourceTree = "<group>";
		};
		33FAB671232836740065AC1E /* Runner */ = {
			isa = PBXGroup;
			children = (
				33CC10F02044A3C60003C045 /* AppDelegate.swift */,
				33CC11122044BFA00003C045 /* MainFlutterWindow.swift */,
				33E51913231747F40026EE4D /* DebugProfile.entitlements */,
				33E51914231749380026EE4D /* Release.entitlements */,
				33CC11242044D66E0003C045 /* Resources */,
				33BA886A226E78AF003329D5 /* Configs */,
			);
			path = Runner;
			sourceTree = "<group>";
		};
		D73912EC22F37F3D000D13A0 /* Frameworks */ = {
			isa = PBXGroup;
			children = (
				11454DAC818D39F55B836A13 /* Pods_Runner.framework */,
				4DB559E9EB2F123A9E2A475C /* Pods_RunnerTests.framework */,
			);
			name = Frameworks;
			sourceTree = "<group>";
		};
		EAA9AED716424214676A9E8A /* Pods */ = {
			isa = PBXGroup;
			children = (
				E549E0F102CC8D1AFEB39FA2 /* Pods-Runner.debug.xcconfig */,
				02585712873945B3F65458B7 /* Pods-Runner.release.xcconfig */,
				2ECC7F0EDC39B7B6CB415FD9 /* Pods-Runner.profile.xcconfig */,
				7F3A4C5DDEB935FBEB8A1BE6 /* Pods-RunnerTests.debug.xcconfig */,
				6F450F7E6D00A99E22E79BC5 /* Pods-RunnerTests.release.xcconfig */,
				FB63604852F5FFAFF45537D8 /* Pods-RunnerTests.profile.xcconfig */,
			);
			name = Pods;
			path = Pods;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		331C80D4294CF70F00263BE5 /* RunnerTests */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 331C80DE294CF71000263BE5 /* Build configuration list for PBXNativeTarget "RunnerTests" */;
			buildPhases = (
				077488C50362C37A9AC6A76D /* [CP] Check Pods Manifest.lock */,
				331C80D1294CF70F00263BE5 /* Sources */,
				331C80D2294CF70F00263BE5 /* Frameworks */,
				331C80D3294CF70F00263BE5 /* Resources */,
			);
			buildRules = (
			);
			dependencies = (
				331C80DA294CF71000263BE5 /* PBXTargetDependency */,
			);
			name = RunnerTests;
			productName = RunnerTests;
			productReference = 331C80D5294CF71000263BE5 /* RunnerTests.xctest */;
			productType = "com.apple.product-type.bundle.unit-test";
		};
		33CC10EC2044A3C60003C045 /* Runner */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 33CC10FB2044A3C60003C045 /* Build configuration list for PBXNativeTarget "Runner" */;
			buildPhases = (
				EE5099AB28A6F0B5E2B49E48 /* [CP] Check Pods Manifest.lock */,
				33CC10E92044A3C60003C045 /* Sources */,
				33CC10EA2044A3C60003C045 /* Frameworks */,
				33CC10EB2044A3C60003C045 /* Resources */,
				33CC110E2044A8840003C045 /* Bundle Framework */,
				3399D490228B24CF009A79C7 /* ShellScript */,
				66F6C388C27D81A59327DDEE /* [CP] Embed Pods Frameworks */,
			);
			buildRules = (
			);
			dependencies = (
				33CC11202044C79F0003C045 /* PBXTargetDependency */,
			);
			name = Runner;
			productName = Runner;
			productReference = 33CC10ED2044A3C60003C045 /* flutterdapp.app */;
			productType = "com.apple.product-type.application";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		33CC10E52044A3C60003C045 /* Project object */ = {
			isa = PBXProject;
			attributes = {
				LastSwiftUpdateCheck = 0920;
				LastUpgradeCheck = 1430;
				ORGANIZATIONNAME = "";
				TargetAttributes = {
					331C80D4294CF70F00263BE5 = {
						CreatedOnToolsVersion = 14.0;
						TestTargetID = 33CC10EC2044A3C60003C045;
					};
					33CC10EC2044A3C60003C045 = {
						CreatedOnToolsVersion = 9.2;
						LastSwiftMigration = 1100;
						ProvisioningStyle = Automatic;
						SystemCapabilities = {
							com.apple.Sandbox = {
								enabled = 1;
							};
						};
					};
					33CC111A2044C6BA0003C045 = {
						CreatedOnToolsVersion = 9.2;
						ProvisioningStyle = Manual;
					};
				};
			};
			buildConfigurationList = 33CC10E82044A3C60003C045 /* Build configuration list for PBXProject "Runner" */;
			compatibilityVersion = "Xcode 9.3";
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = 33CC10E42044A3C60003C045;
			productRefGroup = 33CC10EE2044A3C60003C045 /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				33CC10EC2044A3C60003C045 /* Runner */,
				331C80D4294CF70F00263BE5 /* RunnerTests */,
				33CC111A2044C6BA0003C045 /* Flutter Assemble */,
			);
		};
/* End PBXProject section */

/* Begin PBXResourcesBuildPhase section */
		331C80D3294CF70F00263BE5 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		33CC10EB2044A3C60003C045 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				33CC10F32044A3C60003C045 /* Assets.xcassets in Resources */,
				33CC10F62044A3C60003C045 /* MainMenu.xib in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXResourcesBuildPhase section */

/* Begin PBXShellScriptBuildPhase section */
		077488C50362C37A9AC6A76D /* [CP] Check Pods Manifest.lock */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
			);
			inputPaths = (
				"${PODS_PODFILE_DIR_PATH}/Podfile.lock",
				"${PODS_ROOT}/Manifest.lock",
			);
			name = "[CP] Check Pods Manifest.lock";
			outputFileListPaths = (
			);
			outputPaths = (
				"$(DERIVED_FILE_DIR)/Pods-RunnerTests-checkManifestLockResult.txt",
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "diff \"${PODS_PODFILE_DIR_PATH}/Podfile.lock\" \"${PODS_ROOT}/Manifest.lock\" > /dev/null\nif [ $? != 0 ] ; then\n    			showEnvVarsInLog = 0;
		};
		3399D490228B24CF009A79C7 /* ShellScript */ = {
			isa = PBXShellScriptBuildPhase;
			alwaysOutOfDate = 1;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
			);
			inputPaths = (
			);
			outputFileListPaths = (
			);
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "echo \"$PRODUCT_NAME.app\" > \"$PROJECT_DIR\"/Flutter/ephemeral/.app_filename && \"$FLUTTER_ROOT\"/packages/flutter_tools/bin/macos_assemble.sh embed\n";
		};
		33CC111E2044C6BF0003C045 /* ShellScript */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
				Flutter/ephemeral/FlutterInputs.xcfilelist,
			);
			inputPaths = (
				Flutter/ephemeral/tripwire,
			);
			outputFileListPaths = (
				Flutter/ephemeral/FlutterOutputs.xcfilelist,
			);
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "\"$FLUTTER_ROOT\"/packages/flutter_tools/bin/macos_assemble.sh && touch Flutter/ephemeral/tripwire";
		};
		66F6C388C27D81A59327DDEE /* [CP] Embed Pods Frameworks */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
				"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-frameworks-${CONFIGURATION}-input-files.xcfilelist",
			);
			name = "[CP] Embed Pods Frameworks";
			outputFileListPaths = (
				"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-frameworks-${CONFIGURATION}-output-files.xcfilelist",
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "\"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-frameworks.sh\"\n";
			showEnvVarsInLog = 0;
		};
		EE5099AB28A6F0B5E2B49E48 /* [CP] Check Pods Manifest.lock */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
			);
			inputPaths = (
				"${PODS_PODFILE_DIR_PATH}/Podfile.lock",
				"${PODS_ROOT}/Manifest.lock",
			);
			name = "[CP] Check Pods Manifest.lock";
			outputFileListPaths = (
			);
			outputPaths = (
				"$(DERIVED_FILE_DIR)/Pods-Runner-checkManifestLockResult.txt",
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "diff \"${PODS_PODFILE_DIR_PATH}/Podfile.lock\" \"${PODS_ROOT}/Manifest.lock\" > /dev/null\nif [ $? != 0 ] ; then\n    			showEnvVarsInLog = 0;
		};
/* End PBXShellScriptBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		331C80D1294CF70F00263BE5 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				331C80D8294CF71000263BE5 /* RunnerTests.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		33CC10E92044A3C60003C045 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				33CC11132044BFA00003C045 /* MainFlutterWindow.swift in Sources */,
				33CC10F12044A3C60003C045 /* AppDelegate.swift in Sources */,
				335BBD1B22A9A15E00E9071D /* GeneratedPluginRegistrant.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin PBXTargetDependency section */
		331C80DA294CF71000263BE5 /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = 33CC10EC2044A3C60003C045 /* Runner */;
			targetProxy = 331C80D9294CF71000263BE5 /* PBXContainerItemProxy */;
		};
		33CC11202044C79F0003C045 /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = 33CC111A2044C6BA0003C045 /* Flutter Assemble */;
			targetProxy = 33CC111F2044C79F0003C045 /* PBXContainerItemProxy */;
		};
/* End PBXTargetDependency section */

/* Begin PBXVariantGroup section */
		33CC10F42044A3C60003C045 /* MainMenu.xib */ = {
			isa = PBXVariantGroup;
			children = (
				33CC10F52044A3C60003C045 /* Base */,
			);
			name = MainMenu.xib;
			path = Runner;
			sourceTree = "<group>";
		};
/* End PBXVariantGroup section */

/* Begin XCBuildConfiguration section */
		331C80DB294CF71000263BE5 /* Debug */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 7F3A4C5DDEB935FBEB8A1BE6 /* Pods-RunnerTests.debug.xcconfig */;
			buildSettings = {
				BUNDLE_LOADER = "$(TEST_HOST)";
				CURRENT_PROJECT_VERSION = 1;
				GENERATE_INFOPLIST_FILE = YES;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.example.flutterdapp.RunnerTests;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
				TEST_HOST = "$(BUILT_PRODUCTS_DIR)/flutterdapp.app/$(BUNDLE_EXECUTABLE_FOLDER_PATH)/flutterdapp";
			};
			name = Debug;
		};
		331C80DC294CF71000263BE5 /* Release */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 6F450F7E6D00A99E22E79BC5 /* Pods-RunnerTests.release.xcconfig */;
			buildSettings = {
				BUNDLE_LOADER = "$(TEST_HOST)";
				CURRENT_PROJECT_VERSION = 1;
				GENERATE_INFOPLIST_FILE = YES;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.example.flutterdapp.RunnerTests;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
				TEST_HOST = "$(BUILT_PRODUCTS_DIR)/flutterdapp.app/$(BUNDLE_EXECUTABLE_FOLDER_PATH)/flutterdapp";
			};
			name = Release;
		};
		331C80DD294CF71000263BE5 /* Profile */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = FB63604852F5FFAFF45537D8 /* Pods-RunnerTests.profile.xcconfig */;
			buildSettings = {
				BUNDLE_LOADER = "$(TEST_HOST)";
				CURRENT_PROJECT_VERSION = 1;
				GENERATE_INFOPLIST_FILE = YES;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.example.flutterdapp.RunnerTests;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
				TEST_HOST = "$(BUILT_PRODUCTS_DIR)/flutterdapp.app/$(BUNDLE_EXECUTABLE_FOLDER_PATH)/flutterdapp";
			};
			name = Profile;
		};
		338D0CE9231458BD00FA5F75 /* Profile */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 7AFA3C8E1D35360C0083082E /* Release.xcconfig */;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CODE_SIGN_IDENTITY = "-";
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 10.14;
				MTL_ENABLE_DEBUG_INFO = NO;
				SDKROOT = macosx;
				SWIFT_COMPILATION_MODE = wholemodule;
				SWIFT_OPTIMIZATION_LEVEL = "-O";
			};
			name = Profile;
		};
		338D0CEA231458BD00FA5F75 /* Profile */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 33E5194F232828860026EE4D /* AppInfo.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CLANG_ENABLE_MODULES = YES;
				CODE_SIGN_ENTITLEMENTS = Runner/DebugProfile.entitlements;
				CODE_SIGN_STYLE = Automatic;
				COMBINE_HIDPI_IMAGES = YES;
				INFOPLIST_FILE = Runner/Info.plist;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/../Frameworks",
				);
				PROVISIONING_PROFILE_SPECIFIER = "";
				SWIFT_VERSION = 5.0;
			};
			name = Profile;
		};
		338D0CEB231458BD00FA5F75 /* Profile */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Manual;
				PRODUCT_NAME = "$(TARGET_NAME)";
			};
			name = Profile;
		};
		33CC10F92044A3C60003C045 /* Debug */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 9740EEB21CF90195004384FC /* Debug.xcconfig */;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CODE_SIGN_IDENTITY = "-";
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 10.14;
				MTL_ENABLE_DEBUG_INFO = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = macosx;
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = DEBUG;
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
			};
			name = Debug;
		};
		33CC10FA2044A3C60003C045 /* Release */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 7AFA3C8E1D35360C0083082E /* Release.xcconfig */;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CODE_SIGN_IDENTITY = "-";
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 10.14;
				MTL_ENABLE_DEBUG_INFO = NO;
				SDKROOT = macosx;
				SWIFT_COMPILATION_MODE = wholemodule;
				SWIFT_OPTIMIZATION_LEVEL = "-O";
			};
			name = Release;
		};
		33CC10FC2044A3C60003C045 /* Debug */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 33E5194F232828860026EE4D /* AppInfo.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CLANG_ENABLE_MODULES = YES;
				CODE_SIGN_ENTITLEMENTS = Runner/DebugProfile.entitlements;
				CODE_SIGN_STYLE = Automatic;
				COMBINE_HIDPI_IMAGES = YES;
				INFOPLIST_FILE = Runner/Info.plist;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/../Frameworks",
				);
				PROVISIONING_PROFILE_SPECIFIER = "";
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
				SWIFT_VERSION = 5.0;
			};
			name = Debug;
		};
		33CC10FD2044A3C60003C045 /* Release */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 33E5194F232828860026EE4D /* AppInfo.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CLANG_ENABLE_MODULES = YES;
				CODE_SIGN_ENTITLEMENTS = Runner/Release.entitlements;
				CODE_SIGN_STYLE = Automatic;
				COMBINE_HIDPI_IMAGES = YES;
				INFOPLIST_FILE = Runner/Info.plist;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/../Frameworks",
				);
				PROVISIONING_PROFILE_SPECIFIER = "";
				SWIFT_VERSION = 5.0;
			};
			name = Release;
		};
		33CC111C2044C6BA0003C045 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Manual;
				PRODUCT_NAME = "$(TARGET_NAME)";
			};
			name = Debug;
		};
		33CC111D2044C6BA0003C045 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				PRODUCT_NAME = "$(TARGET_NAME)";
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		331C80DE294CF71000263BE5 /* Build configuration list for PBXNativeTarget "RunnerTests" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				331C80DB294CF71000263BE5 /* Debug */,
				331C80DC294CF71000263BE5 /* Release */,
				331C80DD294CF71000263BE5 /* Profile */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		33CC10E82044A3C60003C045 /* Build configuration list for PBXProject "Runner" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				33CC10F92044A3C60003C045 /* Debug */,
				33CC10FA2044A3C60003C045 /* Release */,
				338D0CE9231458BD00FA5F75 /* Profile */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		33CC10FB2044A3C60003C045 /* Build configuration list for PBXNativeTarget "Runner" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				33CC10FC2044A3C60003C045 /* Debug */,
				33CC10FD2044A3C60003C045 /* Release */,
				338D0CEA231458BD00FA5F75 /* Profile */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		33CC111B2044C6BA0003C045 /* Build configuration list for PBXAggregateTarget "Flutter Assemble" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				33CC111C2044C6BA0003C045 /* Debug */,
				33CC111D2044C6BA0003C045 /* Release */,
				338D0CEB231458BD00FA5F75 /* Profile */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = 33CC10E52044A3C60003C045 /* Project object */;
}
<?xml version="1.0" encoding="UTF-8"?>
<Workspace
   version = "1.0">
   <FileRef
      location = "group:Runner.xcodeproj">
   </FileRef>
   <FileRef
      location = "group:Pods/Pods.xcodeproj">
   </FileRef>
</Workspace>
import 'package:flutter/material.dart';
import 'package:flutter_native_splash/flutter_native_splash.dart';
import 'package:flutterdapp/ParentPage.dart';
import 'package:flutterdapp/parentModel.dart';
import 'package:flutterdapp/childModel.dart';
import 'package:provider/provider.dart';
import 'package:flutterdapp/ChildPage.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:dropdown_button2/dropdown_button2.dart';
import 'package:flutterdapp/NewChildPage.dart';

late String password;

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  FlutterNativeSplash.removeAfter(initialization);
  runApp(const MyApp());
}

Future initialization(BuildContext? context) async {
  await Future.delayed(Duration(seconds: 6));
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (context) => parentModel()),
        ChangeNotifierProvider(create: (context) => childModel()),
      ],
      child: MaterialApp(
        title: 'GPS Tracker Demo',
        theme: ThemeData(primarySwatch: Colors.blue),
        home: const MyHomePage(title: 'Demo'),
        debugShowCheckedModeBanner: false,
      ),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({Key? key, required this.title}) : super(key: key);
  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final TextEditingController _passwordController = TextEditingController();
  int _value = 1;
  String error = '';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            const Text(
              "GPS Tracker",
              style: TextStyle(
                fontWeight: FontWeight.bold,
                fontStyle: FontStyle.italic,
                fontSize: 50,
                color: Color.fromARGB(255, 92, 29, 240),
              ),
              textAlign: TextAlign.center,
            ),
            SizedBox(height: 20.0),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 50, vertical: 10),
              child: DropdownButton(
                dropdownColor: Color.fromARGB(255, 8, 255, 140),
                iconEnabledColor: Color.fromARGB(255, 15, 194, 9),
                value: _value,
                items: [
                  DropdownMenuItem<int>(child: Text("Admin"), value: 1),
                  DropdownMenuItem<int>(child: Text("Employee"), value: 2),
                ],
                onChanged: (value) => setState(() => _value = value as int),
              ),
            ),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 50, vertical: 10),
              child: TextFormField(
                controller: _passwordController,
                obscureText: true,
                style: const TextStyle(color: Colors.black, fontSize: 22),
                cursorColor: Colors.black,
                decoration: const InputDecoration(
                  hintText: 'Input Password',
                  border: OutlineInputBorder(),
                  labelText: "Password",
                ),
              ),
            ),
            Text("(Password must be 8 Characters)"),
            SizedBox(height: 20.0),
            Container(
              width: MediaQuery.of(context).size.width / 1.3,
              height: 50,
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(35.0),
                color: Color.fromARGB(255, 164, 16, 233),
              ),
              child: MaterialButton(
                onPressed: () {
                  if (_passwordController.text.length >= 8) {
                    if (_passwordController.text == "adminadmin") {
                      if (_value == 1) {
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                              builder: (context) => const ParentPage()),
                        );
                      }
                    } else if (_value == 2) {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                            builder: (context) => const ChildPage()),
                      );
                    } else {
                      Text("Invalid User");
                    }
                    password = _passwordController.text;
                  } else {
                    setState(() {
                      error =
                          "Invalid length: \nPlease input 8 character secret password";
                    });
                  }
                },
                child: const Text('Login',
                    style: TextStyle(
                        fontSize: 20,
                        color: Color.fromARGB(255, 255, 255, 255))),
              ),
            ),
            SizedBox(height: 20.0),
            Text(error,
                style: TextStyle(color: Colors.red[900]),
                textAlign: TextAlign.center),
            SizedBox(height: 20.0),
          ],
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:flutterdapp/parentModel.dart';
import 'package:provider/provider.dart';
import 'package:url_launcher/url_launcher.dart';

class LocationPage extends StatelessWidget {
  const LocationPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: Consumer<ParentModel>(
          builder: (context, listModel, _) => Column(
            mainAxisAlignment: MainAxisAlignment.center,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: <Widget>[
              Container(
                width: MediaQuery.of(context).size.width / 1.3,
                height: 50,
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(35.0),
                  color: Color.fromARGB(255, 151, 3, 236),
                ),
                child: MaterialButton(
                  onPressed: () async {
                    listModel.getCoordinates();
                  },
                  child: const Text(
                    'View Employee Location',
                    style: TextStyle(
                      fontSize: 20,
                      color: Color.fromARGB(255, 255, 255, 255),
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 20.0),
              Text(
                listModel.isLoading
                    ? "Employee Last known Location: \nNo Data"
                    : "Coordinates:\n${listModel.latitude}, ${listModel.longitude}",
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 20.0),
              Container(
                width: MediaQuery.of(context).size.width / 1.3,
                height: 50,
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(35.0),
                  color: Color.fromARGB(255, 223, 167, 0),
                ),
                child: MaterialButton(
                  onPressed: () async {
                    final String googleMapsUrl =
                        "https://www.google.com/maps/search/?api=1&query=${listModel.latitude},${listModel.longitude}";
                    final String appleMapsUrl =
                        "https://maps.apple.com/?q=${listModel.latitude},${listModel.longitude}";
                    if (await canLaunch(googleMapsUrl)) {
                      await launch(googleMapsUrl);
                    }
                    if (await canLaunch(appleMapsUrl)) {
                      await launch(appleMapsUrl, forceSafariVC: false);
                    } else {
                      throw "Couldn't launch URL";
                    }
                  },
                  child: const Text(
                    'View in Maps',
                    style: TextStyle(
                      fontSize: 20,
                      color: Color.fromARGB(255, 255, 255, 255),
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
import 'package:flutter/widgets.dart';
import 'package:flutter/services.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:http/http.dart';
import 'package:web3dart/web3dart.dart';
import 'package:encrypt/encrypt.dart';
import 'package:flutterdapp/Encrypt-Decrypt.dart';
import 'main.dart' as main;

class ChildModel extends ChangeNotifier {
  bool isLoading = true;
  late Client _httpClient;
  late String _contractAddress;
  late String _emp;
  late Web3Client _client;
  late EthPrivateKey _credentials;
  late DeployedContract _contract;
  late String x;
  late String y;
  late String latitude;
  late String longitude;
  late ContractFunction _readCoordinates;
  late ContractFunction _sendCoordinates;

  ChildModel() {
    initiateSetup();
  }

  Future<void> initiateSetup() async {
    _httpClient = Client();
    _client = Web3Client(
      "https://mainnet.infura.io/v3/24cd45b6689b4b3183112fd501758f2c",
      _httpClient,
    );
    await getEmp();
    await getCredentials();
    await getDeployedContract();
  }

  Future<void> getEmp() async {
    _emp = await rootBundle.loadString("../assets/emp.json");
    _contractAddress = dotenv.env['PRIVATE_KEY']!;
  }

  Future<void> getCredentials() async {
    _credentials = EthPrivateKey.fromHex(
      dotenv.env['PRIVATE_KEY']!,
    );
  }

  Future<void> getDeployedContract() async {
    _contract = DeployedContract(
      ContractAbi.fromJson(_emp, "Project"),
      EthereumAddress.fromHex(_contractAddress),
    );
    _readCoordinates = _contract.function("readCoordinates");
    _sendCoordinates = _contract.function("sendCoordinates");
  }

  getCoordinates() async {
    List readCoordinates = await _client.call(
      contract: _contract,
      function: _readCoordinates,
      params: [],
    );
    x = readCoordinates[0];
    y = readCoordinates[1];
  }

  addCoordinates(String lat, String lon) async {
    latitude = EncryptionDecryption.encryptAES(lat);
    longitude = EncryptionDecryption.encryptAES(lon);
    await _client.sendTransaction(
      _credentials,
      Transaction.callContract(
        contract: _contract,
        function: _sendCoordinates,
        parameters: [latitude, longitude],
        maxGas: 100000,
      ),
      chainId: 4,
    );
    getCoordinates();
    isLoading = false;
    notifyListeners();
  }
}
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart';
import 'package:web3dart/web3dart.dart';
import 'package:flutterdapp/Encrypt-Decrypt.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';

class ParentModel extends ChangeNotifier {
  bool isLoading = true;
  late Client httpClient;
  late String contractAddress;
  late String emp;
  late Web3Client client;
  late DeployedContract contract;
  late ContractFunction readCoordinates;

  Future<void> initiateSetup() async {
    httpClient = Client();
    client = Web3Client(
      "https://mainnet.infura.io/v3/24cd45b6689b4b3183112fd501758f2c",
      httpClient,
    );
    await getEmp();
    await getCredentials();
    await getDeployedContract();
  }

  Future<void> getEmp() async {
    await dotenv.load();
    var contractAddress = dotenv.env['CONTRACT_ADDRESS'];
    if (contractAddress != null) {
      contractAddress = contractAddress;
    } else {
      throw 'Contract address not found in .env file';
    }
  }

  Future<void> getCredentials() async {
    await dotenv.load();
    final privateKey = dotenv.env['PRIVATE_KEY'];
    if (privateKey != null) {
      var credentials = EthPrivateKey.fromHex(privateKey);
    } else {
      throw 'Private key not found in .env file';
    }
  }

  Future<void> getDeployedContract() async {
    contract = DeployedContract(
      ContractAbi.fromJson(emp, "Project"),
      EthereumAddress.fromHex(contractAddress),
    );
    readCoordinates = contract.function("readCoordinates");
  }

  void getCoordinates() async {
    try {
      await initiateSetup();
      final List<dynamic> readCoordinates = await client.call(
        contract: contract,
        function: readCoordinates,
        params: [],
      );

      var x = readCoordinates[0];
      var y = readCoordinates[1];

      if (kDebugMode) {
        print("Data retrieved:");
      }
      if (kDebugMode) {
        print("x: $x");
      }
      if (kDebugMode) {
        print("y: $y");
      }

      var latitude = EncryptionDecryption.decryptAES(x);
      var longitude = EncryptionDecryption.decryptAES(y);

      if (kDebugMode) {
        print("Decrypted coordinates:");
      }
      if (kDebugMode) {
        print("Latitude: $latitude");
      }
      if (kDebugMode) {
        print("Longitude: $longitude");
      }

      isLoading = false;
      notifyListeners();
    } catch (error) {
      if (kDebugMode) {
        print("Error fetching coordinates: $error");
      }
      isLoading = false;
      notifyListeners();
    }
  }
}
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract YourERC20Token is ERC20Permit, Ownable {
    constructor(address initialOwner)
        ERC20Permit("GeoLogixToken")
        Ownable(initialOwner)
    {
        _mint(msg.sender, 100000 * 10 ** decimals());
    }
}
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;

// Uncomment this line to use console.log
// import "hardhat/console.sol";

contract Lock {
    uint public unlockTime;
    address payable public owner;

    event Withdrawal(uint amount, uint when);

    constructor(uint _unlockTime) payable {
        require(
            block.timestamp < _unlockTime,
            "Unlock time should be in the future"
        );

        unlockTime = _unlockTime;
        owner = payable(msg.sender);
    }

    function withdraw() public {
        // Uncomment this line, and the import of "hardhat/console.sol", to print a log in your terminal
        // console.log("Unlock time is %o and block timestamp is %o", unlockTime, block.timestamp);

        require(block.timestamp >= unlockTime, "You can't withdraw yet");
        require(msg.sender == owner, "You aren't the owner");

        emit Withdrawal(address(this).balance, block.timestamp);

        owner.transfer(address(this).balance);
    }
}
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "./ECR20.sol";

contract GeoLogixRefund {
    address public owner;
    YourERC20Token public token;
   
    
    struct Driver {
        string name;
        uint256 latitude;
        uint256 longitude;
        uint256 allowedDistance;
        uint256 requiredTime;
        uint256 timeTolerance;
        uint256 refundAmount;
        uint256 rating;
        uint256 tokens;
        bool isRegistered;
        bool isInCompliance;
    }
    
    mapping(address => Driver) public drivers;
    address[] public driverAddresses;
    
    event DriverRegistered(address driverAddress);
    event CoordinateIngested(address driverAddress, uint256 latitude, uint256 longitude, uint256 timestamp);
    event ComplianceStatusChanged(address driverAddress, bool isInCompliance);

    constructor(address initialAddress) {
        owner = msg.sender;
        token = new YourERC20Token(initialAddress);
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can perform this action");
        _;
    }

    function registerDriver(address driverAddress, string memory name, uint256 latitude, uint256 longitude, uint256 allowedDistance, uint256 requiredTime, uint256 timeTolerance, uint256 refundAmount) public onlyOwner {
        require(!drivers[driverAddress].isRegistered, "Driver is already registered");
        drivers[driverAddress] = Driver(name, latitude, longitude, allowedDistance, requiredTime, timeTolerance, refundAmount, 0, 0, true, false);
        driverAddresses.push(driverAddress);
        emit DriverRegistered(driverAddress);
    }

    function updateDriverInfo(address driverAddress, uint256 newlatitude, uint256 newlongitude, uint256 newAllowedDistance, uint256 newRequiredTime, uint256 newTimeTolerance, uint256 newRefundAmount) public onlyOwner {
        require(drivers[driverAddress].isRegistered, "Driver is not registered");
        Driver storage driver = drivers[driverAddress];
        driver.latitude = newlatitude;
        driver.longitude = newlongitude;
        driver.allowedDistance = newAllowedDistance;
        driver.requiredTime = newRequiredTime;
        driver.timeTolerance = newTimeTolerance;
        driver.refundAmount = newRefundAmount;
    }

    function ingestCoordinate(uint256 latitude, uint256 longitude, uint256 timestamp) public {
        address driverAddress = msg.sender;
        Driver storage driver = drivers[driverAddress];
        require(driver.isRegistered, "Driver is not registered");

        uint256 distance = calculatitudeeDistance(latitude, longitude, driverAddress);
        bool oldComplianceStatus = driver.isInCompliance;

        if (distance > driver.allowedDistance || timestamp < driver.requiredTime || timestamp > driver.requiredTime + driver.timeTolerance) {
            driver.isInCompliance = false;
        } else {
            driver.isInCompliance = true;
        }

        if (oldComplianceStatus != driver.isInCompliance) {
            emit ComplianceStatusChanged(driverAddress, driver.isInCompliance);
        }

        emit CoordinateIngested(driverAddress, latitude, longitude, timestamp);

        if (driver.isInCompliance) {
            driver.rating += 1;
        } else {
            if (driver.rating > 0) {
                driver.rating -= 1;
            }
        }
    }

    function getDriver(address driverAddress) public view returns (string memory, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, bool) {
        Driver memory driver = drivers[driverAddress];
        require(driver.isRegistered, "Driver is not registered");
        return (driver.name, driver.latitude, driver.longitude, driver.allowedDistance, driver.requiredTime, driver.timeTolerance, driver.refundAmount, driver.rating, driver.tokens, driver.isInCompliance);
    }

    function removeDriver(address driverAddress) public onlyOwner {
        require(drivers[driverAddress].isRegistered, "Driver is not registered");
        delete drivers[driverAddress];
        for (uint i = 0; i < driverAddresses.length; i++) {
            if (driverAddresses[i] == driverAddress) {
                driverAddresses[i] = driverAddresses[driverAddresses.length - 1];
                driverAddresses.pop();
                break;
            }
        }
    }

    function refund(address driverAddress) public onlyOwner payable {
        Driver storage driver = drivers[driverAddress];
        require(driver.isRegistered, "Driver is not registered");
        require(driver.isInCompliance, "Driver is not in compliance");
        payable(driverAddress).transfer(driver.refundAmount);
    }

    function reward(address driverAddress) public onlyOwner payable {
        Driver storage driver = drivers[driverAddress];
        require(driver.isRegistered, "Driver is not registered");
        require(driver.isInCompliance, "Driver is not in compliance");
        uint256 rewardAmount = driver.rating * 2;
        token.transfer(driverAddress, rewardAmount);
        driver.tokens += rewardAmount;
    }

    function abs(int256 x) internal pure returns (uint256) {
        return x >= 0 ? uint256(x) : uint256(-x);
    }

    function calculatitudeeDistance(uint256 latitude2, uint256 longitude2, address driverAddress) internal view returns (uint256) {
        (,uint256 latitude1, uint256 longitude1,,,,,,,) = getDriver(driverAddress);
        uint256 distance = abs(int256(latitude2) - int256(latitude1)) + abs(int256(longitude2) - int256(longitude1));
        require(distance <= type(uint256).max, "Distance calculatitudeion overflow");
        return distance;
    }
}
//SPDX-License-Identifier: UNLICENSED

// Solidity files have to start with this pragma.
// It will be used by the Solidity compiler to validate its version.
pragma solidity ^0.8.20;



// This is the main building block for smart contracts.
contract Token {
    // Some string type variables to identify the token.
    string public name = "My Hardhat Token";
    string public symbol = "MHT";

    // The fixed amount of tokens, stored in an unsigned integer type variable.
    uint256 public totalSupply = 1000000;

    // An address type variable is used to store ethereum accounts.
    address public owner;

    // A mapping is a key/value map. Here we store each account's balance.
    mapping(address => uint256) balances;

    // The Transfer event helps off-chain applications understand
    // what happens within your contract.
    event Transfer(address indexed _from, address indexed _to, uint256 _value);

    /**
     * Contract initialization.
     */
    constructor() {
        // The totalSupply is assigned to the transaction sender, which is the
        // account that is deploying the contract.
        balances[msg.sender] = totalSupply;
        owner = msg.sender;
    }

    /**
     * A function to transfer tokens.
     *
     * The `external` modifier makes a function *only* callable from *outside*
     * the contract.
     */
    function transfer(address to, uint256 amount) external {
        // Check if the transaction sender has enough tokens.
        // If `require`'s first argument evaluates to `false` then the
        // transaction will revert.
        require(balances[msg.sender] >= amount, "Not enough tokens");

        // Transfer the amount.
        balances[msg.sender] -= amount;
        balances[to] += amount;

        // Notify off-chain applications of the transfer.
        emit Transfer(msg.sender, to, amount);
    }

    /**
     * Read only function to retrieve the token balance of a given account.
     *
     * The `view` modifier indicates that it doesn't modify the contract's
     * state, which allows us to call it without executing a transaction.
     */
    function balanceOf(address account) external view returns (uint256) {
        return balances[account];
    }
}
// SPDX-License-Identifier: MIT
pragma solidity >=0.5.16 <0.6.0;

contract Migrations {
  address public owner = msg.sender;
  uint public last_completed_migration;

  modifier restricted() {
    require(
      msg.sender == owner,
      "This function is restricted to the contract's owner"
    );
    _;
  }

  function setCompleted(uint completed) public restricted {
    last_completed_migration = completed;
  }
}
// SPDX-License-Identifier: MIT
pragma solidity >=0.5.16 <0.6.0;

contract RefunderContract {
    // Variables
    address public owner; // Contract owner address
    mapping(address => bool) private employees; // Mapping to track employees
    mapping(address => ContractSpec) public contractInfo; // Mapping to store contract information for employees

    // Struct to store contract information
    struct ContractSpec {
        int256 center_lat; // Latitude of the contract center
        int256 center_lon; // Longitude of the contract center
        int256 radius; // Radius of the contract
        uint8 budget; // Budget allocated to the contract
        bool status; // Current status of the contract
    }

    // Constructor to set the contract owner
    constructor() public {
        owner = msg.sender;
    }

    // Modifier to restrict access to only the contract owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Only contract owner can call this function");
        _;
    }

    // Function to add an employee and their contract information
    function addEmployee(address id, int256 lat, int256 lon, int256 rad, uint8 fund) public onlyOwner {
        require(!employees[id], "Employee already exists");
        contractInfo[id] = ContractSpec(lat, lon, rad, fund, false);
        employees[id] = true;
    }

    // Function to check if an employee is within the specified radius
    function checkPosition(int256 lat, int256 lon) public {
        require(employees[msg.sender], "Caller is not an employee");
        int256 newRadius = calculateRadius(lat, lon, msg.sender);
        contractInfo[msg.sender].status = (newRadius < contractInfo[msg.sender].radius);
    }

    // Function to pay an employee if they are within the contract radius
    function pay(address payable _to) public payable {
        require(employees[_to], "Recipient is not an employee");
        require(contractInfo[_to].status, "Employee is not within radius");
        require(msg.value == contractInfo[_to].budget, "Incorrect payment amount");
        (bool sent, ) = _to.call.value(msg.value)("");
        require(sent, "Failed to send Ether");
        contractInfo[_to].status = false;
    }

    // Function to destruct the contract, accessible only by the owner
    function kill() public onlyOwner {
        selfdestruct(msg.sender);
    }

    // Function to calculate the distance between two points
    function calculateRadius(int256 lat, int256 lon, address adr) private view returns (int256) {
        int256 x = lat - contractInfo[adr].center_lat;
        int256 y = lon - contractInfo[adr].center_lon;
        return sqrt(x * x + y * y);
    }

    // Function to calculate the square root
    function sqrt(int256 input) private pure returns (int256) {
        int256 output = input;
        if (input > 0) {
            int256 interim = (input + 1) / 2;
            while (interim < output) {
                output = interim;
                interim = (input / output * 2 + output) / 2;
            }
        }
        return output;
    }
}
const RefunderContract = artifacts.require("RefunderContract");

contract("RefunderContract", (accounts) => {
  let refunderContract;

  beforeEach(async () => {
    refunderContract = await RefunderContract.new({ from: accounts[0] });
  });

  it("should add employee", async () => {
    const employeeAddress = accounts[1];
    await refunderContract.addEmployee(
      employeeAddress,
      123,
      456,
      100,
      50,
      { from: accounts[0] }
    );
    const contractInfo = await refunderContract.contractInfo(employeeAddress);
    assert.isTrue(contractInfo.center_lat !== 0, "Employee was not added");
  });

  it("should check employee position", async () => {
    const employeeAddress = accounts[1];
    await refunderContract.addEmployee(
      employeeAddress,
      123,
      456,
      100,
      50,
      { from: accounts[0] }
    );
    await refunderContract.checkPosition(120, 450, { from: employeeAddress });
    const contractInfo = await refunderContract.contractInfo(employeeAddress);
    assert.isTrue(contractInfo.status, "Employee status not updated");
  });

  it("should pay employee", async () => {
    const employeeAddress = accounts[1];
    await refunderContract.addEmployee(
      employeeAddress,
      123,
      456,
      100,
      50,
      { from: accounts[0] }
    );
    await refunderContract.checkPosition(120, 450, { from: employeeAddress });
    await refunderContract.pay(employeeAddress, { from: accounts[0], value: 50 });
    const contractInfo = await refunderContract.contractInfo(employeeAddress);
    assert.isFalse(contractInfo.status, "Employee not paid");
  });
});
module.exports = {
  // See <http://truffleframework.com/docs/advanced/configuration>
  // for more about customizing your Truffle configuration!
  networks: {
    development: {
      host: "127.0.0.1",
      port: 7545,
      network_id: "*" // Match any network id
    },
    develop: {
      port: 8545
    }
  }
};
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract RefundByLocation {
    address public creator;
    uint256 public timeLimit;
    uint256 public gpsRange;
    
    enum State { Pending, Compliant, NonCompliant }
    mapping(address => State) public deviceStates;
    
    event DeviceAdded(address indexed device);
    event ComplianceStateChanged(address indexed device, State state);

    modifier onlyCreator() {
        require(msg.sender == creator, "Only creator can call this function.");
        _;
    }
    
    constructor(uint256 _timeLimit, uint256 _gpsRange) {
        creator = msg.sender;
        timeLimit = _timeLimit;
        gpsRange = _gpsRange;
    }

    function addDevice(address _device) external onlyCreator {
        require(deviceStates[_device] == State.Pending, "Device already added or not in pending state.");
        deviceStates[_device] = State.Compliant; // Assume compliant initially
        emit DeviceAdded(_device);
    }

    function updateCompliance(address _device, uint256 _timestamp, uint256 _latitude, uint256 _longitude) external {
        require(deviceStates[_device] == State.Compliant, "Device not in compliant state.");
        // Logic to check GPS coordinates and timestamp against specified parameters
        // If compliant, transfer refund to device, else mark as non-compliant
        if (/* logic to check compliance */) {
            // Transfer refund
        } else {
            deviceStates[_device] = State.NonCompliant;
        }
        emit ComplianceStateChanged(_device, deviceStates[_device]);
    }
}
// Solidity test file for RefundByLocation smart contract
const RefundByLocation = artifacts.require("RefundByLocation");

contract("RefundByLocation", async accounts => {
  let refundByLocation;

  before(async () => {
    refundByLocation = await RefundByLocation.new(3600, 100); // Time limit: 1 hour, GPS range: 100
  });

  it("should add device", async () => {
    await refundByLocation.addDevice(accounts[1]);
    const state = await refundByLocation.deviceStates(accounts[1]);
    assert.equal(state, 1, "Device not added successfully");
  });

  // Add more tests for other functions and scenarios
});
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Refunder Contract Information</title>
  <link href="css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
  <div class="container" style="width: 800px;">
    <div class="row">
      <div class="col-lg-12">
        <h1 class="text-center">Refunder Contract Information</h1>
        <hr>
        <br>
        <table class="table table-striped">
          <thead>
            <tr>
              <th>Employee Address</th>
              <th>Center Latitude</th>
              <th>Center Longitude</th>
              <th>Radius</th>
              <th>Budget</th>
              <th>Status</th>
            </tr>
          </thead>
          <tbody id="contractInfo">
            <!-- Contract information will be populated here -->
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script src="js/bootstrap.min.js"></script>
  <script src="js/web3.min.js"></script>
  <script src="js/truffle-contract.js"></script>
  <script src="js/app.js"></script>
</body>
</html>
const CONTRACT_ADDRESS = '0x9B5a6cc6Fd6c3ACede8374C4D939f29aC499bf11'; // Replace this with the deployed contract address

App = {
  web3Provider: null,
  contracts: {},
  account: '0x0',

  init: function() {
    return App.initWeb3();
  },

  initWeb3: function() {
    // Modern dapp browsers...
    if (window.ethereum) {
      App.web3Provider = window.ethereum;
      web3 = new Web3(window.ethereum);
      try {
        // Request account access
        window.ethereum.enable().then(function() {
          // Accounts now exposed
          web3.eth.sendTransaction({/* ... */});
        });
      } catch (error) {
        // User denied account access...
        console.error("User denied account access");
      }
    }
    // Legacy dapp browsers...
    else if (window.web3) {
      App.web3Provider = window.web3.currentProvider;
      web3 = new Web3(window.web3.currentProvider);
    }
    // If no injected web3 instance is detected, fall back to Ganache
    else {
      App.web3Provider = new Web3.providers.HttpProvider('http://localhost:7545');
      web3 = new Web3(App.web3Provider);
    }
    return App.initContract();
  },

  initContract: function() {
    // Load the contract JSON file
    $.getJSON("RefunderContract.json", function(refundContract) {
      // Instantiate a new web3 contract
      App.contracts.refundContract = new web3.eth.Contract(refundContract.abi, CONTRACT_ADDRESS);
      return App.render();
    });
  },

  // Update the render function to populate the table with contract data
  render: function() {
    var loader = $("    var content = $("    var contractTable = $("    var accountInfo = $("
    loader.show();
    content.hide();

    // Load account data
    web3.eth.getCoinbase(function(err, account) {
      if (err === null) {
        App.account = account;
        accountInfo.html("Your Account: " + account);
      }
    });

    // Load contract data
    App.contracts.refundContract.methods.getContractData().call({ from: App.account })
      .then(function(contractData) {
        // Populate the table with contract data
        var tableContent = "<tr><th>Employee Address</th><th>Center Latitude</th><th>Center Longitude</th><th>Radius</th><th>Budget</th><th>Status</th></tr>";
        for (var i = 0; i < contractData.length; i++) {
          tableContent += "<tr>";
          tableContent += "<td>" + contractData[i].employeeAddress + "</td>";
          tableContent += "<td>" + contractData[i].centerLatitude + "</td>";
          tableContent += "<td>" + contractData[i].centerLongitude + "</td>";
          tableContent += "<td>" + contractData[i].radius + "</td>";
          tableContent += "<td>" + contractData[i].budget + "</td>";
          tableContent += "<td>" + contractData[i].status + "</td>";
          tableContent += "</tr>";
        }
        contractTable.html(tableContent);
      })
      .catch(function(err) {
        console.error("Error fetching contract data:", err);
      });

    // Other code remains unchanged
  }
};


$(document).ready(function() {
  App.init();
});
const RefunderContract = artifacts.require("RefunderContract");

module.exports = function(deployer) {
  deployer.deploy(RefunderContract);
};
// SPDX-License-Identifier: MIT

pragma solidity >=0.7.0 <0.9.0;

import "hardhat/console.sol";

import "./IERC721.sol";

contract GeologixContract  {
    //structure for saving the drivers information
    struct Driver {
        uint256 complianceRating;
        uint256 tokenBalance;
        bool isRegistered;
    }

    // Mapping to store driver information using their ethereum adresses
    //mapping(uint256 => ListedToken) private idToListedToken;
    mapping(address => Driver) private drivers;

    //ERC721 token contract adress
    address public tokenAddress;

    //Event Triggered when a driver registers
    event DriverRegistered(address indexed driverAddress);

    //Event trigered when a driver's compliance rating is uodated
    event complianceRatingUpdated(address indexed driverAddress, unit256 newRating);

    //Event triggered when a driver recives tokens as a reward
    event TokensRewarded(address indexed driverAddress, unit256 amount);

    //constrctor to set the ERC721 token contract adress
    constructor(address _tokenAddress) {
        tokenAddress = _tokenAddress;
    }
    //function to be executed for the events
    //msg.sender contains the ethereum adress of the sender
    //the adress is sent for the listener
    function registerDriver() external {
        require(!drivers[msg.sender].isRegistered, "Driver already registered");

        drivers[msg.sender].isRegistered = true;
        drivers[msg.sender].complianceRating = 100;

        emit DriverRegisteres(msg.sender);
    }

    // Function to update a driver's compliance rating
    function updateComplianceRating(address driverAddress, uint256 newRating) external {
        require(drivers[driverAddress].isRegistered, "Driver not registered.");
        
        drivers[driverAddress].complianceRating = newRating;
        
        emit ComplianceRatingUpdated(driverAddress, newRating);
    }
    
    // Function to reward drivers with tokens based on compliance rating
    function rewardTokens(address driverAddress, uint256 amount) external {
        require(drivers[driverAddress].isRegistered, "Driver not registered.");
        
        // Transfer tokens from the smart contract to the driver
        IERC20 token = IERC20(tokenAddress);
        token.transfer(driverAddress, amount);
        
        // Update the driver's token balance
        drivers[driverAddress].tokenBalance += amount;
        
        emit TokensRewarded(driverAddress, amount);
    }

   
    

}
require("@nomicfoundation/hardhat-toolbox");
require('dotenv').config();

/** @type import('hardhat/config').HardhatUserConfig */
module.exports = {
defaultNetwork: "hardhat",
networks: {
  hardhat: {
    chainId: 1337
  },
  sepolia: {
    url: "https://eth-sepolia.g.alchemy.com/v2/WPft7dHoQeX-Lrj26L5m3lu-5c4I8-GO",
    accounts: [process.env.PRIVATE_KEY],
  }
},

  solidity: "0.8.20",
};
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

//importing ERC20.sol file from the openZeppelin library
import "@openzeppelin/contracts/token/ERC20/ERC20.sol"; 

contract DriverCompliance {
    struct Location {
        string latitude;
        string longitude;
        uint256 timestamp;
        //uint256 tokenBalance;
        //bool isRegistered;
    }
    //enum is user-defined data & representing diffrent level of compliance here
    enum ComplianceLevel {Bad, Good, Excellent}
    
    //creating state variables t
    ERC20 public rewardsToken;
    address public employer;
    uint256 public lock_amount = 5 ether;
    uint256 public salary = 3 ether;
    uint256 public bonus = 2 ether;
    uint256 public rewardPer_Compliance = 1 ether;
    uint256 public Location_stated;

    //mapping the drivers address to location and complianceLevel 
    mapping(address => Location) public driverLocations;
    mapping(address => ComplianceLevel) public driverCompliance;

    
    //events are a way to emit and log information about specific occurrences or 
    //actions within a contract. They are useful for notifying external systems or 
    //front-end applications about important events that occurred during contract execution.

    event StartWorking (address indexed driver);
    event ComplianceChecked(address indexed driver, ComplianceLevel level);
    event SalaryPaid(address indexed driver, uint256 amount);
    event RewardPaid(address indexed driver, uint256 amount);
    
    // take adress of the initator and the ERC20 token
    constructor(address _rewardsToken, address _employer) {
        rewardsToken = ERC20(_rewardsToken);
        employer = _employer;
    }
    // This function is used by the employer to intiate the work by setting longtude, lattitude and the time stamp
    function startWork(string memory longitude_set, string memory latitude_set, uint256 timestamp_set) external payable {
        require(msg.sender == employer, "only the employer can initiate the process");
        require(msg.value == lock_amount, "Please lock the specified amount of ETH.");
        driverLocations[msg.sender] = Location(longitude_set, latitude_set, timestamp_set);

        driverCompliance[msg.sender] = ComplianceLevel.Bad;
        //put the location and time stamp in to variable inorder to compare them with the one sent from the driver & he should set the time stamp to zero
        emit StartWorking(msg.sender);
        }
    //this function depends on function below
    function GetLocation(string memory latitude, string memory longitude, uint256 timestamp) external {
        require(driverLocations[msg.sender].timestamp == 0, "Driver already completed work");
        driverLocations[msg.sender] = Location(latitude, longitude, timestamp);
        ComplianceLevel compliance = checkCompliance(msg.sender);
        driverCompliance[msg.sender] = compliance;
        emit ComplianceChecked(msg.sender, compliance);

    }
    // what does the variable driver stands for
    function checkCompliance(address driver) internal view returns (ComplianceLevel) {
         Location memory employerLocation = driverLocations[employer];
         Location memory driverLocation = driverLocations[driver];

        if (compareStrings(employerLocation.latitude, driverLocation.latitude) &&
        compareStrings(employerLocation.longitude, driverLocation.longitude)) {
            if (employerLocation.timestamp == driverLocation.timestamp ) {
                return ComplianceLevel.Excellent;
            } else {
                return ComplianceLevel.Good;
            }
        }
        else {
            return ComplianceLevel.Bad;
            }
    }
    function compareStrings(string memory a, string memory b) internal pure returns (bool) {
        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));
    }
    // function that should be cinnected with the ehtereum payment fot the transaction
    function paySalary() external {
        ComplianceLevel compliance = driverCompliance[msg.sender];
        require(compliance != ComplianceLevel.Bad, "Driver has not fulfilled any compliance criteria.");

        if (compliance == ComplianceLevel.Excellent) {
            rewardsToken.transferFrom(employer, msg.sender, rewardPer_Compliance * 5);
        } else if (compliance == ComplianceLevel.Good) {
            rewardsToken.transferFrom(employer, msg.sender, rewardPer_Compliance * 3);
        } 

        payable(msg.sender).transfer(salary);
        emit RewardPaid(msg.sender, rewardPer_Compliance * uint256(compliance));
        emit SalaryPaid(msg.sender, salary);
}

}
const { ethers } = require("hardhat");

const rewardsTokenAddress = "0x6db049243Cd27d3b46b76adB38eD42c3b84CB83e"; // Replace with the ERC20 token contract address
const employerAddress = "0xBD6d01fa990348Fd962870fbf7DeD4C0725f85D7"; // Replace with the employer's address


async function main() {
  // Deploying the DriverCompliance contract
  const DriverCompliance = await ethers.getContractFactory("DriverCompliance");
  const driverCompliance = await DriverCompliance.deploy(
    /* Pass the addresses of rewardsToken and employer here */
    rewardsTokenAddress,
    employerAddress
  );
  //await driverCompliance.deployed();
  console.log("DriverCompliance contract deployed to:", driverCompliance.address);
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
const { ethers } = require("hardhat");
const { utils } = ethers;
const rewardsTokenAddress = "0x6db049243Cd27d3b46b76adB38eD42c3b84CB83e"; // Replace with the ERC20 token contract address
const employerAddress = "0xBD6d01fa990348Fd962870fbf7DeD4C0725f85D7"; // Replace with the employer's address

async function main() {
  // Deploying the DriverCompliance contract
  const DriverCompliance = await ethers.getContractFactory("DriverCompliance");
  const driverCompliance = await DriverCompliance.deploy(
    /* Pass the addresses of rewardsToken and employer here */
    rewardsTokenAddress,
    //employer adress as registered in ethereum
    employerAddress
  );
  //await driverCompliance.deployed();
  console.log("DriverCompliance contract deployed to:", driverCompliance.address);

  // Testing the contract functionality
  const [deployer, driver] = await ethers.getSigners();

  // Start work by the employer
  //const lockAmount = ethers.utils.parseEther("5");
  const lockAmount = utils.parseEther("5");
  await driverCompliance.connect(deployer).startWork("longitude", "latitude", Math.floor(Date.now() / 1000), { value: lockAmount });

  // Set driver's location
  await driverCompliance.connect(driver).GetLocation("latitude", "longitude", Math.floor(Date.now() / 1000));

  // Pay salary
  await driverCompliance.connect(driver).paySalary();

  console.log("Test script executed successfully.");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
// App.js
import React, { useState } from 'react';
import './App.css';

function App() {
  const [account, setAccount] = useState('');
  const [latitude, setLatitude] = useState('');
  const [longitude, setLongitude] = useState('');
  const [timestamp, setTimestamp] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    // Perform necessary actions with the input data
    console.log('Account:', account);
    console.log('Latitude:', latitude);
    console.log('Longitude:', longitude);
    console.log('Timestamp:', timestamp);
    // Reset the input fields
    setAccount('');
    setLatitude('');
    setLongitude('');
    setTimestamp('');
  };
  
  return (
    <div className="App">
      <header className= 'App-header'>
      <h1 className='title'>Employer Input</h1>
      
      <form onSubmit={handleSubmit}>
        <div className='account'>
          <label htmlFor="account" className='acnt_label'>Account:</label>
          <input
            type="text"
            id="account"
            value={account}
            onChange={(e) => setAccount(e.target.value)}
            placeholder="Enter your account"
            required
          />
        </div>
        
        <p>Put the Location required to reach here</p>
        <label htmlFor="location" className='loc_label'>Location:</label>
          <div className="location-inputs">
            <input className='latitude'
              type="text"
              id="latitude"
              value={latitude}
              onChange={(e) => setLatitude(e.target.value)}
              placeholder="Enter latitude"
              required
            />
            <input className='longitude'
              type="text"
              id="longitude"
              value={longitude}
              onChange={(e) => setLongitude(e.target.value)}
              placeholder="Enter longitude"
              required
            />
        <div/>
      <div/>   
          
        </div>
        <div className='Timestamp'>
          <p>Put the time stamp to reach the location</p>
          <label htmlFor="timestamp" className='time_label'>Timestamp:</label>
          <input
            type="text"
            id="timestamp"
            value={timestamp}
            onChange={(e) => setTimestamp(e.target.value)}
            placeholder="Enter timestamp"
            required
          />
        </div>
        <button type="submit" className='submit'>Submit</button>
      </form>
      </header>
      
    </div>
  );
}

export default App;
.App {
  text-align: left;
}
.App-header {
  background-color: black;
  min-height: 100vh;
  padding: 100px;
  padding-left: 100px;
  font-size: calc(10px + 2vmin);
  color: white;
}
.App-link {
  color: }
.title {
  color: bisque;
}
.acnt_label{
  margin-right: 10px;
}
.loc_label{
  margin-right: 10px;
}
.time_label{
  margin-right: 10px;
}
.latitude{
  margin-right: 20px;
}
.submit{
  background-color: blue;
}
import 'package:flutter/material.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/placeholder.dart';
import 'package:geologix/utils.dart';
import 'package:http/http.dart';
import 'package:web3dart/web3dart.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

const snackBar = SnackBar(
  content: Text('Yay! A SnackBar!'),
);

class _HomeScreenState extends State<HomeScreen> {
  final String rpcUrl = "";

  final String contractABI = "";

  // final EthereumAddress contractAddress = "";
  //  EthereumAddress.fromHex("");

  @override
  Widget build(BuildContext context) {
    var size = MediaQuery.of(context).size;
    var sizeH = size.height;
    var sizeW = size.width;
    return Scaffold(
      // appBar: AppBar(
      //   title: const Padding(
      //     padding: EdgeInsets.only(left: 8.0),
      //     child: Text("Geologix"),
      //   ),
      //   actions: [
      //     IconButton(onPressed: () {}, icon: const Icon(Icons.notifications))
      //   ],
      // ),
      body: SafeArea(
        child: Container(
          // height: sizeH,
          padding: const EdgeInsets.symmetric(vertical: 60, horizontal: 30),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Padding(
                padding: const EdgeInsets.only(left: 8.0),
                child: const Text(
                  " Welcome, Rediet",
                  style: TextStyle(fontSize: 30),
                ),
              ),
              const SizedBox(height: 20),
              Container(
                padding: const EdgeInsets.all(30),
                decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(20),
                    color: const Color(0xFF666EF5)),
                child: Column(
                  // mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    Row(
                      children: const [
                        Text(
                          "Total Earnings: ",
                          style: TextStyle(color: Colors.white, fontSize: 20),
                        ),
                        SizedBox(width: 10),
                        Text(
                          "48000 Eth",
                          style: TextStyle(color: Colors.white, fontSize: 16),
                        )
                      ],
                    ),
                    const SizedBox(height: 6),
                    Row(
                      children: const [
                        Text(
                          "rewards:",
                          style: TextStyle(color: Colors.white, fontSize: 20),
                        ),
                        SizedBox(width: 16),
                        Text(
                          "3",
                          style: TextStyle(color: Colors.white, fontSize: 16),
                        )
                      ],
                    ),
                    const SizedBox(height: 6),
                    Row(
                      children: const [
                        Text(
                          "penalities:",
                          style: TextStyle(color: Colors.white, fontSize: 20),
                        ),
                        SizedBox(width: 16),
                        Text(
                          "1",
                          style: TextStyle(color: Colors.white, fontSize: 16),
                        )
                      ],
                    )
                  ],
                ),
              ),
              const SizedBox(height: 40),
              Container(
                  width: double.infinity,
                  margin: EdgeInsets.symmetric(horizontal: 30),
                  child: ElevatedButton(
                    onPressed: () async {
                      await _onSendLocation(context);
                    },
                    child: Text('Send Location'),
                    style: ElevatedButton.styleFrom(
                      foregroundColor: Color(0xFF666EF5),
                      backgroundColor: Colors.white,
                      padding:
                          EdgeInsets.symmetric(horizontal: 20, vertical: 20),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(50),
                      ),
                    ),
                  ))
            ],
          ),
        ),
      ),
    );
  }

  _onSendLocation(BuildContext context) async {
    try {
      var currentLocation = await Utils.getCurrentLocation();
      if (currentLocation == null) {
        final snackBar = SnackBar(
          content: const Text('Error getting current location'),
          backgroundColor: (Colors.red.shade200),
        );
        ScaffoldMessenger.of(context).showSnackBar(snackBar);
      } else {
        final client = Web3Client(rpcUrl, Client());
        final contract = DeployedContract(
          ContractAbi.fromJson(contractABI, 'DriverCompliance'),
           contractAddress,
         );

         final credentials =
             //
             await client.credentialsFromPrivateKey('YOUR_PRIVATE_KEY');
         final ethFunction = contract.function('GetLocation');

         final result = await client.sendTransaction(
           credentials,
           Transaction.callContract(
             contract: contract,
             function: ethFunction,
             parameters: [ 
              currentLocation.longitude.toString(), // Convert longitude to string
              currentLocation.latitude.toString(), // Convert latitude to string 
              DateTime.now().millisecondsSinceEpoch, // Leave timestamp as integer
             ],
             
           ),
           fetchChainIdFromNetworkId: true,
         );
        final snackBar = SnackBar(
          content: const Text('Sending location successful'),
          backgroundColor: (Colors.green.shade200),
        );
        ScaffoldMessenger.of(context).showSnackBar(snackBar);

         print('Transaction result: ${result}');
      }
    } catch (e) {
      final snackBar = SnackBar(
        content: Text('Error sending location: $e'),
        backgroundColor: (Colors.red.shade200),
      );
      ScaffoldMessenger.of(context).showSnackBar(snackBar);
    }
  }
}
.App {
  text-align: left;
}
.App-header {
  background-color: black;
  min-height: 100vh;
  padding: 100px;
  padding-left: 100px;
  font-size: calc(10px + 2vmin);
  color: white;
}
.App-link {
  color: }
.title {
  color: bisque;
}
.emp_label{
  margin-right: 10px;
}
.loc_label{
  margin-right: 10px;
}
.time_label{
  margin-right: 10px;
}
.latitude{
  margin-right: 20px;
}
.submit{
  background-color: blue;
}
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color:   min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.Custom-button button {
  front-size: 24px;
  margin-button: 24px;  
}

input {
  front-size:24px;
}

.App-link {
  color: }

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.9;

contract RefundByGPSnTime {

    // creator of the smart contract
    address public creatorAccount = msg.sender;             // employer or owner of the smart contract
    address public driverAccount;
    address public deviceAccount;
    uint total_fund_locked = 0.00005 ether;
    uint reward = 0.00002 ether;

    // set of state of the divice
    enum DeviceState {Created, InTransit, Completed, OutOfCompliance}


    // Proprities of Device. Struct stores information about a Device
    struct DeviceCheckPoint {
        int latitude;                  //current latitude of the device
        int longitude;                 //current longitude of the device
        uint distance;                  //Remaing distance to the target destination
        uint timestamp;                 //Timestamp of the last update from the device 
        DeviceState state;              //Current compliance state of the device
    }

    // Proprities of Driver. Struct stores driver information
    struct Driver {
        address driver;
        string name;
        uint rating;
    }

    //driverr = Driver (driver, name, rating);

    // I should define the relationship between the driver and the device using a mapp

    // adding Devices into a mapping
    mapping(address => DeviceCheckPoint) public deviceReadings;     //************************* */

    // Track which address send ether and how much ether they send
    mapping(address => uint) balances;             //************************ */

    // Event emitted when the compliance state of a device is updated
    event DeviceComplianceUpdated(address indexed deviceAccount, DeviceState newState);

    // Modifier to ensure that only the createor can execute certain functions
    modifier onlyCreator() {
        require(msg.sender == creatorAccount, "Not authorized");
        _;
    }

    modifier onlyDriver() {
        require(msg.sender == driverAccount, "Not authorized");
        _;
    }

    /*//constructor to set the creator as the deployer of the contract 
    constructor(address _creatorAccount, address _driverAccount, address _deviceAccount) {
        creatorAccount = _creatorAccount;
        driverAccount = _driverAccount;
        deviceAccount = _deviceAccount;
    }*/


    // Function for the creator to add a new device with specific parameters
    function addDevice(address _deviceAccount, int _latitude, int _longitude, uint _distance) external onlyCreator {
        require(deviceReadings[_deviceAccount].timestamp == 0, "Device already added");

        deviceReadings[_deviceAccount] = DeviceCheckPoint({
            latitude: _latitude,
            longitude: _longitude,
            distance: _distance,
            timestamp : block.timestamp,
            state: DeviceState.Completed
        });
    }

    // Function for a device to update its location
    function updateDeviceLocation(int _latitude, int _longitude, uint _distance, uint _timestamp) external {
        require(msg.sender == deviceAccount, "Not Authorized");
        deviceReadings[msg.sender] = DeviceCheckPoint(
            {latitude:_latitude, 
            longitude:_longitude, 
            distance: _distance, 
            timestamp: _timestamp,
            state: DeviceState.Completed}
            );

        DeviceCheckPoint storage devicee = deviceReadings[deviceAccount];
        /*
        require(deviceReadings[_deviceAccount].timestamp != 0, "Device not registered");

        DeviceCheckPoint storage devicee = deviceReadings[_deviceAccount];
        
        // Update the device's location and timestamp
        devicee.latitude = _latitude;
        devicee.longitude = _longitude;
        devicee.distance = _distance;
        devicee.timestamp = block.timestamp;  */

        // if device has completed state
        if (devicee.state == DeviceState.Completed) {
            // driverr.rating = 1;
            // transfer salary from smart contract to Driver

            _transferEtherToDriver(payable(driverAccount));

        }
        else if (devicee.state == DeviceState.OutOfCompliance) {
            // driverr.rating = 0.5 ;
            // Return the 5000 Wei to smart contract owner
            transferEtherToCreator(reward);

        }        

    }

    // transfer from smart contract to recipient
    function _transferEtherToDriver(address payable _recipient) internal{
        _recipient.transfer(total_fund_locked);           
    }

    // send value from smart contract to the owner/creator
    function transferEtherToCreator(uint _reward) public onlyCreator {
        require((address(this).balance) >= _reward, "Insufficient balance in the contract");      
        payable(creatorAccount).transfer(_reward);           
    }

}
require("@nomicfoundation/hardhat-toolbox");

/** @type import('hardhat/config').HardhatUserConfig */
module.exports = {
  solidity: "0.8.19",
  paths: {
    artifacts: "./src/artifacts",
  },
  
  networks: {
    hardhat: {
      chainId: 1337,
    },

    // other networks
    localhost: {
      url: "http://127.0.0.1:8545",
    },
  }
};
// deploy.js
async function main() {
    const [deployer] = await ethers.getSigners();
  
    console.log('Deploying contracts with the account:', deployer.address);
  
    const RefundByGPSnTime = await ethers.getContractFactory('RefundByGPSnTime');
    const refundByGPSnTime = await RefundByGPSnTime.deploy(/* constructor arguments if any */);
  
    await refundByGPSnTime.deployed();
  
    console.log('RefundByGPSnTime deployed to:', refundByGPSnTime.address);
  }
  
  main()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error(error);
      process.exit(1);
    });
Repository Structure: '
' ├── geologix
│   ├── contracts
│   ├── mobileapp
│   ├── .gitignore
│   ├── .gitattributes
│   ├── tests
│   ├── migrations
│   └── frontend
├── README.md
└── requirements.txt
 '
' Commit History: 
{"insertions": [39], "deletions": [132], "lines": [171], "committed_datetime": ["2024-02-10 18:43:52"], "commit_count": 1} 
 Content: 
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0; // declaring the version of solidity program 

// importing contracts 
import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
//creating a contract 
contract GeoLogixSmartContract is ERC20, Ownable {
    address public employer;
    address public driver;
    uint256 public constant SALARY_AMOUNT = 0.15 ether;
    uint256 public constant REWARD_AMOUNT = 0.05 ether;
    uint256 public constant PENALIZE_AMOUNT = 0.05 ether;
    enum DriverPerformance { Excellent, Good, Average, BelowAverage, NotPerformed }
    mapping(address => DriverPerformance) public driverPerformances;
    event SalaryReleased(address indexed driver, uint256 amount);
    event RewardReleased(address indexed driver, uint256 amount);
    event PenaltyApplied(address indexed driver, uint256 amount);
    constructor()Ownable(msg.sender) ERC20("GeoLogixToken", "GLT") {
        employer = payable(0x3d3982D2C5718B6B6Ed91f0153e774f10C7fcA14);
        driver = payable(0x9065a2B36De18180E60E8115742b54116C3c7D16);
    }
    function evaluateDriver(
        int256 currentLatitude,
        int256 currentLongitude,
        uint256 timestamp
    ) external onlyOwner {
        require(timestamp == 10 minutes || timestamp == 20 minutes, "Invalid timestamp");

        // Check if the driver is at the checkpoint 
        // we have the two checkpoints (50,50) in the middle & (100,100) at the destination
        if (((uint256(50-currentLatitude))<=5 && (uint256(50-currentLongitude))<=5) || ((currentLatitude-50)<=40 && (currentLongitude-50)<=40)|| ((uint256(100-currentLatitude))<=5 && (uint256(100-currentLongitude))<=5 )) {
            payable(driver).transfer(SALARY_AMOUNT + REWARD_AMOUNT);
        }
        else if (((uint256(50-currentLatitude))<=10 && (uint256(50-currentLongitude))<=10) || ((currentLatitude-50)<=40 && (currentLongitude-50)<=40)|| (uint256(100-currentLatitude)<=10 && uint256(100-currentLongitude)<=10)) {
            payable(driver).transfer(SALARY_AMOUNT);
            
        }
        else {
            payable(driver).transfer(SALARY_AMOUNT-PENALIZE_AMOUNT);   
        }   
    }   
} 

 

const HDWalletProvider = require('@truffle/hdwallet-provider');


const MNEMONIC = 'amazing analyst chuckle between obscure ice void skill parrot strike input profit';


const INFURA_PROJECT_ID = 'ec4fe7fa399c4a5d9c53bd59e430ac0a';

module.exports = {
  networks: {
    mainnet: {
      provider: () => new HDWalletProvider(MNEMONIC, `https://mainnet.infura.io/v3/${INFURA_PROJECT_ID}`),
      network_id: 1,
      gas: 5500000,
      gasPrice: 20000000000 // 20 gwei
    }
  }
};
/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 *
 * @format
 * @flow
 */

import React, { Component, Fragment, useState, useEffect } from 'react';
import {
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
  PixelRatio,
  Image,
  Linking,
  Dimensions,
  TextInput,
  ScrollView,
  FlatList
} from 'react-native';
import ImagePicker from 'react-native-image-picker';
import { Icon, Container, Header, Left, Button, Body, Title, Right } from 'native-base';

import Spinner from './components/Spinner';
import Card from './components/Card';
import TextContainer from './components/TextContainer';

const options = {
  title: 'Select Avatar',
  storageOptions: {
    skipBackup: true,
    path: 'images',
  },
};

const { height, width } = Dimensions.get('window');

const App = () => {
  const [avatarSource, setAvatarSource] = useState(null);
  const [loading, setLoading] = useState(null);
  const [fetchLoading, setFetchLoading] = useState(true);
  const [clickUpload, setClickUpload] = useState(false);
  const [uploadStatus, setUploadStatus] = useState(false);
  const [label, setLabel] = useState('');
  const [images, setImages] = useState([]);
  const [uri, setUri] = useState('');
  const [type, setType] = useState('');
  const [name, setName] = useState('');
  const [originalName, setOriginalName] = useState('');
  const [error, setError] = useState('');

  useEffect(() => {
    const config = {
      method: 'GET',
      headers: {
        Accept: 'application/json',
      },
    };

    fetch('http://10.0.2.2:5000/images', config)
      .then((resp) => resp.json())
      .then((res) => {
        setImages(res);
        setFetchLoading(false);
      })
      .catch((err) => {
        setError(err.message);
        setFetchLoading(false);
      });
  }, []);

  const createAdminSignedContract = () => {
    const contractAddress = '0x13F68498cC89d195C12741c426348B65b74832Ff';
    const privateKey = 'a8c80296d57ea1606736a7cf5d3e07f73f9aef581c049c313e6ba53a684f660c';
    const url = 'http://127.0.0.1:7545';
    const provider = new ethers.providers.JsonRpcProvider(url);
    const signer = new ethers.Wallet(privateKey, provider);
    const contract = new Contract(contractAddress, abi, signer);
    return contract;
  };

  const selectImage = async () => {
    ImagePicker.showImagePicker(options, async (response) => {
      if (response.didCancel) {
        setError('Image upload failed');
        setLoading(null);
      } else if (response.error) {
        setError('Image upload failed');
        setLoading(null);
      } else if (response.customButton) {
        setError('Image upload failed');
        setLoading(null);
      } else {
        const source = { uri: response.uri };
        setUploadStatus(true);
        setAvatarSource(source);
        setUri(response.uri);
        setType(response.type);
        setName(response.fileName);
        setOriginalName(response.fileName);

        global.data = new FormData();

        data.append('file', {
          uri: response.uri,
          type: response.type,
          name: response.fileName,
          originalname: response.fileName,
        });

        const config = {
          method: 'POST',
          headers: {
            Accept: 'application/json',
            'Content-Type': 'multipart/form-data',
          },
          body: data,
        };
      }
    });
  };

  const upload = async () => {
    setLoading(true);
    if (!uploadStatus) {
      setLoading(null);
      return alert('Image yet to be uploaded');
    }
    if (label === '') {
      setLoading(null);
      return alert('Enter image label');
    } else {
      data.append('label', label);
      const config = {
        method: 'POST',
        headers: {
          Accept: 'application/json',
          'Content-Type': 'multipart/form-data',
        },
        body: data,
      };

      fetch('http://10.0.2.2:5000/upload', config)
        .then((resp) => resp.json())
        .then((res) => {
          setLabel(res.label);
          setHash(res.ipfsHash);
          setAddress(res.ipfsAddress);
          setTransactionHash(res.transactionHash);
          setBlockHash(res.blockHash);
          setLoading(false);
          setImages((prevState) => [...prevState, res]);
        })
        .catch((err) => {
          setLoading(false);
          setError(err.message);
        });
    }
  };

  const newUploadScreen = () => {
    return (
      <View style={{ flex: 1, marginTop: 10 }}>
        <View style={{ alignItems: 'center', flex: 1 }}>
          <View>
            <Text style={{ color: 'blue' }}>  DAPP file system using ethereum and IPFS </Text>
          </View>
          <View style={{ marginTop: '10%', flex: 1 }}>
            <TouchableOpacity onPress={() => selectImage()}>
              <View style={[styles.avatar, styles.avatarContainer, { marginBottom: 20 }]}>
                {avatarSource === null ? <Text>Select a Photo</Text> : <Image style={styles.avatar} source={avatarSource} />}
              </View>
            </TouchableOpacity>

            <View style={{ alignItems: 'center' }}>
              <TextInput
                placeholder="Label"
                onChangeText={(label) => setLabel(label)}
                style={styles.label}
                underlineColorAndroid="transparent"
              />
            </View>

            <View style={{ alignItems: 'center', marginTop: '10%' }}>
              <TouchableOpacity onPress={() => upload()} style={[styles.label, { justifyContent: 'center', backgroundColor: '                <Text style={{ fontWeight: 'bold' }}>  UPLOAD </Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
        {loading !== null ? (
          loading ? (
            <Spinner size="large" />
          ) : (
            <View>
              <TextContainer first="Label" second={label} />
              <TextContainer first="Hash" second={hash} />
              <TextContainer
                first="Address on IPFS"
                second={address}
                link={() => Linking.openURL(address)}
                style={{ color: 'blue', textDecorationLine: 'underline' }}
              />
              <TextContainer first="Transaction Hash" second={transactionHash} />
              <TextContainer first="Block Hash" second={blockHash} />
            </View>
          )
        ) : null}
      </View>
    );
  };

  return (
    <ScrollView
      style={styles.container}
      contentContainerStyle={{ flex: 1 }}
    >
      <View>
        <Header>
          <Body>
            {!clickUpload ? (
              <Title> DAPP images listing </Title>
            ) : (
              <Title> New Image upload </Title>
            )}
          </Body>
          <Right>
            <Button transparent onPress={() => setClickUpload(!clickUpload)}>
              {!!clickUpload ? (
                <Text> HOME </Text>
              ) : (
                <Text> ADD </Text>
              )}
            </Button>
          </Right>
        </Header>
      </View>
      {clickUpload ? (
        newUploadScreen()
      ) : (
        <ScrollView style={{ flex: 1 }} contentContainerStyle={{ flex: 1 }}>
          {fetchLoading ? (
            <View style={{ flex: 1, marginTop: '40%' }}>
              <Spinner size="large" />
            </View>
          ) : (
            <ScrollView style={{ flex: 1 }} contentContainerStyle={{ flex: 1 }}>
              <Fragment>
                {images.length === 0 ? (
                  <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
                    <TouchableOpacity
                      onPress={() => setClickUpload(!clickUpload)}
                      style={[styles.label, { justifyContent: 'center', backgroundColor: '                    >
                      <Text style={{ fontWeight: 'bold' }}>  ADD </Text>
                    </TouchableOpacity>
                  </View>
                ) : (
                  <FlatList
                    data={images}
                    extraData={images}
                    keyExtractor={(item, index) => index.toString()}
                    renderItem={(item, index) => {
                      return (
                        <Card
                          key={index}
                          state={this.state}
                          createdAt={item.item.createdAt}
                          address={item.item.ipfsAddress}
                          blockHash={item.item.blockHash}
                          transactionHash={item.item.transactionHash}
                          label={item.item.label}
                        />
                      );
                    }}
                  />
                )}
              </Fragment>
            </ScrollView>
          )}
        </ScrollView>
      )}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '  },
  avatarContainer: {
    borderColor: '    borderWidth: 1 / PixelRatio.get(),
    justifyContent: 'center',
    alignItems: 'center',
  },
  avatar: {
    borderRadius: width / 3,
    width: width / 2,
    height: width / 2,
  },
  label: {
    height: 40,
    width: width / 4,
    paddingLeft: '8%',
    borderWidth: 1,
    borderBottomLeftRadius: 10,
    borderBottomRightRadius: 10,
    borderTopLeftRadius: 10,
    borderTopRightRadius: 10,
  },
});

export default App;
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

contract Location {
    address public employer;
    address[] public employees;

    struct ContractStatus {
        int8 cenLat;
        int8 cenLon;
        int8 radius;
        uint8 payAmount;
        uint8 compCount;
        uint8 reqAmount;
    }

    mapping(address => ContractStatus) public empContractStatus;

    constructor () {
        employer = msg.sender;
    }

    modifier onlyEmployer() {
        require(msg.sender == employer, "Only employer has access to this function");
        _;
    }

    modifier onlyEmployee(address _addr) {
        require(msg.sender == _addr, "Only an employee has access to this function");
        bool exists = false;

        for (uint256 i = 0; i < employees.length; i++) {
            if (employees[i] == _addr) {
                exists = true;
                break;
            }
        }

        require(exists, "Only an employee has access to this function");
        _;
    }

    function sqrt(int256 input) private pure returns (int256 output) {
        int256 temp = (input + 1) / 2;
        output = input;
        while (temp < output) {
            output = temp;
            temp = ((input / output) * 2) / 2;
        }
    }

    function getDistance(int8 _lat, int8 _lon) private view returns (int256 dist) {
        int256 x = _lat - empContractStatus[msg.sender].cenLat;
        int256 y = _lon - empContractStatus[msg.sender].cenLon;
        dist = sqrt(x**2 + y**2);
        return dist;
    }

    function setAccount(
        address _empAddr,
        int8 _cenLat,
        int8 _cenLon,
        int8 _radius,
        uint8 _payAmount,
        uint8 _reqAmount
    ) public onlyEmployer() {
        employees.push(_empAddr);
        empContractStatus[_empAddr].cenLat = _cenLat;
        empContractStatus[_empAddr].cenLon = _cenLon;
        empContractStatus[_empAddr].radius = _radius;
        empContractStatus[_empAddr].payAmount = _payAmount;
        empContractStatus[_empAddr].compCount = 0;
        empContractStatus[_empAddr].reqAmount = _reqAmount;
    }

    function updateStatus(int8 _lat, int8 _lon) public {
        int256 dist = getDistance(_lat, _lon);
        if (dist < empContractStatus[msg.sender].radius) {
            empContractStatus[msg.sender].compCount += 1;
        }
    }

    function payMe(address payable _to) public payable onlyEmployee(_to) {
        require(empContractStatus[_to].compCount > empContractStatus[_to].reqAmount, "Payment conditions not met");
        bool sent = _to.send(empContractStatus[_to].payAmount);
        require(sent, "Failed to send Ether");
    }

    function getAdmin() public view returns(address) {
        return employer;
    }
}
module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:react/jsx-runtime',
    'plugin:react-hooks/recommended',
  ],
  ignorePatterns: ['dist', '.eslintrc.cjs'],
  parserOptions: { ecmaVersion: 'latest', sourceType: 'module' },
  settings: { react: { version: '18.2' } },
  plugins: ['react-refresh'],
  rules: {
    'react/jsx-no-target-blank': 'off',
    'react-refresh/only-export-components': [
      'warn',
      { allowConstantExport: true },
    ],
  },
}
// import { useState } from 'react'
// import reactLogo from './assets/react.svg'
// import viteLogo from '/vite.svg'
import React from 'react';
import RegisterDriver from './components/RegisterDriver';
import './App.css'

const App = () => {
    return (
        <div>
            <h1>Driver Registration</h1>
            <RegisterDriver />
        </div>
    );
};

export default App;
@tailwind base;
@tailwind components;
@tailwind utilities;
const hre = require("hardhat");

async function main() {
  try {
    const ownerAddress = "0x154C319c0B1612130Cb6F5499eb1Cd0dbe054779";
    const [deployer] = await hre.ethers.getSigners();
    console.log("Deploying contracts with the account:", ownerAddress);
    console.log(deployer.address);
    const GeoLogixRefund = await hre.ethers.getContractFactory("GeoLogixRefund");
    const geoLogixRefund = await GeoLogixRefund.deploy(deployer.address);
    console.log("GeoLogixRefund deployed to: ", await geoLogixRefund.getAddress());
  } catch (error) {
    console.error(error);
    process.exit(1);
  }
}

main();
import { HardhatUserConfig } from "hardhat/config";
import "@nomicfoundation/hardhat-toolbox";
import * as dotenv from 'dotenv';

dotenv.config();

const ALCHEMY_API_KEY = process.env.ALCHEMY_API_KEY;
const PRIVATE_KEY = process.env.PRIVATE_KEY;

if (!ALCHEMY_API_KEY || !PRIVATE_KEY) {
  throw new Error('Please set your Alchemy API key and private key in a .env file');
}

const config: HardhatUserConfig = {
  solidity: {
    compilers: [
      {
        version: "0.8.20",
        settings: {
          optimizer: {
            enabled: true,
            runs: 200
          }
        }
      },
      {
        version: "0.4.20"
      }
    ]
  },
  networks: {
    sepolia: {
      url: `https://eth-sepolia.g.alchemy.com/v2/${ALCHEMY_API_KEY}`,
      accounts: [PRIVATE_KEY]
    }
  }
};

export default config;
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;
import "./ECR20.sol";

contract GeoLogixRefund {
    address owner;
    YourERC20Token token;
    struct Driver {
        string name;
        uint256 lat;
        uint256 lon;
        uint256 allowedDistance;
        uint256 requiredTime;
        uint256 timeTolerance;
        uint256 refundAmount;
        uint256 rating;
        uint256 tokens;
        bool isRegistered;
        bool isInCompliance;
    }
    mapping(address => Driver) public drivers;
    address[] public driverAddresses;
    event DriverRegistered(address driverAddress);
    event CoordinateIngested(address driverAddress, uint256 lat, uint256 lon, uint256 timestamp);
    event ComplianceStatusChanged(address driverAddress, bool isInCompliance);
    constructor(address initialAddress) {
        owner = msg.sender;
        token = new YourERC20Token(initialAddress);
    }
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can perform this action");
        _;
    }
    function registerDriver(address driverAddress, string memory name, uint256 lat, uint256 lon, uint256 allowedDistance, uint256 requiredTime, uint256 timeTolerance, uint256 refundAmount) public onlyOwner {
        require(!drivers[driverAddress].isRegistered, "Driver is already registered");
        drivers[driverAddress] = Driver(name, lat, lon, allowedDistance, requiredTime, timeTolerance, refundAmount, 0, 0, true, false);
        driverAddresses.push(driverAddress);
        emit DriverRegistered(driverAddress);
    }
    function updateDriverInfo(address driverAddress, uint256 newLat, uint256 newLon, uint256 newAllowedDistance, uint256 newRequiredTime, uint256 newTimeTolerance, uint256 newRefundAmount) public onlyOwner {
        require(drivers[driverAddress].isRegistered, "Driver is not registered");
        drivers[driverAddress].lat = newLat;
        drivers[driverAddress].lon = newLon;
        drivers[driverAddress].allowedDistance = newAllowedDistance;
        drivers[driverAddress].requiredTime = newRequiredTime;
        drivers[driverAddress].timeTolerance = newTimeTolerance;
        drivers[driverAddress].refundAmount = newRefundAmount;
    }
    function ingestCoordinate(uint256 lat, uint256 lon, uint256 timestamp) public {
        address driverAddress = msg.sender;
        require(drivers[driverAddress].isRegistered, "Driver is not registered");
        uint256 distance = calculateDistance(lat, lon, driverAddress);
        bool oldComplianceStatus = drivers[driverAddress].isInCompliance;
        if (distance > drivers[driverAddress].allowedDistance || timestamp < drivers[driverAddress].requiredTime || timestamp > drivers[driverAddress].requiredTime + drivers[driverAddress].timeTolerance) {
            drivers[driverAddress].isInCompliance = false;
        } else {
            drivers[driverAddress].isInCompliance = true;
        }
        if (oldComplianceStatus != drivers[driverAddress].isInCompliance) {
            emit ComplianceStatusChanged(driverAddress, drivers[driverAddress].isInCompliance);
        }
        emit CoordinateIngested(driverAddress, lat, lon, timestamp);
        if (drivers[driverAddress].isInCompliance) {
            drivers[driverAddress].rating += 1;
        } else {
            if (drivers[driverAddress].rating > 0) {
                drivers[driverAddress].rating -= 1;
            }
        }
    }
    function getDriver(address driverAddress) public view returns (string memory, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, bool) {
        Driver memory driver = drivers[driverAddress];
        require(driver.isRegistered, "Driver is not registered");
        return (driver.name, driver.lat, driver.lon, driver.allowedDistance, driver.requiredTime, driver.timeTolerance, driver.refundAmount, driver.rating, driver.tokens, driver.isInCompliance);
    }
    function removeDriver(address driverAddress) public onlyOwner {
        require(drivers[driverAddress].isRegistered, "Driver is not registered");
        delete drivers[driverAddress];
        for (uint i = 0; i < driverAddresses.length; i++) {
            if (driverAddresses[i] == driverAddress) {
                driverAddresses[i] = driverAddresses[driverAddresses.length - 1];
                driverAddresses.pop();
                break;
            }
        }
    }
    function refund(address driverAddress) public onlyOwner payable {
        require(drivers[driverAddress].isRegistered, "Driver is not registered");
        require(drivers[driverAddress].isInCompliance, "Driver is not in compliance");
        payable(driverAddress).transfer(drivers[driverAddress].refundAmount);
    }
    function reward(address driverAddress) public onlyOwner payable {
        require(drivers[driverAddress].isRegistered, "Driver is not registered");
        require(drivers[driverAddress].isInCompliance, "Driver is not in compliance");
        uint256 rewardAmount = drivers[driverAddress].rating * 2;
        token.transfer(driverAddress, rewardAmount);
        drivers[driverAddress].tokens += rewardAmount;
    }
    function abs(int256 x) internal pure returns (uint256) {
        return x >= 0 ? uint256(x) : uint256(-x);
    }
    function calculateDistance(uint256 lat2, uint256 lon2, address driverAddress) internal view returns (uint256) {
        (,uint256 lat1, uint256 lon1,,,,,,,) = getDriver(driverAddress);
        uint256 distance = abs(int256(lat2) - int256(lat1)) + abs(int256(lon2) - int256(lon1));
        require(distance <= type(uint256).max, "Distance calculation overflow");
        return distance;
    }
}
import 'package:flutter/material.dart';
import 'package:web3dart/web3dart.dart';
import 'package:http/http.dart' as http;
import 'package:location/location.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart' as dotenv;
import 'dart:convert';
import 'package:flutter/services.dart';

void main() async {
  await dotenv.DotEnv().load();
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        body: Center(
          child: ElevatedButton(
            onPressed: ingestCoordinate,
            child: Text('Ingest Coordinate'),
          ),
        ),
      ),
    );
  }

  void ingestCoordinate() async {
    var apiUrl = dotenv.dotenv.env['ALCHEMY_API_KEY']!;
    var httpClient = http.Client();
    var ethClient = Web3Client(apiUrl, httpClient);

    var privateKey = dotenv.dotenv.env['PRIVATE_KEY']!;
    var credentials = EthPrivateKey.fromHex(privateKey);

    var contractAddress = dotenv.dotenv.env['CONTRACT_ADDRESS']!;
    String abiJson = await rootBundle.loadString('assets/GeoLogixRefund.json');
    var abi = jsonDecode(abiJson);

    var contract = DeployedContract(ContractAbi.fromJson(abi, "GeoLogixRefund"),
        EthereumAddress.fromHex(contractAddress));

    var ingestCoordinateFunction = contract.function('ingestCoordinate');

    var location = Location();
    var currentLocation = await location.getLocation();

    var lat = currentLocation.latitude!.round();
    var lon = currentLocation.longitude!.round();
    var timestamp = DateTime.now().millisecondsSinceEpoch;

    var response = await ethClient.sendTransaction(
      credentials,
      Transaction.callContract(
        contract: contract,
        function: ingestCoordinateFunction,
        parameters: [
          BigInt.from(lat),
          BigInt.from(lon),
          BigInt.from(timestamp)
        ],
      ),
    );

    print(response);
  }
}
//
//  Generated file. Do not edit.
//

import FlutterMacOS
import Foundation

import geolocator_apple
import location

func RegisterGeneratedPlugins(registry: FlutterPluginRegistry) {
  GeolocatorPlugin.register(with: registry.registrar(forPlugin: "GeolocatorPlugin"))
  LocationPlugin.register(with: registry.registrar(forPlugin: "LocationPlugin"))
}
packages:
  async:
    dependency: transitive
    description:
      name: async
      sha256: "947bfcf187f74dbc5e146c9eb9c0f10c9f8b30743e341481c1e2ed3ecc18c20c"
      url: "https://pub.dev"
    source: hosted
    version: "2.11.0"
  boolean_selector:
    dependency: transitive
    description:
      name: boolean_selector
      sha256: "6cfb5af12253eaf2b368f07bacc5a80d1301a071c73360d746b7f2e32d762c66"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.1"
  characters:
    dependency: transitive
    description:
      name: characters
      sha256: "04a925763edad70e8443c99234dc3328f442e811f1d8fd1a72f1c8ad0f69a605"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.0"
  clock:
    dependency: transitive
    description:
      name: clock
      sha256: cb6d7f03e1de671e34607e909a7213e31d7752be4fb66a86d29fe1eb14bfb5cf
      url: "https://pub.dev"
    source: hosted
    version: "1.1.1"
  collection:
    dependency: transitive
    description:
      name: collection
      sha256: ee67cb0715911d28db6bf4af1026078bd6f0128b07a5f66fb2ed94ec6783c09a
      url: "https://pub.dev"
    source: hosted
    version: "1.18.0"
  convert:
    dependency: transitive
    description:
      name: convert
      sha256: "0f08b14755d163f6e2134cb58222dd25ea2a2ee8a195e53983d57c075324d592"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.1"
  crypto:
    dependency: transitive
    description:
      name: crypto
      sha256: ff625774173754681d66daaf4a448684fb04b78f902da9cb3d308c19cc5e8bab
      url: "https://pub.dev"
    source: hosted
    version: "3.0.3"
  csslib:
    dependency: transitive
    description:
      name: csslib
      sha256: "706b5707578e0c1b4b7550f64078f0a0f19dec3f50a178ffae7006b0a9ca58fb"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.0"
  cupertino_icons:
    dependency: "direct main"
    description:
      name: cupertino_icons
      sha256: d57953e10f9f8327ce64a508a355f0b1ec902193f66288e8cb5070e7c47eeb2d
      url: "https://pub.dev"
    source: hosted
    version: "1.0.6"
  eip1559:
    dependency: transitive
    description:
      name: eip1559
      sha256: de454d6321bd753eb79116e9ec4f8df20895c2e97f9a3839a032f3a728985516
      url: "https://pub.dev"
    source: hosted
    version: "0.6.1"
  eip55:
    dependency: transitive
    description:
      name: eip55
      sha256: "213a9b86add87a5216328e8494b0ab836e401210c4d55eb5e521bd39e39169e1"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.2"
  fake_async:
    dependency: transitive
    description:
      name: fake_async
      sha256: "511392330127add0b769b75a987850d136345d9227c6b94c96a04cf4a391bf78"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.1"
  flutter:
    dependency: "direct main"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_dotenv:
    dependency: "direct main"
    description:
      name: flutter_dotenv
      sha256: "9357883bdd153ab78cbf9ffa07656e336b8bbb2b5a3ca596b0b27e119f7c7d77"
      url: "https://pub.dev"
    source: hosted
    version: "5.1.0"
  flutter_lints:
    dependency: "direct dev"
    description:
      name: flutter_lints
      sha256: a25a15ebbdfc33ab1cd26c63a6ee519df92338a9c10f122adda92938253bef04
      url: "https://pub.dev"
    source: hosted
    version: "2.0.3"
  flutter_plugin_android_lifecycle:
    dependency: transitive
    description:
      name: flutter_plugin_android_lifecycle
      sha256: b068ffc46f82a55844acfa4fdbb61fad72fa2aef0905548419d97f0f95c456da
      url: "https://pub.dev"
    source: hosted
    version: "2.0.17"
  flutter_test:
    dependency: "direct dev"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_web_plugins:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.0"
  geolocator:
    dependency: "direct main"
    description:
      name: geolocator
      sha256: b8f520252c5c66851295bcc263bc8ae7555501938427f72216ba7688702e261d
      url: "https://pub.dev"
    source: hosted
    version: "7.7.1"
  geolocator_android:
    dependency: transitive
    description:
      name: geolocator_android
      sha256: "2f84d6d68b97a3774f2c4111ac95ec5898cd9b98f12193fc3ea7fa21d7a8b46c"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.0"
  geolocator_apple:
    dependency: transitive
    description:
      name: geolocator_apple
      sha256: "1e8e398cc92151d946a4bbd34e2075885333e42d35ca33e418e7ce7b0a29991e"
      url: "https://pub.dev"
    source: hosted
    version: "1.2.2"
  geolocator_platform_interface:
    dependency: transitive
    description:
      name: geolocator_platform_interface
      sha256: "9d6f34a8a4b704d504f34acc5e52d880a7d2caedd99739902d6319179b0336d4"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.6"
  geolocator_web:
    dependency: transitive
    description:
      name: geolocator_web
      sha256: "0b9e0ec13ce2211085cae0055b3516c975bd6cfe2878a20c8f13611f1a259855"
      url: "https://pub.dev"
    source: hosted
    version: "2.0.6"
  google_maps:
    dependency: transitive
    description:
      name: google_maps
      sha256: "555d5d736339b0478e821167ac521c810d7b51c3b2734e6802a9f046b64ea37a"
      url: "https://pub.dev"
    source: hosted
    version: "6.3.0"
  google_maps_flutter:
    dependency: "direct main"
    description:
      name: google_maps_flutter
      sha256: ae66fef3e71261d7df2eff29b2a119e190b2884325ecaa55321b1e17b5504066
      url: "https://pub.dev"
    source: hosted
    version: "2.5.3"
  google_maps_flutter_android:
    dependency: transitive
    description:
      name: google_maps_flutter_android
      sha256: "714530f865f13bb3b9505c58821c3baed5d247a871724acf5d2ea5808fbed02c"
      url: "https://pub.dev"
    source: hosted
    version: "2.6.2"
  google_maps_flutter_ios:
    dependency: transitive
    description:
      name: google_maps_flutter_ios
      sha256: b644d205c235f85dc60e22f46172a868b1cd642afd5a52b3808c789e461b025a
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  google_maps_flutter_platform_interface:
    dependency: transitive
    description:
      name: google_maps_flutter_platform_interface
      sha256: "6060779f020638a8eedeb0fb14234818e5fa32ec45a4653d6428ab436e2bbc64"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.3"
  google_maps_flutter_web:
    dependency: transitive
    description:
      name: google_maps_flutter_web
      sha256: "6245721c160d6f531c1ef568cf9bef8d660cd585a982aa75121269030163785a"
      url: "https://pub.dev"
    source: hosted
    version: "0.5.4+3"
  html:
    dependency: transitive
    description:
      name: html
      sha256: "3a7812d5bcd2894edf53dfaf8cd640876cf6cef50a8f238745c8b8120ea74d3a"
      url: "https://pub.dev"
    source: hosted
    version: "0.15.4"
  http:
    dependency: "direct main"
    description:
      name: http
      sha256: "5895291c13fa8a3bd82e76d5627f69e0d85ca6a30dcac95c4ea19a5d555879c2"
      url: "https://pub.dev"
    source: hosted
    version: "0.13.6"
  http_parser:
    dependency: transitive
    description:
      name: http_parser
      sha256: "2aa08ce0341cc9b354a498388e30986515406668dbcc4f7c950c3e715496693b"
      url: "https://pub.dev"
    source: hosted
    version: "4.0.2"
  js:
    dependency: transitive
    description:
      name: js
      sha256: f2c445dce49627136094980615a031419f7f3eb393237e4ecd97ac15dea343f3
      url: "https://pub.dev"
    source: hosted
    version: "0.6.7"
  js_wrapping:
    dependency: transitive
    description:
      name: js_wrapping
      sha256: e385980f7c76a8c1c9a560dfb623b890975841542471eade630b2871d243851c
      url: "https://pub.dev"
    source: hosted
    version: "0.7.4"
  json_rpc_2:
    dependency: transitive
    description:
      name: json_rpc_2
      sha256: "5e469bffa23899edacb7b22787780068d650b106a21c76db3c49218ab7ca447e"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.2"
  lints:
    dependency: transitive
    description:
      name: lints
      sha256: "0a217c6c989d21039f1498c3ed9f3ed71b354e69873f13a8dfc3c9fe76f1b452"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.1"
  location:
    dependency: "direct main"
    description:
      name: location
      sha256: "9051959f6f2ccadd887b28b66e9cbbcc25b6838e37cf9e894c421ccc0ebf80b5"
      url: "https://pub.dev"
    source: hosted
    version: "4.4.0"
  location_platform_interface:
    dependency: transitive
    description:
      name: location_platform_interface
      sha256: "62eeaf1658e92e4459b727f55a3c328eccbac8ba043fa6d262ac5286ad48384c"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.0"
  location_web:
    dependency: transitive
    description:
      name: location_web
      sha256: "6c08c408a040534c0269c4ff9fe17eebb5a36dea16512fbaf116b9c8bc21545b"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.1"
  matcher:
    dependency: transitive
    description:
      name: matcher
      sha256: "1803e76e6653768d64ed8ff2e1e67bea3ad4b923eb5c56a295c3e634bad5960e"
      url: "https://pub.dev"
    source: hosted
    version: "0.12.16"
  material_color_utilities:
    dependency: transitive
    description:
      name: material_color_utilities
      sha256: "9528f2f296073ff54cb9fee677df673ace1218163c3bc7628093e7eed5203d41"
      url: "https://pub.dev"
    source: hosted
    version: "0.5.0"
  meta:
    dependency: transitive
    description:
      name: meta
      sha256: a6e590c838b18133bb482a2745ad77c5bb7715fb0451209e1a7567d416678b8e
      url: "https://pub.dev"
    source: hosted
    version: "1.10.0"
  path:
    dependency: transitive
    description:
      name: path
      sha256: "8829d8a55c13fc0e37127c29fedf290c102f4e40ae94ada574091fe0ff96c917"
      url: "https://pub.dev"
    source: hosted
    version: "1.8.3"
  permission_handler:
    dependency: "direct main"
    description:
      name: permission_handler
      sha256: "4356882e9abf51aa0d56e8fb886e0d6162719f2310dd71f0b8fa7f34908b128d"
      url: "https://pub.dev"
    source: hosted
    version: "8.3.0"
  permission_handler_platform_interface:
    dependency: transitive
    description:
      name: permission_handler_platform_interface
      sha256: "6760eb5ef34589224771010805bea6054ad28453906936f843a8cc4d3a55c4a4"
      url: "https://pub.dev"
    source: hosted
    version: "3.12.0"
  plugin_platform_interface:
    dependency: transitive
    description:
      name: plugin_platform_interface
      sha256: "4820fbfdb9478b1ebae27888254d445073732dae3d6ea81f0b7e06d5dedc3f02"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.8"
  pointycastle:
    dependency: transitive
    description:
      name: pointycastle
      sha256: "43ac87de6e10afabc85c445745a7b799e04de84cebaa4fd7bf55a5e1e9604d29"
      url: "https://pub.dev"
    source: hosted
    version: "3.7.4"
  sanitize_html:
    dependency: transitive
    description:
      name: sanitize_html
      sha256: "12669c4a913688a26555323fb9cec373d8f9fbe091f2d01c40c723b33caa8989"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.0"
  sec:
    dependency: transitive
    description:
      name: sec
      sha256: "8bbd56df884502192a441b5f5d667265498f2f8728a282beccd9db79e215f379"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.0"
  sky_engine:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.99"
  source_span:
    dependency: transitive
    description:
      name: source_span
      sha256: "53e943d4206a5e30df338fd4c6e7a077e02254531b138a15aec3bd143c1a8b3c"
      url: "https://pub.dev"
    source: hosted
    version: "1.10.0"
  stack_trace:
    dependency: transitive
    description:
      name: stack_trace
      sha256: "73713990125a6d93122541237550ee3352a2d84baad52d375a4cad2eb9b7ce0b"
      url: "https://pub.dev"
    source: hosted
    version: "1.11.1"
  stream_channel:
    dependency: transitive
    description:
      name: stream_channel
      sha256: ba2aa5d8cc609d96bbb2899c28934f9e1af5cddbd60a827822ea467161eb54e7
      url: "https://pub.dev"
    source: hosted
    version: "2.1.2"
  stream_transform:
    dependency: transitive
    description:
      name: stream_transform
      sha256: "14a00e794c7c11aa145a170587321aedce29769c08d7f58b1d141da75e3b1c6f"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.0"
  string_scanner:
    dependency: transitive
    description:
      name: string_scanner
      sha256: "556692adab6cfa87322a115640c11f13cb77b3f076ddcc5d6ae3c20242bedcde"
      url: "https://pub.dev"
    source: hosted
    version: "1.2.0"
  term_glyph:
    dependency: transitive
    description:
      name: term_glyph
      sha256: a29248a84fbb7c79282b40b8c72a1209db169a2e0542bce341da992fe1bc7e84
      url: "https://pub.dev"
    source: hosted
    version: "1.2.1"
  test_api:
    dependency: transitive
    description:
      name: test_api
      sha256: "5c2f730018264d276c20e4f1503fd1308dfbbae39ec8ee63c5236311ac06954b"
      url: "https://pub.dev"
    source: hosted
    version: "0.6.1"
  typed_data:
    dependency: transitive
    description:
      name: typed_data
      sha256: facc8d6582f16042dd49f2463ff1bd6e2c9ef9f3d5da3d9b087e244a7b564b3c
      url: "https://pub.dev"
    source: hosted
    version: "1.3.2"
  uuid:
    dependency: transitive
    description:
      name: uuid
      sha256: "648e103079f7c64a36dc7d39369cabb358d377078a051d6ae2ad3aa539519313"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.7"
  vector_math:
    dependency: transitive
    description:
      name: vector_math
      sha256: "80b3257d1492ce4d091729e3a67a60407d227c27241d6927be0130c98e741803"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.4"
  wallet:
    dependency: transitive
    description:
      name: wallet
      sha256: "687fd89a16557649b26189e597792962f405797fc64113e8758eabc2c2605c32"
      url: "https://pub.dev"
    source: hosted
    version: "0.0.13"
  web:
    dependency: transitive
    description:
      name: web
      sha256: afe077240a270dcfd2aafe77602b4113645af95d0ad31128cc02bce5ac5d5152
      url: "https://pub.dev"
    source: hosted
    version: "0.3.0"
  web3dart:
    dependency: "direct main"
    description:
      name: web3dart
      sha256: "0b96223a6b284e3146e65dc842ded139eca68a85c4ab79c5ba1a73284927d3cd"
      url: "https://pub.dev"
    source: hosted
    version: "2.6.1"
sdks:
  dart: ">=3.2.6 <4.0.0"
  flutter: ">=3.16.6"
require("@nomicfoundation/hardhat-toolbox");
require("dotenv").config();
/** @type import('hardhat/config').HardhatUserConfig */
module.exports = {
  solidity: "0.4.20",
  networks: {
    sepolia: {
      url: process.env.ALCHEMY_TESTNET_RPC_URL,
      accounts: [process.env.PRIVATE_KEY],
    },
  },
};
// // SPDX-License-Identifier: UNLICENSED
// pragma solidity ^0.8.9;

// // Uncomment this line to use console.log
// // import "hardhat/console.sol";

// contract Lock {
//     uint public unlockTime;
//     address payable public owner;

//     event Withdrawal(uint amount, uint when);

//     constructor(uint _unlockTime) payable {
//         require(
//             block.timestamp < _unlockTime,
//             "Unlock time should be in the future"
//         );

//         unlockTime = _unlockTime;
//         owner = payable(msg.sender);
//     }

//     function withdraw() public {
//         // Uncomment this line, and the import of "hardhat/console.sol", to print a log in your terminal
//         // console.log("Unlock time is %o and block timestamp is %o", unlockTime, block.timestamp);

//         require(block.timestamp >= unlockTime, "You can't withdraw yet");
//         require(msg.sender == owner, "You aren't the owner");

//         emit Withdrawal(address(this).balance, block.timestamp);

//         owner.transfer(address(this).balance);
//     }
// }
// We require the Hardhat Runtime Environment explicitly here. This is optional
// but useful for running the script in a standalone fashion through `node <script>`.
//
// You can also run a script with `npx hardhat run <script>`. If you do that, Hardhat
// will compile your contracts, add the Hardhat Runtime Environment's members to the
// global scope, and execute the script.
const hre = require("hardhat");

async function main() {
  const company = "0x2C17bF990f33afcFdE985E19137A92B1C486D0e1";
  const device = "0x7943984e2BA9Fe097286aED8D6c31f94FeC0800F";
  const driver = "0x8a40840554c7972fF50208FA442B80f0b14Fc378";

  const paymentAmount = hre.ethers.parseEther("0.005");

  const contract = await hre.ethers.deployContract(
    "GeoLogix",
    [device, company, driver],
    {
      value: paymentAmount,
    }
  );

  await contract.waitForDeployment();

  console.log(
    `Contract with ${ethers.formatEther(paymentAmount)}ETH is deployed to ${
      contract.target
    }`
  );
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
body {
  font-family: "open sans";
  margin: 0;
}
ul {
  list-style-type: none;
  padding-left: 0;
  display: flex;
}
li {
  padding: 40px;
  border: 2px solid rgb(30, 134, 255);
  margin-right: 5px;
  border-radius: 10px;
  cursor: pointer;
}
li:hover {
  background-color: rgb(30, 134, 255);
  color: white;
}
li:active {
  opacity: 0.7;
}
* {
  color: }
.main-container {
  padding: 20px;
}
.block {
  display: flex;
  align-items: center;
}
.number-selected {
  background-color: rgb(30, 134, 255);
  color: white;
}
.bet-input {
  padding: 15px;
  border-radius: 10px;
  border: 1px solid lightgrey;
  font-size: 15pt;
  margin: 0 10px;
}
import React from "react";
import ReactDOM from "react-dom";
import Web3 from "web3";
import "./index.css";
// import { createRequire } from "module"; // Bring in the ability to create the 'require' method
// const require = createRequire(import.meta.url); // construct the require method
// const contractJson = require("../../artifacts/contracts/Casino.sol/Casino.json"); // use the require method
class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      lastWinner: 0,
      numberOfBets: 0,
      minimumBet: 0,
      totalBet: 0,
      maxAmountOfBets: 0,
    };
    if (typeof window.ethereum != "undefined") {
      console.log("Using web3 detected from external source like Metamask");
      this.web3 = new Web3(window.ethereum);
    } else {
      console.log(
        "No web3 detected. Falling back to http://localhost:8545. You should remove this fallback when you deploy live, as it's inherently insecure. Consider switching to Metamask for development. More info here: http://truffleframework.com/tutorials/truffle-and-metamask"
      );
      this.web3 = new Web3(
        new Web3.providers.HttpProvider("http://localhost:8545")
      );
    }
    const contract = new this.web3.eth.Contract(
      [
        {
          constant: false,
          inputs: [],
          name: "generateNumberWinner",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          constant: true,
          inputs: [],
          name: "numberOfBets",
          outputs: [
            {
              name: "",
              type: "uint256",
            },
          ],
          payable: false,
          stateMutability: "view",
          type: "function",
        },
        {
          constant: true,
          inputs: [
            {
              name: "player",
              type: "address",
            },
          ],
          name: "checkPlayerExists",
          outputs: [
            {
              name: "",
              type: "bool",
            },
          ],
          payable: false,
          stateMutability: "view",
          type: "function",
        },
        {
          constant: false,
          inputs: [],
          name: "kill",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          constant: true,
          inputs: [
            {
              name: "",
              type: "address",
            },
          ],
          name: "playerInfo",
          outputs: [
            {
              name: "amountBet",
              type: "uint256",
            },
            {
              name: "numberSelected",
              type: "uint256",
            },
          ],
          payable: false,
          stateMutability: "view",
          type: "function",
        },
        {
          constant: false,
          inputs: [
            {
              name: "numberWinner",
              type: "uint256",
            },
          ],
          name: "distributePrizes",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          constant: false,
          inputs: [
            {
              name: "numberSelected",
              type: "uint256",
            },
          ],
          name: "bet",
          outputs: [],
          payable: true,
          stateMutability: "payable",
          type: "function",
        },
        {
          constant: true,
          inputs: [],
          name: "owner",
          outputs: [
            {
              name: "",
              type: "address",
            },
          ],
          payable: false,
          stateMutability: "view",
          type: "function",
        },
        {
          constant: true,
          inputs: [],
          name: "minimumBet",
          outputs: [
            {
              name: "",
              type: "uint256",
            },
          ],
          payable: false,
          stateMutability: "view",
          type: "function",
        },
        {
          constant: true,
          inputs: [],
          name: "maxAmountOfBets",
          outputs: [
            {
              name: "",
              type: "uint256",
            },
          ],
          payable: false,
          stateMutability: "view",
          type: "function",
        },
        {
          constant: true,
          inputs: [
            {
              name: "",
              type: "uint256",
            },
          ],
          name: "players",
          outputs: [
            {
              name: "",
              type: "address",
            },
          ],
          payable: false,
          stateMutability: "view",
          type: "function",
        },
        {
          constant: true,
          inputs: [],
          name: "totalBet",
          outputs: [
            {
              name: "",
              type: "uint256",
            },
          ],
          payable: false,
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              name: "_minimumBet",
              type: "uint256",
            },
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          payable: true,
          stateMutability: "payable",
          type: "fallback",
        },
      ],
      "0x9A736b9d057034881B43aFDB6B23a3D7DFdf2c7D"
    );
    this.state.ContractInstance = contract;
  }
  componentDidMount() {
    this.updateState();
    this.setupListeners();
    setInterval(this.updateState.bind(this), 10e3);
  }
  updateState() {
    this.state.ContractInstance.methods.minimumBet((err, result) => {
      if (result != null) {
        this.setState({
          minimumBet: parseFloat(window.ethereum.fromWei(result, "ether")),
        });
      }
    });
    this.state.ContractInstance.methods.totalBet((err, result) => {
      if (result != null) {
        this.setState({
          totalBet: parseFloat(window.ethereum.fromWei(result, "ether")),
        });
      }
    });
    this.state.ContractInstance.methods.numberOfBets((err, result) => {
      if (result != null) {
        this.setState({
          numberOfBets: parseInt(result),
        });
      }
    });
    this.state.ContractInstance.methods.maxAmountOfBets((err, result) => {
      if (result != null) {
        this.setState({
          maxAmountOfBets: parseInt(result),
        });
      }
    });
  }
  // Listen for events and executes the voteNumber method
  setupListeners() {
    let liNodes = this.refs.numbers.querySelectorAll("li");
    liNodes.forEach((number) => {
      number.addEventListener("click", (event) => {
        event.target.className = "number-selected";
        this.voteNumber(parseInt(event.target.innerHTML), (done) => {
          // Remove the other number selected
          for (let i = 0; i < liNodes.length; i++) {
            liNodes[i].className = "";
          }
        });
      });
    });
  }
  voteNumber(number, cb) {
    let bet = this.refs["ether-bet"].value;
    if (!bet) bet = 0.1;
    if (parseFloat(bet) < this.state.minimumBet) {
      alert("You must bet more than the minimum");
      cb();
    } else {
      this.state.ContractInstance.methods
        .bet(
          number,
          {
            gas: 300000,
            from: this.web3.eth.accounts[0],
            value: this.web3.utils.toWei(bet, "ether"),
          },
          (err, result) => {
            cb();
          }
        )
        .call()
        .then((result) => {
          console.log("Result of bet:", result);
        });
    }
  }
  render() {
    return (
      <div className="main-container">
        <h1>Bet for your best number and win huge amounts of Ether</h1>
        <div className="block">
          <b>Number of bets:</b> &nbsp;
          <span>{this.state.numberOfBets}</span>
        </div>
        <div className="block">
          <b>Last number winner:</b> &nbsp;
          <span>{this.state.lastWinner}</span>
        </div>
        <div className="block">
          <b>Total ether bet:</b> &nbsp;
          <span>{this.state.totalBet} ether</span>
        </div>
        <div className="block">
          <b>Minimum bet:</b> &nbsp;
          <span>{this.state.minimumBet} ether</span>
        </div>
        <div className="block">
          <b>Max amount of bets:</b> &nbsp;
          <span>{this.state.maxAmountOfBets} ether</span>
        </div>
        <hr />
        <h2>Vote for the next number</h2>
        <label>
          <b>
            How much Ether do you want to bet?{" "}
            <input
              className="bet-input"
              ref="ether-bet"
              type="number"
              placeholder={this.state.minimumBet}
            />
          </b>{" "}
          ether
          <br />
        </label>
        <ul ref="numbers">
          <li>1</li>
          <li>2</li>
          <li>3</li>
          <li>4</li>
          <li>5</li>
          <li>6</li>
          <li>7</li>
          <li>8</li>
          <li>9</li>
          <li>10</li>
        </ul>
      </div>
    );
  }
}
ReactDOM.render(<App />, document.querySelector("
// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.9;

contract GeoLogix
{
    //Set of States
    enum StateType { Created, InTransit, Completed}

    StateType public  state;
    address public  company; // aka owner
    address public  device;
    address public  driver;

    struct Checkpoint{
        uint id;
        int lat;
        int lng;
        uint distance;
        uint timestamp;
    }

   
   mapping(uint => Checkpoint) public checkpointsMap;
   mapping(uint => Checkpoint) public compliancesMap;
   mapping(uint => Checkpoint) public nonCompliancesMap;

   uint[] checkpointIds;
   uint[] complianceIds;
   uint[] nonComplianceIds;

   uint public checkpointId = 0;


    constructor(address _device, address _company, address _driver) payable {
        // Ensure that at least 0.005 Ether is sent to the contract upon creation
        require(msg.value >= 0.005 ether, "Minimum 0.005 Ether required");
        company = _company;
        device = _device;
        driver = _driver; 
        state = StateType.Created;
    }

    // modifier that checks the current user calling the contract function is the owner
    modifier onlyOwner(){
        require(msg.sender == company, "Account must be company/owner");
        _;
    }

    function addCheckpoint( int _lat, int _lng, uint _distance, uint _timestamp) public onlyOwner{
        Checkpoint memory checkpoint = Checkpoint(checkpointId,_lat, _lng,_distance, _timestamp);
        checkpointsMap[checkpointId] = checkpoint;
        checkpointIds.push(checkpointId);
        checkpointId++;
    }

    function getCheckpointIds() public view returns (uint[] memory){
        return checkpointIds;
    }

    function getComplianceIds() public view returns (uint[] memory){
        return complianceIds;
    }

    function getNonComplianceIds() public view returns (uint[] memory){
        return nonComplianceIds;
    }
 

    function IngestTelemetry(uint _id,int _lat, int _lng, uint _distance, uint _timestamp) public{
        // if the state is already completed, no more telemetry can be ingested
        require(state != StateType.Completed,"State already completed" );
        require(device == msg.sender,"Account not from Device");

        state = StateType.InTransit;

        // find a checkpoint given an id
        Checkpoint memory checkpoint = checkpointsMap[_id];
       
        // check if the distance is greater than the distance of the checkpoint outlined or the timestamp is 5 minutes(300,000 milliseconds) or more after the timestamp of the checkpoint
        // commented out the timestamp code  for sake of simplicity
        if( _distance > checkpoint.distance ||  (_timestamp > checkpoint.timestamp + 300000)){
            nonCompliancesMap[_id] = Checkpoint(_id,_lat, _lng,_distance, _timestamp);
            nonComplianceIds.push(_id);
        }else{
            compliancesMap[_id] = Checkpoint(_id,_lat, _lng,_distance, _timestamp);
            complianceIds.push(_id);
        }
        
    }

    



    function complete() public payable onlyOwner{

       require(state != StateType.Completed,"State already completed");
       
        // calculate how many compliance are there, and 
        // if >= 75% transfer all the balance to driver,
        // >=50% transfer 0.003 ether to driver,
        // <50% transfer the balance to the owner
        if(complianceIds.length >= checkpointIds.length *3/4){
            // transfer all balance
            payable(driver).transfer(address(this).balance);
        }else if(complianceIds.length >= checkpointIds.length * 1/2){
            // transfer 0.003 ether
            payable(driver).transfer(0.003 ether);
            payable(company).transfer(address(this).balance - 0.003 ether);
        }else{
            // transfer balance to company from the contract
            payable(company).transfer(address(this).balance);
        }
       
        state = StateType.Completed;
        
    }

    // can be called by the company if its necessary to start from scratch
    function resetEverything() public onlyOwner{
        state = StateType.Created;
        for (uint i = 0; i < checkpointIds.length; i++){
            delete checkpointsMap[checkpointIds[i]];
        }
        for (uint i = 0; i < complianceIds.length; i++){
            delete compliancesMap[complianceIds[i]];
        }

        for (uint i = 0; i < nonComplianceIds.length; i++){
            delete nonCompliancesMap[nonComplianceIds[i]];
        }

        
        delete  checkpointIds ;
       delete complianceIds ;
       delete nonComplianceIds ;
       
        checkpointId = 0;
    }

}


import 'package:equatable/equatable.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:web3_delivery_payments/common/blocs/bloc_observer.dart';
import 'package:web3_delivery_payments/common/repositories/smart_contract_repository.dart';
import 'package:web3_delivery_payments/features/navigation/bloc/navigation_bloc.dart';
import 'package:web3_delivery_payments/features/navigation/repository/geolocation_repository.dart';
import 'package:web3_delivery_payments/router.dart';

void main() {
  EquatableConfig.stringify = kDebugMode;
  Bloc.observer = AppBlocObserver();
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiRepositoryProvider(
        providers: [
          RepositoryProvider(
            create: (context) => SmartContractRepository(),
          ),
          RepositoryProvider(
            create: (context) => GeoLocationRepository(),
          ),
        ],
        child: MultiBlocProvider(
          providers: [
            BlocProvider(
              create: (context) => NavigationBloc(),
            ),
          ],
          child: MaterialApp.router(
            title: 'Web3 Based Delivery Payment',
            debugShowCheckedModeBanner: false,
            routerConfig: MyRouter.router,
            theme: ThemeData(
                textTheme: GoogleFonts.poppinsTextTheme(
                  Theme.of(context).textTheme,
                ),
                snackBarTheme: const SnackBarThemeData(
                  behavior: SnackBarBehavior.floating,
                )),
          ),
        ));
  }
}
packages:
  _fe_analyzer_shared:
    dependency: transitive
    description:
      name: _fe_analyzer_shared
      sha256: ae92f5d747aee634b87f89d9946000c2de774be1d6ac3e58268224348cd0101a
      url: "https://pub.dev"
    source: hosted
    version: "61.0.0"
  analyzer:
    dependency: transitive
    description:
      name: analyzer
      sha256: ea3d8652bda62982addfd92fdc2d0214e5f82e43325104990d4f4c4a2a313562
      url: "https://pub.dev"
    source: hosted
    version: "5.13.0"
  args:
    dependency: transitive
    description:
      name: args
      sha256: eef6c46b622e0494a36c5a12d10d77fb4e855501a91c1b9ef9339326e58f0596
      url: "https://pub.dev"
    source: hosted
    version: "2.4.2"
  async:
    dependency: transitive
    description:
      name: async
      sha256: "947bfcf187f74dbc5e146c9eb9c0f10c9f8b30743e341481c1e2ed3ecc18c20c"
      url: "https://pub.dev"
    source: hosted
    version: "2.11.0"
  bloc:
    dependency: transitive
    description:
      name: bloc
      sha256: "3820f15f502372d979121de1f6b97bfcf1630ebff8fe1d52fb2b0bfa49be5b49"
      url: "https://pub.dev"
    source: hosted
    version: "8.1.2"
  boolean_selector:
    dependency: transitive
    description:
      name: boolean_selector
      sha256: "6cfb5af12253eaf2b368f07bacc5a80d1301a071c73360d746b7f2e32d762c66"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.1"
  build:
    dependency: transitive
    description:
      name: build
      sha256: "3fbda25365741f8251b39f3917fb3c8e286a96fd068a5a242e11c2012d495777"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.1"
  build_config:
    dependency: transitive
    description:
      name: build_config
      sha256: bf80fcfb46a29945b423bd9aad884590fb1dc69b330a4d4700cac476af1708d1
      url: "https://pub.dev"
    source: hosted
    version: "1.1.1"
  build_daemon:
    dependency: transitive
    description:
      name: build_daemon
      sha256: "757153e5d9cd88253cb13f28c2fb55a537dc31fefd98137549895b5beb7c6169"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.1"
  build_resolvers:
    dependency: transitive
    description:
      name: build_resolvers
      sha256: "0713a05b0386bd97f9e63e78108805a4feca5898a4b821d6610857f10c91e975"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.0"
  build_runner:
    dependency: "direct dev"
    description:
      name: build_runner
      sha256: b0a8a7b8a76c493e85f1b84bffa0588859a06197863dba8c9036b15581fd9727
      url: "https://pub.dev"
    source: hosted
    version: "2.3.3"
  build_runner_core:
    dependency: transitive
    description:
      name: build_runner_core
      sha256: "0671ad4162ed510b70d0eb4ad6354c249f8429cab4ae7a4cec86bbc2886eb76e"
      url: "https://pub.dev"
    source: hosted
    version: "7.2.7+1"
  built_collection:
    dependency: transitive
    description:
      name: built_collection
      sha256: "376e3dd27b51ea877c28d525560790aee2e6fbb5f20e2f85d5081027d94e2100"
      url: "https://pub.dev"
    source: hosted
    version: "5.1.1"
  built_value:
    dependency: transitive
    description:
      name: built_value
      sha256: "69acb7007eb2a31dc901512bfe0f7b767168be34cb734835d54c070bfa74c1b2"
      url: "https://pub.dev"
    source: hosted
    version: "8.8.0"
  characters:
    dependency: transitive
    description:
      name: characters
      sha256: "04a925763edad70e8443c99234dc3328f442e811f1d8fd1a72f1c8ad0f69a605"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.0"
  checked_yaml:
    dependency: transitive
    description:
      name: checked_yaml
      sha256: feb6bed21949061731a7a75fc5d2aa727cf160b91af9a3e464c5e3a32e28b5ff
      url: "https://pub.dev"
    source: hosted
    version: "2.0.3"
  clock:
    dependency: transitive
    description:
      name: clock
      sha256: cb6d7f03e1de671e34607e909a7213e31d7752be4fb66a86d29fe1eb14bfb5cf
      url: "https://pub.dev"
    source: hosted
    version: "1.1.1"
  code_builder:
    dependency: transitive
    description:
      name: code_builder
      sha256: "1be9be30396d7e4c0db42c35ea6ccd7cc6a1e19916b5dc64d6ac216b5544d677"
      url: "https://pub.dev"
    source: hosted
    version: "4.7.0"
  collection:
    dependency: transitive
    description:
      name: collection
      sha256: f092b211a4319e98e5ff58223576de6c2803db36221657b46c82574721240687
      url: "https://pub.dev"
    source: hosted
    version: "1.17.2"
  convert:
    dependency: transitive
    description:
      name: convert
      sha256: "0f08b14755d163f6e2134cb58222dd25ea2a2ee8a195e53983d57c075324d592"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.1"
  crypto:
    dependency: transitive
    description:
      name: crypto
      sha256: ff625774173754681d66daaf4a448684fb04b78f902da9cb3d308c19cc5e8bab
      url: "https://pub.dev"
    source: hosted
    version: "3.0.3"
  csslib:
    dependency: transitive
    description:
      name: csslib
      sha256: "706b5707578e0c1b4b7550f64078f0a0f19dec3f50a178ffae7006b0a9ca58fb"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.0"
  cupertino_icons:
    dependency: "direct main"
    description:
      name: cupertino_icons
      sha256: d57953e10f9f8327ce64a508a355f0b1ec902193f66288e8cb5070e7c47eeb2d
      url: "https://pub.dev"
    source: hosted
    version: "1.0.6"
  dart_style:
    dependency: transitive
    description:
      name: dart_style
      sha256: "1efa911ca7086affd35f463ca2fc1799584fb6aa89883cf0af8e3664d6a02d55"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.2"
  dio:
    dependency: "direct main"
    description:
      name: dio
      sha256: "797e1e341c3dd2f69f2dad42564a6feff3bfb87187d05abb93b9609e6f1645c3"
      url: "https://pub.dev"
    source: hosted
    version: "5.4.0"
  eip1559:
    dependency: transitive
    description:
      name: eip1559
      sha256: de454d6321bd753eb79116e9ec4f8df20895c2e97f9a3839a032f3a728985516
      url: "https://pub.dev"
    source: hosted
    version: "0.6.1"
  eip55:
    dependency: transitive
    description:
      name: eip55
      sha256: "213a9b86add87a5216328e8494b0ab836e401210c4d55eb5e521bd39e39169e1"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.2"
  envied:
    dependency: "direct main"
    description:
      name: envied
      sha256: "60d3f5606c7b35bc6ef493e650d916b34351d8af2e58b7ac45881ba59dfcf039"
      url: "https://pub.dev"
    source: hosted
    version: "0.3.0+3"
  envied_generator:
    dependency: "direct dev"
    description:
      name: envied_generator
      sha256: dfdbe5dc52863e54c036a4c4042afbdf1bd528cb4c1e638ecba26228ba72e9e5
      url: "https://pub.dev"
    source: hosted
    version: "0.3.0+3"
  equatable:
    dependency: "direct main"
    description:
      name: equatable
      sha256: c2b87cb7756efdf69892005af546c56c0b5037f54d2a88269b4f347a505e3ca2
      url: "https://pub.dev"
    source: hosted
    version: "2.0.5"
  fake_async:
    dependency: transitive
    description:
      name: fake_async
      sha256: "511392330127add0b769b75a987850d136345d9227c6b94c96a04cf4a391bf78"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.1"
  ffi:
    dependency: transitive
    description:
      name: ffi
      sha256: ed5337a5660c506388a9f012be0288fb38b49020ce2b45fe1f8b8323fe429f99
      url: "https://pub.dev"
    source: hosted
    version: "2.0.2"
  file:
    dependency: transitive
    description:
      name: file
      sha256: "1b92bec4fc2a72f59a8e15af5f52cd441e4a7860b49499d69dfa817af20e925d"
      url: "https://pub.dev"
    source: hosted
    version: "6.1.4"
  fixnum:
    dependency: transitive
    description:
      name: fixnum
      sha256: "25517a4deb0c03aa0f32fd12db525856438902d9c16536311e76cdc57b31d7d1"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.0"
  flutter:
    dependency: "direct main"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_bloc:
    dependency: "direct main"
    description:
      name: flutter_bloc
      sha256: e74efb89ee6945bcbce74a5b3a5a3376b088e5f21f55c263fc38cbdc6237faae
      url: "https://pub.dev"
    source: hosted
    version: "8.1.3"
  flutter_lints:
    dependency: "direct dev"
    description:
      name: flutter_lints
      sha256: a25a15ebbdfc33ab1cd26c63a6ee519df92338a9c10f122adda92938253bef04
      url: "https://pub.dev"
    source: hosted
    version: "2.0.3"
  flutter_plugin_android_lifecycle:
    dependency: transitive
    description:
      name: flutter_plugin_android_lifecycle
      sha256: b068ffc46f82a55844acfa4fdbb61fad72fa2aef0905548419d97f0f95c456da
      url: "https://pub.dev"
    source: hosted
    version: "2.0.17"
  flutter_test:
    dependency: "direct dev"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_web_plugins:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.0"
  frontend_server_client:
    dependency: transitive
    description:
      name: frontend_server_client
      sha256: "408e3ca148b31c20282ad6f37ebfa6f4bdc8fede5b74bc2f08d9d92b55db3612"
      url: "https://pub.dev"
    source: hosted
    version: "3.2.0"
  geolocator:
    dependency: "direct main"
    description:
      name: geolocator
      sha256: "5c23f3613f50586c0bbb2b8f970240ae66b3bd992088cf60dd5ee2e6f7dde3a8"
      url: "https://pub.dev"
    source: hosted
    version: "9.0.2"
  geolocator_android:
    dependency: transitive
    description:
      name: geolocator_android
      sha256: "93906636752ea4d4e778afa981fdfe7409f545b3147046300df194330044d349"
      url: "https://pub.dev"
    source: hosted
    version: "4.3.1"
  geolocator_apple:
    dependency: transitive
    description:
      name: geolocator_apple
      sha256: "79babf44b692ec5e789d322dc736ef71586056e8e6828f747c9e005456b248bf"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.5"
  geolocator_platform_interface:
    dependency: transitive
    description:
      name: geolocator_platform_interface
      sha256: b8cc1d3be0ca039a3f2174b0b026feab8af3610e220b8532e42cff8ec6658535
      url: "https://pub.dev"
    source: hosted
    version: "4.1.0"
  geolocator_web:
    dependency: transitive
    description:
      name: geolocator_web
      sha256: "102e7da05b48ca6bf0a5bda0010f886b171d1a08059f01bfe02addd0175ebece"
      url: "https://pub.dev"
    source: hosted
    version: "2.2.1"
  geolocator_windows:
    dependency: transitive
    description:
      name: geolocator_windows
      sha256: "4f4218f122a6978d0ad655fa3541eea74c67417440b09f0657238810d5af6bdc"
      url: "https://pub.dev"
    source: hosted
    version: "0.1.3"
  glob:
    dependency: transitive
    description:
      name: glob
      sha256: "0e7014b3b7d4dac1ca4d6114f82bf1782ee86745b9b42a92c9289c23d8a0ab63"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.2"
  go_router:
    dependency: "direct main"
    description:
      name: go_router
      sha256: e1a30a66d734f9e498b1b6522d6a75ded28242bad2359a9158df38a1c30bcf1f
      url: "https://pub.dev"
    source: hosted
    version: "10.2.0"
  google_fonts:
    dependency: "direct main"
    description:
      name: google_fonts
      sha256: "6b6f10f0ce3c42f6552d1c70d2c28d764cf22bb487f50f66cca31dcd5194f4d6"
      url: "https://pub.dev"
    source: hosted
    version: "4.0.4"
  google_maps:
    dependency: transitive
    description:
      name: google_maps
      sha256: "555d5d736339b0478e821167ac521c810d7b51c3b2734e6802a9f046b64ea37a"
      url: "https://pub.dev"
    source: hosted
    version: "6.3.0"
  google_maps_flutter:
    dependency: "direct main"
    description:
      name: google_maps_flutter
      sha256: "7b417a64ee7a060f42cf44d8c274d3b562423f6fe57d2911b7b536857c0d8eb6"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.0"
  google_maps_flutter_android:
    dependency: transitive
    description:
      name: google_maps_flutter_android
      sha256: "4023e79184c762e63efe04da629d876085e0c296a7ca26745fb5750d4acd0aa2"
      url: "https://pub.dev"
    source: hosted
    version: "2.5.3"
  google_maps_flutter_ios:
    dependency: transitive
    description:
      name: google_maps_flutter_ios
      sha256: "2aa28eb9b9d5dfdce6932a7b7f096430bf83a1a09b4e21e81939351f407c787f"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.2"
  google_maps_flutter_platform_interface:
    dependency: transitive
    description:
      name: google_maps_flutter_platform_interface
      sha256: a3e9e6896501e566d902c6c69f010834d410ef4b7b5c18b90c77e871c86b7907
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  google_maps_flutter_web:
    dependency: transitive
    description:
      name: google_maps_flutter_web
      sha256: "05067c5aa762ebee44b7ef4902a311ed8cf891ef655e2798bae063aa3050c8d9"
      url: "https://pub.dev"
    source: hosted
    version: "0.5.4+1"
  graphs:
    dependency: transitive
    description:
      name: graphs
      sha256: aedc5a15e78fc65a6e23bcd927f24c64dd995062bcd1ca6eda65a3cff92a4d19
      url: "https://pub.dev"
    source: hosted
    version: "2.3.1"
  html:
    dependency: transitive
    description:
      name: html
      sha256: "3a7812d5bcd2894edf53dfaf8cd640876cf6cef50a8f238745c8b8120ea74d3a"
      url: "https://pub.dev"
    source: hosted
    version: "0.15.4"
  http:
    dependency: "direct main"
    description:
      name: http
      sha256: "5895291c13fa8a3bd82e76d5627f69e0d85ca6a30dcac95c4ea19a5d555879c2"
      url: "https://pub.dev"
    source: hosted
    version: "0.13.6"
  http_multi_server:
    dependency: transitive
    description:
      name: http_multi_server
      sha256: "97486f20f9c2f7be8f514851703d0119c3596d14ea63227af6f7a481ef2b2f8b"
      url: "https://pub.dev"
    source: hosted
    version: "3.2.1"
  http_parser:
    dependency: transitive
    description:
      name: http_parser
      sha256: "2aa08ce0341cc9b354a498388e30986515406668dbcc4f7c950c3e715496693b"
      url: "https://pub.dev"
    source: hosted
    version: "4.0.2"
  io:
    dependency: transitive
    description:
      name: io
      sha256: "2ec25704aba361659e10e3e5f5d672068d332fc8ac516421d483a11e5cbd061e"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.4"
  js:
    dependency: transitive
    description:
      name: js
      sha256: "5528c2f391ededb7775ec1daa69e65a2d61276f7552de2b5f7b8d34ee9fd4ab7"
      url: "https://pub.dev"
    source: hosted
    version: "0.6.5"
  js_wrapping:
    dependency: transitive
    description:
      name: js_wrapping
      sha256: e385980f7c76a8c1c9a560dfb623b890975841542471eade630b2871d243851c
      url: "https://pub.dev"
    source: hosted
    version: "0.7.4"
  json_annotation:
    dependency: transitive
    description:
      name: json_annotation
      sha256: b10a7b2ff83d83c777edba3c6a0f97045ddadd56c944e1a23a3fdf43a1bf4467
      url: "https://pub.dev"
    source: hosted
    version: "4.8.1"
  json_rpc_2:
    dependency: transitive
    description:
      name: json_rpc_2
      sha256: "5e469bffa23899edacb7b22787780068d650b106a21c76db3c49218ab7ca447e"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.2"
  lints:
    dependency: transitive
    description:
      name: lints
      sha256: "5e4a9cd06d447758280a8ac2405101e0e2094d2a1dbdd3756aec3fe7775ba593"
      url: "https://pub.dev"
    source: hosted
    version: "2.0.1"
  logger:
    dependency: "direct main"
    description:
      name: logger
      sha256: "6bbb9d6f7056729537a4309bda2e74e18e5d9f14302489cc1e93f33b3fe32cac"
      url: "https://pub.dev"
    source: hosted
    version: "2.0.2+1"
  logging:
    dependency: transitive
    description:
      name: logging
      sha256: "623a88c9594aa774443aa3eb2d41807a48486b5613e67599fb4c41c0ad47c340"
      url: "https://pub.dev"
    source: hosted
    version: "1.2.0"
  matcher:
    dependency: transitive
    description:
      name: matcher
      sha256: "1803e76e6653768d64ed8ff2e1e67bea3ad4b923eb5c56a295c3e634bad5960e"
      url: "https://pub.dev"
    source: hosted
    version: "0.12.16"
  material_color_utilities:
    dependency: transitive
    description:
      name: material_color_utilities
      sha256: "9528f2f296073ff54cb9fee677df673ace1218163c3bc7628093e7eed5203d41"
      url: "https://pub.dev"
    source: hosted
    version: "0.5.0"
  meta:
    dependency: transitive
    description:
      name: meta
      sha256: "3c74dbf8763d36539f114c799d8a2d87343b5067e9d796ca22b5eb8437090ee3"
      url: "https://pub.dev"
    source: hosted
    version: "1.9.1"
  mime:
    dependency: transitive
    description:
      name: mime
      sha256: e4ff8e8564c03f255408decd16e7899da1733852a9110a58fe6d1b817684a63e
      url: "https://pub.dev"
    source: hosted
    version: "1.0.4"
  nested:
    dependency: transitive
    description:
      name: nested
      sha256: "03bac4c528c64c95c722ec99280375a6f2fc708eec17c7b3f07253b626cd2a20"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.0"
  package_config:
    dependency: transitive
    description:
      name: package_config
      sha256: "1c5b77ccc91e4823a5af61ee74e6b972db1ef98c2ff5a18d3161c982a55448bd"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.0"
  path:
    dependency: transitive
    description:
      name: path
      sha256: "8829d8a55c13fc0e37127c29fedf290c102f4e40ae94ada574091fe0ff96c917"
      url: "https://pub.dev"
    source: hosted
    version: "1.8.3"
  path_provider:
    dependency: transitive
    description:
      name: path_provider
      sha256: a1aa8aaa2542a6bc57e381f132af822420216c80d4781f7aa085ca3229208aaa
      url: "https://pub.dev"
    source: hosted
    version: "2.1.1"
  path_provider_android:
    dependency: transitive
    description:
      name: path_provider_android
      sha256: e595b98692943b4881b219f0a9e3945118d3c16bd7e2813f98ec6e532d905f72
      url: "https://pub.dev"
    source: hosted
    version: "2.2.1"
  path_provider_foundation:
    dependency: transitive
    description:
      name: path_provider_foundation
      sha256: "19314d595120f82aca0ba62787d58dde2cc6b5df7d2f0daf72489e38d1b57f2d"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.1"
  path_provider_linux:
    dependency: transitive
    description:
      name: path_provider_linux
      sha256: f7a1fe3a634fe7734c8d3f2766ad746ae2a2884abe22e241a8b301bf5cac3279
      url: "https://pub.dev"
    source: hosted
    version: "2.2.1"
  path_provider_platform_interface:
    dependency: transitive
    description:
      name: path_provider_platform_interface
      sha256: "94b1e0dd80970c1ce43d5d4e050a9918fce4f4a775e6142424c30a29a363265c"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.1"
  path_provider_windows:
    dependency: transitive
    description:
      name: path_provider_windows
      sha256: "8bc9f22eee8690981c22aa7fc602f5c85b497a6fb2ceb35ee5a5e5ed85ad8170"
      url: "https://pub.dev"
    source: hosted
    version: "2.2.1"
  platform:
    dependency: transitive
    description:
      name: platform
      sha256: "0a279f0707af40c890e80b1e9df8bb761694c074ba7e1d4ab1bc4b728e200b59"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.3"
  plugin_platform_interface:
    dependency: transitive
    description:
      name: plugin_platform_interface
      sha256: da3fdfeccc4d4ff2da8f8c556704c08f912542c5fb3cf2233ed75372384a034d
      url: "https://pub.dev"
    source: hosted
    version: "2.1.6"
  pointycastle:
    dependency: transitive
    description:
      name: pointycastle
      sha256: "7c1e5f0d23c9016c5bbd8b1473d0d3fb3fc851b876046039509e18e0c7485f2c"
      url: "https://pub.dev"
    source: hosted
    version: "3.7.3"
  pool:
    dependency: transitive
    description:
      name: pool
      sha256: "20fe868b6314b322ea036ba325e6fc0711a22948856475e2c2b6306e8ab39c2a"
      url: "https://pub.dev"
    source: hosted
    version: "1.5.1"
  provider:
    dependency: transitive
    description:
      name: provider
      sha256: "9a96a0a19b594dbc5bf0f1f27d2bc67d5f95957359b461cd9feb44ed6ae75096"
      url: "https://pub.dev"
    source: hosted
    version: "6.1.1"
  pub_semver:
    dependency: transitive
    description:
      name: pub_semver
      sha256: "40d3ab1bbd474c4c2328c91e3a7df8c6dd629b79ece4c4bd04bee496a224fb0c"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.4"
  pubspec_parse:
    dependency: transitive
    description:
      name: pubspec_parse
      sha256: c63b2876e58e194e4b0828fcb080ad0e06d051cb607a6be51a9e084f47cb9367
      url: "https://pub.dev"
    source: hosted
    version: "1.2.3"
  sanitize_html:
    dependency: transitive
    description:
      name: sanitize_html
      sha256: "12669c4a913688a26555323fb9cec373d8f9fbe091f2d01c40c723b33caa8989"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.0"
  sec:
    dependency: transitive
    description:
      name: sec
      sha256: "8bbd56df884502192a441b5f5d667265498f2f8728a282beccd9db79e215f379"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.0"
  shelf:
    dependency: transitive
    description:
      name: shelf
      sha256: ad29c505aee705f41a4d8963641f91ac4cee3c8fad5947e033390a7bd8180fa4
      url: "https://pub.dev"
    source: hosted
    version: "1.4.1"
  shelf_web_socket:
    dependency: transitive
    description:
      name: shelf_web_socket
      sha256: "9ca081be41c60190ebcb4766b2486a7d50261db7bd0f5d9615f2d653637a84c1"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.4"
  sky_engine:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.99"
  source_gen:
    dependency: transitive
    description:
      name: source_gen
      sha256: "373f96cf5a8744bc9816c1ff41cf5391bbdbe3d7a96fe98c622b6738a8a7bd33"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.2"
  source_span:
    dependency: transitive
    description:
      name: source_span
      sha256: "53e943d4206a5e30df338fd4c6e7a077e02254531b138a15aec3bd143c1a8b3c"
      url: "https://pub.dev"
    source: hosted
    version: "1.10.0"
  stack_trace:
    dependency: transitive
    description:
      name: stack_trace
      sha256: c3c7d8edb15bee7f0f74debd4b9c5f3c2ea86766fe4178eb2a18eb30a0bdaed5
      url: "https://pub.dev"
    source: hosted
    version: "1.11.0"
  stream_channel:
    dependency: transitive
    description:
      name: stream_channel
      sha256: "83615bee9045c1d322bbbd1ba209b7a749c2cbcdcb3fdd1df8eb488b3279c1c8"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.1"
  stream_transform:
    dependency: transitive
    description:
      name: stream_transform
      sha256: "14a00e794c7c11aa145a170587321aedce29769c08d7f58b1d141da75e3b1c6f"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.0"
  string_scanner:
    dependency: transitive
    description:
      name: string_scanner
      sha256: "556692adab6cfa87322a115640c11f13cb77b3f076ddcc5d6ae3c20242bedcde"
      url: "https://pub.dev"
    source: hosted
    version: "1.2.0"
  term_glyph:
    dependency: transitive
    description:
      name: term_glyph
      sha256: a29248a84fbb7c79282b40b8c72a1209db169a2e0542bce341da992fe1bc7e84
      url: "https://pub.dev"
    source: hosted
    version: "1.2.1"
  test_api:
    dependency: transitive
    description:
      name: test_api
      sha256: "75760ffd7786fffdfb9597c35c5b27eaeec82be8edfb6d71d32651128ed7aab8"
      url: "https://pub.dev"
    source: hosted
    version: "0.6.0"
  timing:
    dependency: transitive
    description:
      name: timing
      sha256: "70a3b636575d4163c477e6de42f247a23b315ae20e86442bebe32d3cabf61c32"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.1"
  typed_data:
    dependency: transitive
    description:
      name: typed_data
      sha256: facc8d6582f16042dd49f2463ff1bd6e2c9ef9f3d5da3d9b087e244a7b564b3c
      url: "https://pub.dev"
    source: hosted
    version: "1.3.2"
  uuid:
    dependency: transitive
    description:
      name: uuid
      sha256: "648e103079f7c64a36dc7d39369cabb358d377078a051d6ae2ad3aa539519313"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.7"
  vector_math:
    dependency: transitive
    description:
      name: vector_math
      sha256: "80b3257d1492ce4d091729e3a67a60407d227c27241d6927be0130c98e741803"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.4"
  wallet:
    dependency: transitive
    description:
      name: wallet
      sha256: "687fd89a16557649b26189e597792962f405797fc64113e8758eabc2c2605c32"
      url: "https://pub.dev"
    source: hosted
    version: "0.0.13"
  watcher:
    dependency: transitive
    description:
      name: watcher
      sha256: "6a7f46926b01ce81bfc339da6a7f20afbe7733eff9846f6d6a5466aa4c6667c0"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.2"
  web:
    dependency: transitive
    description:
      name: web
      sha256: dc8ccd225a2005c1be616fe02951e2e342092edf968cf0844220383757ef8f10
      url: "https://pub.dev"
    source: hosted
    version: "0.1.4-beta"
  web3dart:
    dependency: "direct main"
    description:
      name: web3dart
      sha256: "0b96223a6b284e3146e65dc842ded139eca68a85c4ab79c5ba1a73284927d3cd"
      url: "https://pub.dev"
    source: hosted
    version: "2.6.1"
  web_socket_channel:
    dependency: transitive
    description:
      name: web_socket_channel
      sha256: d88238e5eac9a42bb43ca4e721edba3c08c6354d4a53063afaa568516217621b
      url: "https://pub.dev"
    source: hosted
    version: "2.4.0"
  win32:
    dependency: transitive
    description:
      name: win32
      sha256: "5a751eddf9db89b3e5f9d50c20ab8612296e4e8db69009788d6c8b060a84191c"
      url: "https://pub.dev"
    source: hosted
    version: "4.1.4"
  xdg_directories:
    dependency: transitive
    description:
      name: xdg_directories
      sha256: "589ada45ba9e39405c198fe34eb0f607cddb2108527e658136120892beac46d2"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.3"
  yaml:
    dependency: transitive
    description:
      name: yaml
      sha256: "75769501ea3489fca56601ff33454fe45507ea3bfb014161abc3b43ae25989d5"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.2"
sdks:
  dart: ">=3.1.0-185.0.dev <4.0.0"
  flutter: ">=3.7.0"
name: web3_delivery_payments
description: A new Flutter project.
publish_to: "none" 
version: 1.0.0+1

environment:
  sdk: ">=2.19.0 <3.0.0"

dependencies:
  flutter:
    sdk: flutter

      cupertino_icons: ^1.0.2
  dio: ^5.0.2
  google_maps_flutter: ^2.3.0
  geolocator: ^9.0.2
  flutter_bloc: ^8.1.2
  equatable: ^2.0.5
  logger: ^2.0.1
  go_router: ^10.0.0
  web3dart: ^2.3.5
  http: ^0.13.4
  envied: ^0.3.0+3
  google_fonts: ^4.0.4

dev_dependencies:
  flutter_test:
    sdk: flutter

            flutter_lints: ^2.0.0
  envied_generator: ^0.3.0+3
  build_runner: ^2.3.3


flutter:
        uses-material-design: true

    assets:
    - assets/icons/
    - assets/contracts/
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:web3_delivery_payments/router.dart';

class SplashPage extends StatefulWidget {
  const SplashPage({super.key});

  @override
  State<SplashPage> createState() => _SplashPageState();
}

class _SplashPageState extends State<SplashPage> {
  @override
  void initState() {
    // move to login page after 2 seconds
    Future.delayed(
      const Duration(seconds: 2),
      () => context.goNamed(MyRouter.homeRouteName),
    );
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [
              Color(0xFF4ade80),
              Color(0xFF3b82f6),
            ],
          ),
        ),
        child: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: const [
              Spacer(),
              Icon(
                Icons.vpn_lock,
                size: 100.0,
                color: Colors.white,
              ),
              SizedBox(height: 20),
              Text(
                'Web3 Based Delivery Payment',
                textAlign: TextAlign.center,
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 32,
                  fontWeight: FontWeight.bold,
                ),
              ),
              Spacer(),
              Padding(
                padding: EdgeInsets.all(20),
                child: Text(
                  'Prepare to dive into the future',
                  textAlign: TextAlign.center,
                  style: TextStyle(
                    color: Colors.white70,
                    fontSize: 16,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:web3_delivery_payments/features/home/view/home_page.dart';
import 'package:web3_delivery_payments/features/navigation/view/navigation_page.dart';
import 'package:web3_delivery_payments/features/splash/view/splash_page.dart';

class MyRouter {
  static String splashRouteName = '/splash';
  static String homeRouteName = '/';
  static String navigationRouteName = '/navigation';

  static GoRouter router = GoRouter(
    debugLogDiagnostics: kDebugMode,
    initialLocation: '/splash',
    routes: [
      GoRoute(
        name: splashRouteName,
        path: '/splash',
        pageBuilder: (context, state) {
          return const NoTransitionPage(child: SplashPage());
        },
      ),
      GoRoute(
        name: homeRouteName,
        path: '/',
        pageBuilder: (context, state) => CustomTransitionPage<void>(
          key: state.pageKey,
          child: const HomePage(),
          transitionsBuilder: (context, animation, secondaryAnimation, child) =>
              FadeTransition(opacity: animation, child: child),
        ),
      ),
      GoRoute(
        name: navigationRouteName,
        path: '/navigation',
        builder: (context, state) => const NavigationPage(),
      )
    ],
    errorBuilder: (context, state) => Scaffold(
      body: Center(
        child: Text(
          state.error == null ? 'Something went wrong' : state.error.toString(),
        ),
      ),
    ),
    redirect: (context, state) {
      //Returns null to say you are not redirecting.
      return null;
    },
  );
}
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 33
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.web3_delivery_payments"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android        minSdkVersion 20
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.web3_delivery_payments">

    <!-- START: geolocator configuration -->
     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
    <!-- END: geolocator configuration -->

    <uses-permission android:name="android.permission.INTERNET"/>

   <application
        android:label="web3_delivery_payments"
        android:name="${applicationName}"
        android:icon="@mipmap/ic_launcher">
        <!-- START: google maps flutter configuration -->
         <meta-data android:name="com.google.android.geo.API_KEY"
               android:value="YOUR KEY HERE"/>
        <!-- END: google maps flutter configuration -->

        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:launchMode="singleTop"
            android:theme="@style/LaunchTheme"
            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
            android:hardwareAccelerated="true"
            android:windowSoftInputMode="adjustResize">

            <!-- Specifies an Android theme to apply to this Activity as soon as
                 the Android process has started. This theme is visible to the user
                 while the Flutter UI initializes. After that, this theme continues
                 to determine the Window background behind the Flutter UI. -->
            <meta-data
              android:name="io.flutter.embedding.android.NormalTheme"
              android:resource="@style/NormalTheme"
              />
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>
        <!-- Don't delete the meta-data below.
             This is used by the Flutter tool to generate GeneratedPluginRegistrant.java -->
        <meta-data
            android:name="flutterEmbedding"
            android:value="2" />
    </application>
</manifest>
buildscript {
    ext.kotlin_version = '1.7.10'
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.2.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.buildDir = '../build'
subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"
}
subprojects {
    project.evaluationDependsOn(':app')
}

tasks.register("clean", Delete) {
    delete rootProject.buildDir
}
import UIKit
import Flutter
import GoogleMaps

@UIApplicationMain
@objc class AppDelegate: FlutterAppDelegate {
  override func application(
    _ application: UIApplication,
    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?
  ) -> Bool {
    GMSServices.provideAPIKey("YOUR KEY HERE")
    GeneratedPluginRegistrant.register(with: self)
    return super.application(application, didFinishLaunchingWithOptions: launchOptions)
  }
}
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CFBundleDevelopmentRegion</key>
	<string>$(DEVELOPMENT_LANGUAGE)</string>
	<key>CFBundleDisplayName</key>
	<string>Web3 Delivery Payments</string>
	<key>CFBundleExecutable</key>
	<string>$(EXECUTABLE_NAME)</string>
	<key>CFBundleIdentifier</key>
	<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>web3_delivery_payments</string>
	<key>CFBundlePackageType</key>
	<string>APPL</string>
	<key>CFBundleShortVersionString</key>
	<string>$(FLUTTER_BUILD_NAME)</string>
	<key>CFBundleSignature</key>
	<string>????</string>
	<key>CFBundleVersion</key>
	<string>$(FLUTTER_BUILD_NUMBER)</string>
	<key>LSRequiresIPhoneOS</key>
	<true/>
	<key>UILaunchStoryboardName</key>
	<string>LaunchScreen</string>
	<key>UIMainStoryboardFile</key>
	<string>Main</string>
	<key>UISupportedInterfaceOrientations</key>
	<array>
		<string>UIInterfaceOrientationPortrait</string>
		<string>UIInterfaceOrientationLandscapeLeft</string>
		<string>UIInterfaceOrientationLandscapeRight</string>
	</array>
	<key>UISupportedInterfaceOrientations~ipad</key>
	<array>
		<string>UIInterfaceOrientationPortrait</string>
		<string>UIInterfaceOrientationPortraitUpsideDown</string>
		<string>UIInterfaceOrientationLandscapeLeft</string>
		<string>UIInterfaceOrientationLandscapeRight</string>
	</array>
	<key>UIViewControllerBasedStatusBarAppearance</key>
	<false/>
	<key>CADisableMinimumFrameDurationOnPhone</key>
	<true/>
	<key>UIApplicationSupportsIndirectInputEvents</key>
	<true/>
	<key>NSLocationWhenInUseUsageDescription</key>
	<string>This app needs access to location when open to accurately show your location on map.</string>
	<key>NSLocationAlwaysUsageDescription</key>
	<string>This app needs access to location when open to accurately show your location on map.</string>
</dict>
</plist>
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:web3_delivery_payments/common/widgets/snackbar_widget.dart';
import 'package:web3_delivery_payments/features/navigation/bloc/navigation_bloc.dart';
import 'package:web3_delivery_payments/features/navigation/widgets/map_widget.dart';
import 'package:web3_delivery_payments/router.dart';

class NavigationPage extends StatefulWidget {
  const NavigationPage({super.key});

  @override
  State<NavigationPage> createState() => _NavigationPageState();
}

class _NavigationPageState extends State<NavigationPage> {
  @override
  void initState() {
    context.read<NavigationBloc>().add(GetCurrentPosition());
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: MultiBlocListener(
        listeners: [
          BlocListener<NavigationBloc, NavigationState>(
            listenWhen: (previous, current) =>
                previous.status != current.status,
            listener: (context, state) {
              if (state.status == NavigationStatus.error) {
                showSnackbar(
                    context, SnackbarType.error, state.failure.message);
              }

              if (state.status == NavigationStatus.completed) {
                // show alert dialog
                showDialog(
                    context: context,
                    builder: (context) {
                      return AlertDialog(
                        title: const Text("Success"),
                        content: const Text(
                            'Delivery completed. Await for the admin to dispose the funds.'),
                        actions: [
                          TextButton(
                            onPressed: () {
                              context.goNamed(MyRouter.homeRouteName);
                            },
                            child: Text('Ok'),
                          ),
                        ],
                      );
                    });
              }
            },
          ),
          BlocListener<NavigationBloc, NavigationState>(
            listenWhen: (previous, current) =>
                previous.geoStatus != current.geoStatus,
            listener: (context, state) {
              if (state.geoStatus == GeoStatus.permissionDenied ||
                  state.geoStatus == GeoStatus.permissionDeniedPermanently ||
                  state.geoStatus == GeoStatus.serviceDisabled) {
                showSnackbar(
                    context, SnackbarType.error, state.failure.message);
              }
            },
          ),
        ],
        child: BlocBuilder<NavigationBloc, NavigationState>(
          builder: (context, state) {
            if (state.status == NavigationStatus.initial ||
                state.status == NavigationStatus.loading) {
              return const Center(child: CircularProgressIndicator());
            }
            if (state.geoStatus != GeoStatus.loaded) {
              return const Center(child: CircularProgressIndicator());
            }
            return const MapWidget();
          },
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:web3_delivery_payments/common/blocs/bloc/wallet_bloc.dart';
import 'package:web3_delivery_payments/common/widgets/snack_bar_widget.dart';
import 'package:web3_delivery_payments/utils/constants/app_constants.dart';

class LoginPage extends StatefulWidget {
  const LoginPage({super.key});

  @override
  State<LoginPage> createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey();
  BuildContext? dialogContext;
  final String signatureFromBackend = "Web3 based delivery payment.";

  buildShowDialog(BuildContext context) {
    return showDialog(
        context: _scaffoldKey.currentContext ?? context,
        barrierDismissible: true, //if user should not
        //cancel this dialog then set as false
        builder: (BuildContext dialogContextL) {
          dialogContext = dialogContextL;
          return BlocBuilder<WalletBloc, WalletState>(
              builder: (context, state) {
            return AlertDialog(
              contentPadding: const EdgeInsets.all(0),
              backgroundColor: Colors.green,
              content: Container(
                padding: const EdgeInsets.all(10),
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    const Align(
                      alignment: Alignment.center,
                      child: CircularProgressIndicator(
                        color: Colors.white,
                      ),
                    ),
                    const SizedBox(
                      height: 20,
                    ),
                    getText(state),
                  ],
                ),
              ),
            );
          });
        });
  }

  getText(WalletState state) {
    String message = "";
    if (state is WalletInitializedState) {
      //initialized metamask success
      message = state.message;
    } else if (state is WalletAuthorizedState) {
      //received authorized approval success
      message = state.message;
    } else if (state is WalletReceivedSignatureState) {
      //received signature from metamask success
      message = state.message;
    }
    return Text(
      message,
      style: const TextStyle(fontSize: 18, color: Colors.white),
    );
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener<WalletBloc, WalletState>(
      listener: (context, state) {
        if (state is WalletErrorState) {
          Navigator.pop(context);
          ShowSnackBar.buildSnackbar(context, state.message, true);
        } else if (state is WalletReceivedSignatureState) {
          //received signature from metamask success
          Navigator.pop(context);
          ShowSnackBar.buildSnackbar(
              context, AppConstants.authenticationSuccessful);
        }
      },
      child: Scaffold(
        key: _scaffoldKey,
        body: Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [
                Color(0xFF4ade80),
                Color(0xFF3b82f6),
              ],
            ),
          ),
          child: Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: <Widget>[
                const Spacer(),
                const Text(
                  'Connect to an account to continue ',
                  textAlign: TextAlign.center,
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 32,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 80),
                GradientElevatedButton(
                  onPressed: () {
                    BlocProvider.of<WalletBloc>(context).add(
                      MetamaskAuthEvent(
                          signatureFromBackend: signatureFromBackend),
                    );
                    buildShowDialog(context);
                  },
                  gradient: const LinearGradient(
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                      colors: [
                        Color(0xFFc084fc),
                        Color(0xFFec4899),
                        Color(0xFFef4444),
                      ]),
                  child: const Text('Connect'),
                ),
                const Spacer(),
                const Padding(
                  padding: EdgeInsets.all(20),
                  child: Text(
                    'Powered by WEB3',
                    textAlign: TextAlign.center,
                    style: TextStyle(
                      color: Colors.white70,
                      fontSize: 16,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

class GradientElevatedButton extends StatelessWidget {
  final LinearGradient gradient;
  final Widget child;
  final VoidCallback onPressed;

  const GradientElevatedButton({
    Key? key,
    required this.gradient,
    required this.child,
    required this.onPressed,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      width: double.infinity,
      margin: const EdgeInsets.symmetric(horizontal: 44.0),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(99.0),
        gradient: gradient,
      ),
      child: ElevatedButton(
        style: ElevatedButton.styleFrom(
          backgroundColor: Colors.transparent,
          shadowColor: Colors.transparent,
          padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 12.0),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(99.0),
          ),
        ),
        onPressed: onPressed,
        child: child,
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:web3_delivery_payments/common/widgets/gradient_button.dart';
import 'package:web3_delivery_payments/router.dart';

class HomePage extends StatelessWidget {
  const HomePage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [
              Color(0xFF4ade80),
              Color(0xFF3b82f6),
            ],
          ),
        ),
        child: Column(
          children: [
            Expanded(
              flex: 2,
              child: Container(
                margin: const EdgeInsets.only(top: 90, left: 20),
                child: const Column(
                  children: [
                    Icon(
                      Icons.fire_truck,
                      size: 100.0,
                      color: Colors.white,
                    ),
                    SizedBox(height: 40),
                    Text(
                      'Are you ready to start your delivery?',
                      textAlign: TextAlign.center,
                      style: TextStyle(
                        fontSize: 24,
                        color: Colors.white,
                      ),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 100),
            Flexible(
              child: GradientElevatedButton(
                onPressed: () {
                  context.pushNamed(MyRouter.navigationRouteName);
                },
                gradient: const LinearGradient(
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                    colors: [
                      Color(0xFFc084fc),
                      Color(0xFFec4899),
                      Color(0xFFef4444),
                    ]),
                child: const Text('Start Delivery'),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:web3_delivery_payments/features/navigation/bloc/navigation_bloc.dart';

class MapWidget extends StatefulWidget {
  const MapWidget({super.key});

  @override
  State<MapWidget> createState() => _MapWidgetState();
}

class _MapWidgetState extends State<MapWidget> {
  late GoogleMapController _mapController;
  final Completer<GoogleMapController> _controller = Completer();

  Future<void> _goToTheCurrentPositon(
      BuildContext context, LatLng position) async {
    _mapController = await _controller.future;
    _mapController.animateCamera(CameraUpdate.newCameraPosition(
        CameraPosition(target: position, zoom: 15)));
    if (context.read<NavigationBloc>().state.latLngBounds !=
        LatLngBounds(
            southwest: const LatLng(0, 0), northeast: const LatLng(0, 0))) {
      _mapController.animateCamera(CameraUpdate.newLatLngBounds(
          context.read<NavigationBloc>().state.latLngBounds, 70));
    }
  }

  @override
  void dispose() {
    _mapController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<NavigationBloc, NavigationState>(
      builder: (context, state) {
        return GoogleMap(
          mapToolbarEnabled: false,
          zoomControlsEnabled: false,
          myLocationButtonEnabled: false,
          myLocationEnabled: true,
          markers: state.markers,
          initialCameraPosition: CameraPosition(
            target: LatLng(
              state.currentUserPosition!.latitude,
              state.currentUserPosition!.longitude,
            ),
            zoom: 16,
          ),
          onMapCreated: (controller) async {
            setState(() {
              _mapController = controller;
            });
            _goToTheCurrentPositon(
                context,
                LatLng(state.currentUserPosition!.latitude,
                    state.currentUserPosition!.longitude));
          },
          polylines: context.read<NavigationBloc>().state.polyLines,
        );
      },
    );
  }
}
import 'package:equatable/equatable.dart';

class Checkpoint extends Equatable {
  final int id;
  final double lat;
  final double lng;
  final int timestamp;
  final int distance;

  const Checkpoint({
    required this.id,
    required this.lat,
    required this.lng,
    required this.timestamp,
    required this.distance,
  });

  @override
  List<Object?> get props => [id, lat, lng, timestamp, distance];
}
import 'package:flutter/services.dart';
import 'package:web3_delivery_payments/common/models/checkpoint_model.dart';
import 'package:web3_delivery_payments/env/env.dart';
import 'package:web3dart/web3dart.dart';
import 'package:http/http.dart' as http;

class SmartContractRepository {
  final String _rpcUrl = Env.rpcURL;

  final String _privatekey = Env.privateKey;
  late Web3Client _web3cient;

  SmartContractRepository() {
    init();
  }

  Future<void> init() async {
    _web3cient = Web3Client(
      _rpcUrl,
      http.Client(),
    );
    await getABI();
    await getCredentials();
    await getDeployedContract();
  }

  late ContractAbi _abiCode;
  late EthereumAddress _contractAddress;
  Future<void> getABI() async {
    String abiFile =
        await rootBundle.loadString('assets/contracts/GeoLogix.json');
    _abiCode = ContractAbi.fromJson(abiFile, 'GeoLogix');
    _contractAddress =
        EthereumAddress.fromHex('0x4A2daBF66f5f6ec37e6c2598722Ad39Dee6762D0');
  }

  late EthPrivateKey _creds;
  Future<void> getCredentials() async {
    _creds = EthPrivateKey.fromHex(_privatekey);
  }

  late DeployedContract _deployedContract;

  late ContractFunction _checkpointIds;
  late ContractFunction _checkpointsMap;

  late ContractFunction _ingestTelemetry;

  late ContractFunction _complianceIds;
  late ContractFunction _compliancesMap;

  late ContractFunction _nonComplianceIds;
  late ContractFunction _nonCompliancesMap;

  Future<void> getDeployedContract() async {
    _deployedContract = DeployedContract(_abiCode, _contractAddress);

    _checkpointIds = _deployedContract.function('getCheckpointIds');
    _checkpointsMap = _deployedContract.function('checkpointsMap');

    _ingestTelemetry = _deployedContract.function('IngestTelemetry');

    _complianceIds = _deployedContract.function('getComplianceIds');
    _compliancesMap = _deployedContract.function('compliancesMap');

    _nonComplianceIds = _deployedContract.function('getNonComplianceIds');
    _nonCompliancesMap = _deployedContract.function('nonCompliancesMap');
    await fetchCheckpoints();
  }

  Future<List<Checkpoint>> fetchCheckpoints() async {
    List<Checkpoint> checkpoints = [];
    List checkpointIds = await _web3cient.call(
      contract: _deployedContract,
      function: _checkpointIds,
      params: [],
    );
    // checkpointIds was an array that had [[0,1,2...]]
    checkpointIds = checkpointIds[0];

    for (var i = 0; i < checkpointIds.length; i++) {
      final id = checkpointIds[i];
      var temp = await _web3cient.call(
          contract: _deployedContract, function: _checkpointsMap, params: [id]);
      checkpoints.add(
        Checkpoint(
          id: (temp[0] as BigInt).toInt(),
          lat: ((temp[1] as BigInt).toInt() / 100000).toDouble(),
          lng: ((temp[2] as BigInt).toInt() / 100000).toDouble(),
          distance: (temp[3] as BigInt).toInt(),
          timestamp: (temp[4] as BigInt).toInt(),
        ),
      );
    }
    return checkpoints;
  }

  Future<List<List<Checkpoint>>> fetchCompliancesAndNonCompliances() async {
    List<Checkpoint> compliances = [];
    List<Checkpoint> nonCompliances = [];

    List complianceIds = await _web3cient.call(
      contract: _deployedContract,
      function: _complianceIds,
      params: [],
    );
    List nonComplianceIds = await _web3cient.call(
      contract: _deployedContract,
      function: _nonComplianceIds,
      params: [],
    );

    for (var i = 0; i < complianceIds.length; i++) {
      final complianceId = complianceIds[i];
      var temp = await _web3cient.call(
          contract: _deployedContract,
          function: _compliancesMap,
          params: [BigInt.from(complianceId)]);
      compliances.add(
        Checkpoint(
          id: (temp[0] as BigInt).toInt(),
          lat: ((temp[1] as BigInt).toInt() / 100000).toDouble(),
          lng: ((temp[2] as BigInt).toInt() / 100000).toDouble(),
          distance: (temp[3] as BigInt).toInt(),
          timestamp: (temp[4] as BigInt).toInt(),
        ),
      );
    }

    for (var i = 0; i < nonComplianceIds.length; i++) {
      final nonComplianceId = nonComplianceIds[i];
      var temp = await _web3cient.call(
          contract: _deployedContract,
          function: _nonCompliancesMap,
          params: [BigInt.from(nonComplianceId)]);
      nonCompliances.add(
        Checkpoint(
          id: (temp[0] as BigInt).toInt(),
          lat: ((temp[1] as BigInt).toInt() / 100000).toDouble(),
          lng: ((temp[2] as BigInt).toInt() / 100000).toDouble(),
          distance: (temp[3] as BigInt).toInt(),
          timestamp: (temp[4] as BigInt).toInt(),
        ),
      );
    }

    return [compliances, nonCompliances];
  }

  Future<void> sendTelemetry(
      int id, int lat, int lng, int distance, int timestamp) async {
    await _web3cient.sendTransaction(
      _creds,
      Transaction.callContract(
        contract: _deployedContract,
        function: _ingestTelemetry,
        parameters: [
          BigInt.from(id),
          BigInt.from(lat),
          BigInt.from(lng),
          BigInt.from(distance),
          BigInt.from(timestamp)
        ],
      ),
      chainId: 11155111,
    );
  }
}
import 'dart:typed_data';

import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter/material.dart';
import 'package:geolocator/geolocator.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:meta/meta.dart';
import 'package:web3_delivery_payments/common/models/checkpoint_model.dart';
import 'package:web3_delivery_payments/common/models/direction_model.dart';
import 'package:web3_delivery_payments/common/models/failure_model.dart';
import 'package:web3_delivery_payments/common/repositories/smart_contract_repository.dart';
import 'package:web3_delivery_payments/features/navigation/repository/geolocation_repository.dart';
import 'package:web3_delivery_payments/utils/helper_functions.dart';
import 'package:web3_delivery_payments/utils/image_util.dart';

part 'navigation_event.dart';
part 'navigation_state.dart';

class NavigationBloc extends Bloc<NavigationEvent, NavigationState> {
  final GeoLocationRepository _geoLocationRepository;
  final SmartContractRepository _smartContractRepository;

  Uint8List? driverIcon;

  NavigationBloc(
      {GeoLocationRepository? geoLocationRepository,
      SmartContractRepository? smartContractRepository})
      : _geoLocationRepository =
            geoLocationRepository ?? GeoLocationRepository(),
        _smartContractRepository =
            smartContractRepository ?? SmartContractRepository(),
        super(NavigationState.initial()) {
    on<GetCurrentPosition>(_onGetCurrentPosition);
    on<DriverPositionChanged>(_onDriverPositionChanged);
    on<CompleteDelivery>(_onCompleteDelivery);
  }
  Future<void> _onGetCurrentPosition(
    GetCurrentPosition event,
    Emitter<NavigationState> emit,
  ) async {
    try {
      emit(
        state.copyWith(geoStatus: GeoStatus.loading),
      );
      var geoLocationError = '';
      late Position position;

      final markers = <Marker>{};

      var geoStatus = GeoStatus.initial;

      try {
        position = await _geoLocationRepository.getUserCurrentPosition();
      } catch (e) {
        if (e is LocationServiceDisabledException) {
          geoLocationError =
              'Location service is disabled. Please enable location service'
              " so that we can show you where you need to go";
          geoStatus = GeoStatus.serviceDisabled;
        } else if (e is PermissionDeniedException) {
          if (e.message == 'Denied Permanently') {
            geoLocationError =
                'Location service is disabled. Please enable location service'
                " so that we can show you where you need to go";
            geoStatus = GeoStatus.permissionDeniedPermanently;
          } else {
            geoLocationError =
                'Location service is disabled. Please enable location service'
                " so that we can show you where you need to go";
            geoStatus = GeoStatus.permissionDenied;
          }
        } else {
          geoLocationError = e.toString();
          geoStatus = GeoStatus.permissionDenied;
        }
      }
      LatLngBounds? myLatLongBounds;
      List<LatLng> myPolyPoints = [];
      Set<Polyline> myPolyLines = {};
      List<Checkpoint> checkpoints = [];
      // if there is no error meaning location has been fetched,
      // continue to get nearby prayer places
      if (geoLocationError.isEmpty) {
        driverIcon ??= await getBytesFromAsset('assets/icons/truck.png', 410);
        markers.add(
          Marker(
            markerId: const MarkerId('Driver'),
            position: LatLng(
              position.latitude,
              position.longitude,
            ),
            icon: BitmapDescriptor.fromBytes(driverIcon!),
            infoWindow: const InfoWindow(title: 'Current Location'),
            rotation: position.heading,
            anchor: const Offset(0.5, 0.5),
            zIndex: 2,
          ),
        );

        checkpoints = await _smartContractRepository.fetchCheckpoints();
        if (checkpoints.isNotEmpty) {
          // - set the place name according to the user's locale
          // - if no value found for the user's locale,
          //   set the place name to english name by default
          for (final checkpoint in checkpoints) {
            markers.add(
              Marker(
                onTap: () {},
                markerId: MarkerId(checkpoint.id.toString()),
                position: LatLng(
                  checkpoint.lat,
                  checkpoint.lng,
                ),
                infoWindow: InfoWindow(
                  title: 'Checkpoint ${checkpoint.id}',
                ),
              ),
            );
          }
          final lastCheckpoint = checkpoints.last;
          Direction direction = await _geoLocationRepository.getDirection(
              LatLng(position.latitude, position.longitude),
              LatLng(lastCheckpoint.lat, lastCheckpoint.lng));

          for (int i = 0; i < direction.lineString.length; i++) {
            myPolyPoints.add(
                LatLng(direction.lineString[i][1], direction.lineString[i][0]));
          }
          Polyline polyline = Polyline(
            polylineId: PolylineId("polyline"),
            color: Colors.black,
            width: 5,
            jointType: JointType.round,
            startCap: Cap.roundCap,
            endCap: Cap.roundCap,
            points: myPolyPoints,
            geodesic: true,
          );
          myPolyLines.add(polyline);

          if (position.latitude > lastCheckpoint.lat &&
              position.longitude > lastCheckpoint.lng) {
            myLatLongBounds = LatLngBounds(
                southwest: LatLng(lastCheckpoint.lat, lastCheckpoint.lng),
                northeast: LatLng(position.latitude, position.longitude));
          } else if (position.longitude > lastCheckpoint.lng) {
            myLatLongBounds = LatLngBounds(
                southwest: LatLng(position.latitude, lastCheckpoint.lng),
                northeast: LatLng(lastCheckpoint.lat, position.longitude));
          } else if (position.latitude > lastCheckpoint.lat) {
            myLatLongBounds = LatLngBounds(
                southwest: LatLng(lastCheckpoint.lat, position.longitude),
                northeast: LatLng(position.latitude, lastCheckpoint.lng));
          } else {
            myLatLongBounds = LatLngBounds(
                southwest: LatLng(position.latitude, position.longitude),
                northeast: LatLng(lastCheckpoint.lat, lastCheckpoint.lng));
          }
        }
      }
      emit(
        state.copyWith(
          checkpoints: checkpoints,
          status: NavigationStatus.loaded,
          geoStatus: geoLocationError.isEmpty ? GeoStatus.loaded : geoStatus,
          failure: geoLocationError.isEmpty
              ? const Failure()
              : Failure(message: geoLocationError),
          currentUserPosition: geoLocationError.isEmpty ? position : null,
          markers: markers,
          polyLines: myPolyLines,
          polyPoints: myPolyPoints,
          latLngBounds: myLatLongBounds,
        ),
      );

      _geoLocationRepository.getUserCurrentPositionStream().listen((event) {
        add(DriverPositionChanged(driverPosition: event));
      });
    } catch (e) {
      final errorMessage = decodeErrorResponse(e);
      emit(
        state.copyWith(
          status: NavigationStatus.error,
          failure: Failure(message: errorMessage),
        ),
      );
    }
  }

  void _onDriverPositionChanged(
    DriverPositionChanged event,
    Emitter<NavigationState> emit,
  ) {
    final driverMarker = Marker(
      markerId: const MarkerId('Driver'),
      position: LatLng(
        event.driverPosition.latitude,
        event.driverPosition.longitude,
      ),
      icon: BitmapDescriptor.fromBytes(driverIcon!),
      infoWindow: const InfoWindow(title: 'Current Location'),
      rotation: event.driverPosition.heading,
      anchor: const Offset(0.5, 0.5),
      zIndex: 2,
    );

    Set<Marker> markers = Set.from(state.markers);
    markers.removeWhere((marker) => marker.markerId.value == 'Driver');

    markers.add(driverMarker);
    emit(state.copyWith(
        currentUserPosition: event.driverPosition, markers: markers));

    final checkpointsNotPassed = state.checkpoints
        .where((checkpoint) => !state.passedCheckpoints.contains(checkpoint))
        .toList();

    // check if the driver position is within the specified checkpoint distance,
    // and if so send a call to smart contract
    for (int i = 0; i < checkpointsNotPassed.length; i++) {
      final checkpoint = checkpointsNotPassed[i];
      final distanceBetweenDriverPositionAndCheckpoint =
          _geoLocationRepository.calculateDistance(
              initialLatitude: event.driverPosition.latitude,
              initialLongitude: event.driverPosition.longitude,
              finalLatitude: checkpoint.lat,
              finalLongitude: checkpoint.lng);
      if (distanceBetweenDriverPositionAndCheckpoint <= checkpoint.distance) {
        // it means the driver is within the specified checkpoint distance
        _smartContractRepository.sendTelemetry(
          checkpoint.id,
          int.parse(
              (event.driverPosition.latitude * 100000).toStringAsFixed(0)),
          int.parse(
              (event.driverPosition.longitude * 100000).toStringAsFixed(0)),
          distanceBetweenDriverPositionAndCheckpoint.toInt(),
          DateTime.now().millisecondsSinceEpoch,
        );

        int numberOfPassedCheckpoints = state.passedCheckpoints.length;

        emit(state.copyWith(
            passedCheckpoints: List.from(state.passedCheckpoints)
              ..add(checkpoint)));
        // delivery completed
        if (numberOfPassedCheckpoints + 1 == state.checkpoints.length) {
          add(CompleteDelivery());
        }
      }
    }
  }

  void _onCompleteDelivery(
    CompleteDelivery event,
    Emitter<NavigationState> emit,
  ) {
    emit(state.copyWith(status: NavigationStatus.completed));
  }

  @override
  Future<void> close() {
    _geoLocationRepository.stopRealtimeDriverPositionUpdates();
    return super.close();
  }
}
// ignore_for_file: public_member_api_docs, sort_constructors_first

part of 'navigation_bloc.dart';

enum NavigationStatus { initial, loading, loaded, error, completed }

enum GeoStatus {
  initial,
  loading,
  loaded,
  serviceDisabled,
  permissionDenied,
  permissionDeniedPermanently
}

@immutable
class NavigationState extends Equatable {
  final NavigationStatus status;
  final Failure failure;
  final GeoStatus geoStatus;
  final Set<Marker> markers;
  final Position? currentUserPosition;
  final Set<Polyline> polyLines;
  final List<LatLng> polyPoints;
  final LatLngBounds latLngBounds;
  final List<Checkpoint> checkpoints;
  final List<Checkpoint> passedCheckpoints;

  const NavigationState({
    required this.status,
    required this.geoStatus,
    required this.markers,
    required this.currentUserPosition,
    required this.failure,
    required this.polyLines,
    required this.polyPoints,
    required this.latLngBounds,
    required this.checkpoints,
    required this.passedCheckpoints,
  });

  factory NavigationState.initial() {
    return NavigationState(
      status: NavigationStatus.initial,
      geoStatus: GeoStatus.initial,
      markers: const {},
      currentUserPosition: null,
      failure: const Failure(),
      polyLines: const {},
      polyPoints: const [],
      latLngBounds: LatLngBounds(
          southwest: const LatLng(0, 0), northeast: const LatLng(0, 0)),
      checkpoints: const [],
      passedCheckpoints: const [],
    );
  }

  @override
  List<Object?> get props => [
        status,
        geoStatus,
        markers,
        currentUserPosition,
        failure,
        polyLines,
        polyPoints,
        latLngBounds,
        checkpoints,
        passedCheckpoints,
      ];

  NavigationState copyWith({
    NavigationStatus? status,
    GeoStatus? geoStatus,
    Set<Marker>? markers,
    Position? currentUserPosition,
    Failure? failure,
    Set<Polyline>? polyLines,
    List<LatLng>? polyPoints,
    LatLngBounds? latLngBounds,
    List<Checkpoint>? checkpoints,
    List<Checkpoint>? passedCheckpoints,
  }) {
    return NavigationState(
      status: status ?? this.status,
      geoStatus: geoStatus ?? this.geoStatus,
      markers: markers ?? this.markers,
      currentUserPosition: currentUserPosition ?? this.currentUserPosition,
      failure: failure ?? this.failure,
      polyLines: polyLines ?? this.polyLines,
      polyPoints: polyPoints ?? this.polyPoints,
      latLngBounds: latLngBounds ?? this.latLngBounds,
      checkpoints: checkpoints ?? this.checkpoints,
      passedCheckpoints: passedCheckpoints ?? this.passedCheckpoints,
    );
  }
}
import 'dart:async';

import 'package:dio/dio.dart';
import 'package:geolocator/geolocator.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:web3_delivery_payments/common/models/direction_model.dart';
import 'package:web3_delivery_payments/env/env.dart';

class GeoLocationRepository {
  StreamController<Position>? _driverPositionStreamController;
  StreamSubscription? _driverPositionStream;

  Future<Position> getUserCurrentPosition() async {
    LocationPermission permission;
    permission = await Geolocator.checkPermission();
    if (permission == LocationPermission.denied) {
      permission = await Geolocator.requestPermission();
      if (permission == LocationPermission.denied) {
        // happens if permission is denied when asked for first time
        throw const PermissionDeniedException('Denied Temporarily');
      }
      if (permission == LocationPermission.deniedForever) {
        // happens if permission is denied when asked for 2nd time
        throw const PermissionDeniedException('Denied Permanently');
      }
    }

    // getting last known position
    var position = await Geolocator.getLastKnownPosition();

    // position can be null if there is no record of last known position
    // in that case perform a latest current position request
    if (position == null) {
      return Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
      );
    }

    // check if last updated position time is more than an hour ago
    // if true update to latest current position
    if (position.timestamp != null &&
        position.timestamp!.millisecondsSinceEpoch <
            DateTime.now().millisecondsSinceEpoch - 3600000) {
      position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
      );
    }

    return position;
  }

  Stream<Position> getUserCurrentPositionStream() async* {
    _driverPositionStreamController = StreamController<Position>();

    const LocationSettings locationSettings = LocationSettings(
      accuracy: LocationAccuracy.high,
      distanceFilter: 50, // 50 meters
    );
    _driverPositionStream =
        Geolocator.getPositionStream(locationSettings: locationSettings)
            .listen((Position? position) {
      if (position != null) {
        _driverPositionStreamController?.add(position);
      }
    });
    yield* _driverPositionStreamController!.stream;
  }

  double calculateDistance({
    required double initialLatitude,
    required double initialLongitude,
    required double finalLatitude,
    required double finalLongitude,
  }) {
    return Geolocator.distanceBetween(
      initialLatitude,
      initialLongitude,
      finalLatitude,
      finalLongitude,
    );
  }

  Future<Direction> getDirection(
      LatLng startLocation, LatLng endLocation) async {
    var response = await Dio().get(
        'https://api.openrouteservice.org/v2/directions/driving-car?api_key=${Env.routeAPIKey}&start=${startLocation.longitude},${startLocation.latitude}&end=${endLocation.longitude},${endLocation.latitude}');

    Direction direction = Direction.fromJson(response.data);
    return direction;
  }

  Future<void> stopRealtimeDriverPositionUpdates() async {
    await _driverPositionStream?.cancel();
    await _driverPositionStreamController?.close();
  }
}
part of 'navigation_bloc.dart';

@immutable
abstract class NavigationEvent extends Equatable {
  @override
  List<Object> get props => [];
}

class GetCurrentPosition extends NavigationEvent {}

class DriverPositionChanged extends NavigationEvent {
  final Position driverPosition;
  DriverPositionChanged({required this.driverPosition});
}

class CompleteDelivery extends NavigationEvent {}
// pragma solidity >=0.4.22 <0.9.0;
pragma solidity ^ 0.4.20;

contract Casino { 
   address public owner;

    uint256 public minimumBet;
    uint256 public totalBet;
    uint256 public numberOfBets;
    uint256 public maxAmountOfBets = 100;
    address[] public players;
    struct Player {
        uint256 amountBet;
        uint256 numberSelected;
    }
    // The address of the player and => the user info   
    mapping(address => Player) public playerInfo;

    constructor () public {
        owner = msg.sender;
        // if(_minimumBet != 0 ) 
        minimumBet = 10;
    }
    function kill() public {
        if(msg.sender == owner) selfdestruct(owner);
    }
    function checkPlayerExists(address player) public constant returns(bool){
        for(uint256 i = 0; i < players.length; i++){
            if(players[i] == player) return true;
        }
        return false;
    }
    // To bet for a number between 1 and 10 both inclusive
    function bet(uint256 numberSelected) public payable {
        require(!checkPlayerExists(msg.sender));
        require(numberSelected >= 1 && numberSelected <= 10);
        require(msg.value >= minimumBet);
        playerInfo[msg.sender].amountBet = msg.value;
        playerInfo[msg.sender].numberSelected = numberSelected;
        numberOfBets++;
        players.push(msg.sender);
        totalBet += msg.value;
        if(numberOfBets >= maxAmountOfBets) generateNumberWinner();
    }
    // Generates a number between 1 and 10 that will be the winner
    function generateNumberWinner() public {
        uint256 numberGenerated = block.number % 10 + 1; // This isn't secure
        distributePrizes(numberGenerated);
    }
    // Sends the corresponding ether to each winner depending on the total bets
    function distributePrizes(uint256 numberWinner) public {
        address[100] memory winners; // We have to create a temporary in memory array with fixed size
        uint256 count = 0; // This is the count for the array of winners
        for(uint256 i = 0; i < players.length; i++){
            address playerAddress = players[i];
            if(playerInfo[playerAddress].numberSelected == numberWinner){
                winners[count] = playerAddress;
                count++;
            }
            delete playerInfo[playerAddress]; // Delete all the players
        }
      
}
body{
    font-family: 'open sans';
    margin: 0;
}
ul{
    list-style-type: none;
    padding-left: 0;
    display: flex;
    justify-content: space-around;
    max-width: 1300px;
}
li{
    padding: 40px;
    border: 2px solid rgb(30,134,255);
    margin-right: 5px;
    border-radius: 10px;
    cursor: pointer;
}
li:hover{
    background-color: rgb(30,134,255);
    color: white;
}
li:active{
    opacity: 0.7;
}
*{
   color: }
.main-container{
   padding: 20px;
}
.block{
   display: flex;
   align-items: center;
}
.number-selected{
   background-color: rgb(30,134,255);
   color: white;
}
.bet-input{
   padding: 15px;
   border-radius: 10px;
   border: 1px solid lightgrey;
   font-size: 15pt;
   margin: 0 10px;
}

@media (max-width: 1100px){
   ul{
      flex-direction: column;
   }
   li{
      margin: 5px 0;
   }
}
import React from 'react'
import ReactDOM from 'react-dom'
import Web3 from 'web3'
import './../css/index.css'

class App extends React.Component {
   constructor(props){
      super(props)
      this.state = {
         lastWinner: 0,
         numberOfBets: 0,
         minimumBet: 0,
         totalBet: 0,
         maxAmountOfBets: 0,
      }

      if(typeof web3 != 'undefined'){
         console.log("Using web3 detected from external source like Metamask")
         this.web3 = new Web3(web3.currentProvider)
      }else{
         console.log("No web3 detected. Falling back to http://localhost:8545. You should remove this fallback when you deploy live, as it's inherently insecure. Consider switching to Metamask for development. More info here: http://truffleframework.com/tutorials/truffle-and-metamask");
         this.web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"))
      }

      const MyContract = web3.eth.contract([{"constant":false,"inputs":[],"name":"generateNumberWinner","outputs":[],"payable":true,"type":"function"},{"constant":false,"inputs":[{"name":"myid","type":"bytes32"},{"name":"result","type":"string"}],"name":"__callback","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"numberOfBets","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_queryId","type":"bytes32"},{"name":"_result","type":"string"},{"name":"_proof","type":"bytes"}],"name":"__callback","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"player","type":"address"}],"name":"checkPlayerExists","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"kill","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"resetData","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"bets","type":"uint256"}],"name":"updateMaxBets","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"number","type":"uint256"}],"name":"bet","outputs":[],"payable":true,"type":"function"},{"constant":false,"inputs":[{"name":"amountWei","type":"uint256"}],"name":"updateMinimumBet","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"distributePrizes","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"numberWinner","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"minimumBet","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"maxAmountOfBets","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"players","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"totalBet","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[{"name":"_maxAmountOfBets","type":"uint256"}],"payable":false,"type":"constructor"},{"payable":true,"type":"fallback"}])
      this.state.ContractInstance = MyContract.at("0x430d959fa54714aca8eecd61fae2661fca900e04")

      window.a = this.state
   }

   componentDidMount(){
      this.updateState()
      this.setupListeners()

      setInterval(this.updateState.bind(this), 7e3)
   }

   updateState(){
      this.state.ContractInstance.minimumBet((err, result) => {
         if(result != null){
            this.setState({
               minimumBet: parseFloat(web3.fromWei(result, 'ether'))
            })
         }
      })
      this.state.ContractInstance.totalBet((err, result) => {
         if(result != null){
            this.setState({
               totalBet: parseFloat(web3.fromWei(result, 'ether'))
            })
         }
      })
      this.state.ContractInstance.numberOfBets((err, result) => {
         if(result != null){
            this.setState({
               numberOfBets: parseInt(result)
            })
         }
      })
      this.state.ContractInstance.maxAmountOfBets((err, result) => {
         if(result != null){
            this.setState({
               maxAmountOfBets: parseInt(result)
            })
         }
      })
   }

   // Listen for events and executes the voteNumber method
   setupListeners(){
      let liNodes = this.refs.numbers.querySelectorAll('li')
      liNodes.forEach(number => {
         number.addEventListener('click', event => {
            event.target.className = 'number-selected'
            this.voteNumber(parseInt(event.target.innerHTML), done => {

               // Remove the other number selected
               for(let i = 0; i < liNodes.length; i++){
                  liNodes[i].className = ''
               }
            })
         })
      })
   }

   voteNumber(number, cb){
      let bet = this.refs['ether-bet'].value

      if(!bet) bet = 0.1

      if(parseFloat(bet) < this.state.minimumBet){
         alert('You must bet more than the minimum')
         cb()
      } else {
         this.state.ContractInstance.bet(number, {
            gas: 300000,
            from: web3.eth.accounts[0],
            value: web3.toWei(bet, 'ether')
         }, (err, result) => {
            cb()
         })
      }
   }

   render(){
      return (
         <div className="main-container">
            <h1>Bet for your best number and win huge amounts of Ether</h1>

            <div className="block">
               <b>Number of bets:</b> &nbsp;
               <span>{this.state.numberOfBets}</span>
            </div>

            <div className="block">
               <b>Last number winner:</b> &nbsp;
               <span>{this.state.lastWinner}</span>
            </div>

            <div className="block">
               <b>Total ether bet:</b> &nbsp;
               <span>{this.state.totalBet} ether</span>
            </div>

            <div className="block">
               <b>Minimum bet:</b> &nbsp;
               <span>{this.state.minimumBet} ether</span>
            </div>

            <div className="block">
               <b>Max amount of bets:</b> &nbsp;
               <span>{this.state.maxAmountOfBets}</span>
            </div>

            <hr/>

            <h2>Vote for the next number</h2>

            <label>
               <b>How much Ether do you want to bet? <input className="bet-input" ref="ether-bet" type="number" placeholder={this.state.minimumBet}/></b> ether
               <br/>
            </label>

            <ul ref="numbers">
               <li>1</li>
               <li>2</li>
               <li>3</li>
               <li>4</li>
               <li>5</li>
               <li>6</li>
               <li>7</li>
               <li>8</li>
               <li>9</li>
               <li>10</li>
            </ul>

            <hr/>

            <div><i>Only working with the Ropsten Test Network</i></div>
            <div><i>You can only vote once per account</i></div>
            <div><i>Your vote will be reflected when the next block is mined</i></div>
         </div>
      )
   }
}

ReactDOM.render(
   <App />,
   document.querySelector(')
import 'package:flutter/material.dart';
import 'package:mobile_app_flutter/logger.dart';
import 'package:flutter_native_splash/flutter_native_splash.dart';

import 'package:mobile_app_flutter/admin_page.dart';
import 'package:mobile_app_flutter/admin_eth.dart';
import 'package:mobile_app_flutter/employee_eth.dart';
import 'package:provider/provider.dart';
import 'package:mobile_app_flutter/employee_page.dart';

var password;

Future main() async {
  WidgetsFlutterBinding.ensureInitialized();
  // ignore: deprecated_member_use
  FlutterNativeSplash.removeAfter(initialization);
  setupLogger();
  runApp(const MyApp());
}

Future initialization(BuildContext? context) async {
  await Future.delayed(Duration(seconds: 6));
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(
          create: (context) => parentModel(),
        ),
        ChangeNotifierProvider(
          create: (context) => childModel(),
        )
      ],
      child: MaterialApp(
        title: 'GeoLocator Demo',
        theme: ThemeData(
          primarySwatch: Colors.blue,
        ),
        home: const MyHomePage(title: 'Demo'),
        debugShowCheckedModeBanner: false,
      ),
    );
  }
}

//
//

class MyHomePage extends StatefulWidget {
  const MyHomePage({Key? key, required this.title}) : super(key: key);
  final String title;
  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

//

class _MyHomePageState extends State<MyHomePage> {
  final TextEditingController _passwordController = TextEditingController();
  int _value = 1;
  String error = '';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            const Text(
              "GeoLocator",
              style: TextStyle(
                fontWeight: FontWeight.bold,
                fontStyle: FontStyle.italic,
                fontSize: 50,
                // color: Color.fromARGB(255, 92, 29, 240),
                color: Colors.blue,
              ),
              textAlign: TextAlign.center,
            ),
            SizedBox(
              height: 20.0,
            ),
            Padding(
              padding: const EdgeInsets.only(
                left: 50,
                right: 50,
                bottom: 10,
              ),
              // 
              child: DropdownButton(
                dropdownColor: Color.fromARGB(255, 6, 138, 150),
                iconEnabledColor: Color.fromARGB(255, 6, 138, 150),
                value: _value,
                items: [
                  DropdownMenuItem<int>(
                    child: Text("Admin"),
                    value: 1,
                  ),
                  DropdownMenuItem(
                    child: Text("Employee"),
                    value: 2,
                  )
                ],
                onChanged: (value) {
                  setState(() {
                    _value = value as int;
                  });
                },
              ),
              //             ),
            Padding(
              padding: const EdgeInsets.only(
                left: 50,
                right: 50,
                bottom: 10,
              ),
              child: TextFormField(
                controller: _passwordController,
                obscureText: true,
                style: const TextStyle(
                  color: Colors.black,
                  fontSize: 22,
                ),
                cursorColor: Colors.black,
                decoration: const InputDecoration(
                  hintText: 'Input Password',
                  border: OutlineInputBorder(),
                  labelText: "Password",
                  // border: UnderlineInputBorder(
                  //   borderSide: BorderSide(color: Colors.black),
                  // ),
                  // focusedBorder: UnderlineInputBorder(
                  //   borderSide: BorderSide(color: Colors.black),
                  // ),
                ),
              ),
            ),
            Text("(Password must be 8 Characters)"),
            SizedBox(
              height: 20.0,
            ),
            Container(
              width: MediaQuery.of(context).size.width / 1.3,
              height: 50,
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(35.0),
                color: Color.fromARGB(255, 4, 7, 77),
              ),
              child: MaterialButton(
                onPressed: () {
                  if (_passwordController.text.length >= 8) {
                    if (_passwordController.text == "adminadmin") {
                      if (_value == 1) {
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => const ParentPage(),
                          ),
                        );
                      }
                    } else if (_value == 2) {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => const ChildPage(),
                        ),
                      );
                    } else {
                      Text("Invalid User");
                    }
                    //print('Password: ' + _passwordController.text);
                    print('Secret Key: s***************');
                    password = _passwordController.text;
                  } else {
                    setState(() {
                      error =
                          "Invalid length: \nPlease input 8 character secret password";
                    });
                  }
                },
                child: const Text('Login',
                    style: TextStyle(
                      fontSize: 20,
                      color: Color.fromARGB(255, 255, 255, 255),
                    )),
              ),
            ),
            SizedBox(
              height: 20.0,
            ),
            Text(
              error,
              style: TextStyle(color: Colors.red[900]),
              textAlign: TextAlign.center,
            ),
            SizedBox(
              height: 20.0,
            ),
          ],
        ),
      ),
    );
  }
}
//
//  Generated file. Do not edit.
//

// clang-format off



void fl_register_plugins(FlPluginRegistry* registry) {
  g_autoptr(FlPluginRegistrar) url_launcher_linux_registrar =
      fl_plugin_registry_get_registrar_for_plugin(registry, "UrlLauncherPlugin");
  url_launcher_plugin_register_with_registrar(url_launcher_linux_registrar);
}
list(APPEND FLUTTER_PLUGIN_LIST
  url_launcher_linux
)

list(APPEND FLUTTER_FFI_PLUGIN_LIST
)

set(PLUGIN_BUNDLED_LIBRARIES)

foreach(plugin ${FLUTTER_PLUGIN_LIST})
  add_subdirectory(flutter/ephemeral/.plugin_symlinks/${plugin}/linux plugins/${plugin})
  target_link_libraries(${BINARY_NAME} PRIVATE ${plugin}_plugin)
  list(APPEND PLUGIN_BUNDLED_LIBRARIES $<TARGET_FILE:${plugin}_plugin>)
  list(APPEND PLUGIN_BUNDLED_LIBRARIES ${${plugin}_bundled_libraries})
endforeach(plugin)

foreach(ffi_plugin ${FLUTTER_FFI_PLUGIN_LIST})
  add_subdirectory(flutter/ephemeral/.plugin_symlinks/${ffi_plugin}/linux plugins/${ffi_plugin})
  list(APPEND PLUGIN_BUNDLED_LIBRARIES ${${ffi_plugin}_bundled_libraries})
endforeach(ffi_plugin)
//
//  Generated file. Do not edit.
//

import FlutterMacOS
import Foundation

import geolocator_apple
import location
import url_launcher_macos

func RegisterGeneratedPlugins(registry: FlutterPluginRegistry) {
  GeolocatorPlugin.register(with: registry.registrar(forPlugin: "GeolocatorPlugin"))
  LocationPlugin.register(with: registry.registrar(forPlugin: "LocationPlugin"))
  UrlLauncherPlugin.register(with: registry.registrar(forPlugin: "UrlLauncherPlugin"))
}
packages:
  ansicolor:
    dependency: transitive
    description:
      name: ansicolor
      sha256: "8bf17a8ff6ea17499e40a2d2542c2f481cd7615760c6d34065cb22bfd22e6880"
      url: "https://pub.dev"
    source: hosted
    version: "2.0.2"
  archive:
    dependency: transitive
    description:
      name: archive
      sha256: "22600aa1e926be775fa5fe7e6894e7fb3df9efda8891c73f70fb3262399a432d"
      url: "https://pub.dev"
    source: hosted
    version: "3.4.10"
  args:
    dependency: transitive
    description:
      name: args
      sha256: eef6c46b622e0494a36c5a12d10d77fb4e855501a91c1b9ef9339326e58f0596
      url: "https://pub.dev"
    source: hosted
    version: "2.4.2"
  asn1lib:
    dependency: transitive
    description:
      name: asn1lib
      sha256: c9c85fedbe2188b95133cbe960e16f5f448860f7133330e272edbbca5893ddc6
      url: "https://pub.dev"
    source: hosted
    version: "1.5.2"
  async:
    dependency: transitive
    description:
      name: async
      sha256: "947bfcf187f74dbc5e146c9eb9c0f10c9f8b30743e341481c1e2ed3ecc18c20c"
      url: "https://pub.dev"
    source: hosted
    version: "2.11.0"
  boolean_selector:
    dependency: transitive
    description:
      name: boolean_selector
      sha256: "6cfb5af12253eaf2b368f07bacc5a80d1301a071c73360d746b7f2e32d762c66"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.1"
  characters:
    dependency: transitive
    description:
      name: characters
      sha256: "04a925763edad70e8443c99234dc3328f442e811f1d8fd1a72f1c8ad0f69a605"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.0"
  clock:
    dependency: transitive
    description:
      name: clock
      sha256: cb6d7f03e1de671e34607e909a7213e31d7752be4fb66a86d29fe1eb14bfb5cf
      url: "https://pub.dev"
    source: hosted
    version: "1.1.1"
  collection:
    dependency: transitive
    description:
      name: collection
      sha256: ee67cb0715911d28db6bf4af1026078bd6f0128b07a5f66fb2ed94ec6783c09a
      url: "https://pub.dev"
    source: hosted
    version: "1.18.0"
  convert:
    dependency: transitive
    description:
      name: convert
      sha256: "0f08b14755d163f6e2134cb58222dd25ea2a2ee8a195e53983d57c075324d592"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.1"
  crypto:
    dependency: transitive
    description:
      name: crypto
      sha256: ff625774173754681d66daaf4a448684fb04b78f902da9cb3d308c19cc5e8bab
      url: "https://pub.dev"
    source: hosted
    version: "3.0.3"
  csslib:
    dependency: transitive
    description:
      name: csslib
      sha256: "706b5707578e0c1b4b7550f64078f0a0f19dec3f50a178ffae7006b0a9ca58fb"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.0"
  cupertino_icons:
    dependency: "direct main"
    description:
      name: cupertino_icons
      sha256: d57953e10f9f8327ce64a508a355f0b1ec902193f66288e8cb5070e7c47eeb2d
      url: "https://pub.dev"
    source: hosted
    version: "1.0.6"
  dropdown_button2:
    dependency: "direct dev"
    description:
      name: dropdown_button2
      sha256: "604b87283e251e0e4a0cb1d0fdfa91fd527702b06e80999c4054cecc603e10e7"
      url: "https://pub.dev"
    source: hosted
    version: "1.9.4"
  eip1559:
    dependency: transitive
    description:
      name: eip1559
      sha256: de454d6321bd753eb79116e9ec4f8df20895c2e97f9a3839a032f3a728985516
      url: "https://pub.dev"
    source: hosted
    version: "0.6.1"
  eip55:
    dependency: transitive
    description:
      name: eip55
      sha256: "213a9b86add87a5216328e8494b0ab836e401210c4d55eb5e521bd39e39169e1"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.2"
  encrypt:
    dependency: "direct dev"
    description:
      name: encrypt
      sha256: "62d9aa4670cc2a8798bab89b39fc71b6dfbacf615de6cf5001fb39f7e4a996a2"
      url: "https://pub.dev"
    source: hosted
    version: "5.0.3"
  fake_async:
    dependency: transitive
    description:
      name: fake_async
      sha256: "511392330127add0b769b75a987850d136345d9227c6b94c96a04cf4a391bf78"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.1"
  flutter:
    dependency: "direct main"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_lints:
    dependency: "direct dev"
    description:
      name: flutter_lints
      sha256: a25a15ebbdfc33ab1cd26c63a6ee519df92338a9c10f122adda92938253bef04
      url: "https://pub.dev"
    source: hosted
    version: "2.0.3"
  flutter_native_splash:
    dependency: "direct dev"
    description:
      name: flutter_native_splash
      sha256: "558f10070f03ee71f850a78f7136ab239a67636a294a44a06b6b7345178edb1e"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.10"
  flutter_test:
    dependency: "direct dev"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_web3:
    dependency: "direct dev"
    description:
      name: flutter_web3
      sha256: d8bdcbead96352d9e4ee58ede7965f09a541472692ad61e72b0bd317005c08e9
      url: "https://pub.dev"
    source: hosted
    version: "2.1.9"
  flutter_web_plugins:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.0"
  geolocator:
    dependency: "direct dev"
    description:
      name: geolocator
      sha256: e946395fc608842bb2f6c914807e9183f86f3cb787f6b8f832753e5251036f02
      url: "https://pub.dev"
    source: hosted
    version: "10.1.0"
  geolocator_android:
    dependency: transitive
    description:
      name: geolocator_android
      sha256: "93906636752ea4d4e778afa981fdfe7409f545b3147046300df194330044d349"
      url: "https://pub.dev"
    source: hosted
    version: "4.3.1"
  geolocator_apple:
    dependency: transitive
    description:
      name: geolocator_apple
      sha256: "79babf44b692ec5e789d322dc736ef71586056e8e6828f747c9e005456b248bf"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.5"
  geolocator_platform_interface:
    dependency: transitive
    description:
      name: geolocator_platform_interface
      sha256: "3b95ecdc36462c47dbc535dcfedea774d03ccd1f3c9864e0a02ad088eeff4508"
      url: "https://pub.dev"
    source: hosted
    version: "4.2.1"
  geolocator_web:
    dependency: transitive
    description:
      name: geolocator_web
      sha256: "102e7da05b48ca6bf0a5bda0010f886b171d1a08059f01bfe02addd0175ebece"
      url: "https://pub.dev"
    source: hosted
    version: "2.2.1"
  geolocator_windows:
    dependency: transitive
    description:
      name: geolocator_windows
      sha256: a92fae29779d5c6dc60e8411302f5221ade464968fe80a36d330e80a71f087af
      url: "https://pub.dev"
    source: hosted
    version: "0.2.2"
  html:
    dependency: transitive
    description:
      name: html
      sha256: "3a7812d5bcd2894edf53dfaf8cd640876cf6cef50a8f238745c8b8120ea74d3a"
      url: "https://pub.dev"
    source: hosted
    version: "0.15.4"
  http:
    dependency: "direct dev"
    description:
      name: http
      sha256: "5895291c13fa8a3bd82e76d5627f69e0d85ca6a30dcac95c4ea19a5d555879c2"
      url: "https://pub.dev"
    source: hosted
    version: "0.13.6"
  http_parser:
    dependency: transitive
    description:
      name: http_parser
      sha256: "2aa08ce0341cc9b354a498388e30986515406668dbcc4f7c950c3e715496693b"
      url: "https://pub.dev"
    source: hosted
    version: "4.0.2"
  image:
    dependency: transitive
    description:
      name: image
      sha256: "49a0d4b0c12402853d3f227fe7c315601b238d126aa4caa5dbb2dcf99421aa4a"
      url: "https://pub.dev"
    source: hosted
    version: "4.1.6"
  js:
    dependency: transitive
    description:
      name: js
      sha256: f2c445dce49627136094980615a031419f7f3eb393237e4ecd97ac15dea343f3
      url: "https://pub.dev"
    source: hosted
    version: "0.6.7"
  json_rpc_2:
    dependency: transitive
    description:
      name: json_rpc_2
      sha256: "5e469bffa23899edacb7b22787780068d650b106a21c76db3c49218ab7ca447e"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.2"
  lints:
    dependency: transitive
    description:
      name: lints
      sha256: "0a217c6c989d21039f1498c3ed9f3ed71b354e69873f13a8dfc3c9fe76f1b452"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.1"
  location:
    dependency: "direct dev"
    description:
      name: location
      sha256: "06be54f682c9073cbfec3899eb9bc8ed90faa0e17735c9d9fa7fe426f5be1dd1"
      url: "https://pub.dev"
    source: hosted
    version: "5.0.3"
  location_platform_interface:
    dependency: transitive
    description:
      name: location_platform_interface
      sha256: "8aa1d34eeecc979d7c9fe372931d84f6d2ebbd52226a54fe1620de6fdc0753b1"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.2"
  location_web:
    dependency: transitive
    description:
      name: location_web
      sha256: ec484c66e8a4ff1ee5d044c203f4b6b71e3a0556a97b739a5bc9616de672412b
      url: "https://pub.dev"
    source: hosted
    version: "4.2.0"
  logging:
    dependency: "direct dev"
    description:
      name: logging
      sha256: "623a88c9594aa774443aa3eb2d41807a48486b5613e67599fb4c41c0ad47c340"
      url: "https://pub.dev"
    source: hosted
    version: "1.2.0"
  matcher:
    dependency: transitive
    description:
      name: matcher
      sha256: "1803e76e6653768d64ed8ff2e1e67bea3ad4b923eb5c56a295c3e634bad5960e"
      url: "https://pub.dev"
    source: hosted
    version: "0.12.16"
  material_color_utilities:
    dependency: transitive
    description:
      name: material_color_utilities
      sha256: "9528f2f296073ff54cb9fee677df673ace1218163c3bc7628093e7eed5203d41"
      url: "https://pub.dev"
    source: hosted
    version: "0.5.0"
  meta:
    dependency: transitive
    description:
      name: meta
      sha256: a6e590c838b18133bb482a2745ad77c5bb7715fb0451209e1a7567d416678b8e
      url: "https://pub.dev"
    source: hosted
    version: "1.10.0"
  nested:
    dependency: transitive
    description:
      name: nested
      sha256: "03bac4c528c64c95c722ec99280375a6f2fc708eec17c7b3f07253b626cd2a20"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.0"
  path:
    dependency: transitive
    description:
      name: path
      sha256: "8829d8a55c13fc0e37127c29fedf290c102f4e40ae94ada574091fe0ff96c917"
      url: "https://pub.dev"
    source: hosted
    version: "1.8.3"
  petitparser:
    dependency: transitive
    description:
      name: petitparser
      sha256: c15605cd28af66339f8eb6fbe0e541bfe2d1b72d5825efc6598f3e0a31b9ad27
      url: "https://pub.dev"
    source: hosted
    version: "6.0.2"
  plugin_platform_interface:
    dependency: transitive
    description:
      name: plugin_platform_interface
      sha256: "4820fbfdb9478b1ebae27888254d445073732dae3d6ea81f0b7e06d5dedc3f02"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.8"
  pointycastle:
    dependency: transitive
    description:
      name: pointycastle
      sha256: "43ac87de6e10afabc85c445745a7b799e04de84cebaa4fd7bf55a5e1e9604d29"
      url: "https://pub.dev"
    source: hosted
    version: "3.7.4"
  provider:
    dependency: "direct dev"
    description:
      name: provider
      sha256: "9a96a0a19b594dbc5bf0f1f27d2bc67d5f95957359b461cd9feb44ed6ae75096"
      url: "https://pub.dev"
    source: hosted
    version: "6.1.1"
  sec:
    dependency: transitive
    description:
      name: sec
      sha256: "8bbd56df884502192a441b5f5d667265498f2f8728a282beccd9db79e215f379"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.0"
  sky_engine:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.99"
  source_span:
    dependency: transitive
    description:
      name: source_span
      sha256: "53e943d4206a5e30df338fd4c6e7a077e02254531b138a15aec3bd143c1a8b3c"
      url: "https://pub.dev"
    source: hosted
    version: "1.10.0"
  stack_trace:
    dependency: transitive
    description:
      name: stack_trace
      sha256: "73713990125a6d93122541237550ee3352a2d84baad52d375a4cad2eb9b7ce0b"
      url: "https://pub.dev"
    source: hosted
    version: "1.11.1"
  stream_channel:
    dependency: transitive
    description:
      name: stream_channel
      sha256: ba2aa5d8cc609d96bbb2899c28934f9e1af5cddbd60a827822ea467161eb54e7
      url: "https://pub.dev"
    source: hosted
    version: "2.1.2"
  stream_transform:
    dependency: transitive
    description:
      name: stream_transform
      sha256: "14a00e794c7c11aa145a170587321aedce29769c08d7f58b1d141da75e3b1c6f"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.0"
  string_scanner:
    dependency: transitive
    description:
      name: string_scanner
      sha256: "556692adab6cfa87322a115640c11f13cb77b3f076ddcc5d6ae3c20242bedcde"
      url: "https://pub.dev"
    source: hosted
    version: "1.2.0"
  term_glyph:
    dependency: transitive
    description:
      name: term_glyph
      sha256: a29248a84fbb7c79282b40b8c72a1209db169a2e0542bce341da992fe1bc7e84
      url: "https://pub.dev"
    source: hosted
    version: "1.2.1"
  test_api:
    dependency: transitive
    description:
      name: test_api
      sha256: "5c2f730018264d276c20e4f1503fd1308dfbbae39ec8ee63c5236311ac06954b"
      url: "https://pub.dev"
    source: hosted
    version: "0.6.1"
  typed_data:
    dependency: transitive
    description:
      name: typed_data
      sha256: facc8d6582f16042dd49f2463ff1bd6e2c9ef9f3d5da3d9b087e244a7b564b3c
      url: "https://pub.dev"
    source: hosted
    version: "1.3.2"
  universal_io:
    dependency: transitive
    description:
      name: universal_io
      sha256: "1722b2dcc462b4b2f3ee7d188dad008b6eb4c40bbd03a3de451d82c78bba9aad"
      url: "https://pub.dev"
    source: hosted
    version: "2.2.2"
  url_launcher:
    dependency: "direct dev"
    description:
      name: url_launcher
      sha256: c512655380d241a337521703af62d2c122bf7b77a46ff7dd750092aa9433499c
      url: "https://pub.dev"
    source: hosted
    version: "6.2.4"
  url_launcher_android:
    dependency: transitive
    description:
      name: url_launcher_android
      sha256: "507dc655b1d9cb5ebc756032eb785f114e415f91557b73bf60b7e201dfedeb2f"
      url: "https://pub.dev"
    source: hosted
    version: "6.2.2"
  url_launcher_ios:
    dependency: transitive
    description:
      name: url_launcher_ios
      sha256: "75bb6fe3f60070407704282a2d295630cab232991eb52542b18347a8a941df03"
      url: "https://pub.dev"
    source: hosted
    version: "6.2.4"
  url_launcher_linux:
    dependency: transitive
    description:
      name: url_launcher_linux
      sha256: ab360eb661f8879369acac07b6bb3ff09d9471155357da8443fd5d3cf7363811
      url: "https://pub.dev"
    source: hosted
    version: "3.1.1"
  url_launcher_macos:
    dependency: transitive
    description:
      name: url_launcher_macos
      sha256: b7244901ea3cf489c5335bdacda07264a6e960b1c1b1a9f91e4bc371d9e68234
      url: "https://pub.dev"
    source: hosted
    version: "3.1.0"
  url_launcher_platform_interface:
    dependency: transitive
    description:
      name: url_launcher_platform_interface
      sha256: a932c3a8082e118f80a475ce692fde89dc20fddb24c57360b96bc56f7035de1f
      url: "https://pub.dev"
    source: hosted
    version: "2.3.1"
  url_launcher_web:
    dependency: transitive
    description:
      name: url_launcher_web
      sha256: fff0932192afeedf63cdd50ecbb1bc825d31aed259f02bb8dba0f3b729a5e88b
      url: "https://pub.dev"
    source: hosted
    version: "2.2.3"
  url_launcher_windows:
    dependency: transitive
    description:
      name: url_launcher_windows
      sha256: ecf9725510600aa2bb6d7ddabe16357691b6d2805f66216a97d1b881e21beff7
      url: "https://pub.dev"
    source: hosted
    version: "3.1.1"
  uuid:
    dependency: transitive
    description:
      name: uuid
      sha256: "648e103079f7c64a36dc7d39369cabb358d377078a051d6ae2ad3aa539519313"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.7"
  vector_math:
    dependency: transitive
    description:
      name: vector_math
      sha256: "80b3257d1492ce4d091729e3a67a60407d227c27241d6927be0130c98e741803"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.4"
  wallet:
    dependency: transitive
    description:
      name: wallet
      sha256: "687fd89a16557649b26189e597792962f405797fc64113e8758eabc2c2605c32"
      url: "https://pub.dev"
    source: hosted
    version: "0.0.13"
  web:
    dependency: transitive
    description:
      name: web
      sha256: afe077240a270dcfd2aafe77602b4113645af95d0ad31128cc02bce5ac5d5152
      url: "https://pub.dev"
    source: hosted
    version: "0.3.0"
  web3dart:
    dependency: "direct dev"
    description:
      name: web3dart
      sha256: "0b96223a6b284e3146e65dc842ded139eca68a85c4ab79c5ba1a73284927d3cd"
      url: "https://pub.dev"
    source: hosted
    version: "2.6.1"
  web_socket_channel:
    dependency: "direct dev"
    description:
      name: web_socket_channel
      sha256: d88238e5eac9a42bb43ca4e721edba3c08c6354d4a53063afaa568516217621b
      url: "https://pub.dev"
    source: hosted
    version: "2.4.0"
  xml:
    dependency: transitive
    description:
      name: xml
      sha256: b015a8ad1c488f66851d762d3090a21c600e479dc75e68328c52774040cf9226
      url: "https://pub.dev"
    source: hosted
    version: "6.5.0"
  yaml:
    dependency: transitive
    description:
      name: yaml
      sha256: "75769501ea3489fca56601ff33454fe45507ea3bfb014161abc3b43ae25989d5"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.2"
sdks:
  dart: ">=3.2.6 <4.0.0"
  flutter: ">=3.16.0"
name: mobile_app_flutter
description: "A new Flutter project."
publish_to: 'none' 
version: 1.0.0+1

environment:
  sdk: '>=3.2.6 <4.0.0'

dependencies:
  flutter:
    sdk: flutter


      cupertino_icons: ^1.0.2

dev_dependencies:
  flutter_test:
    sdk: flutter
  geolocator: ^10.1.0
  http: ^0.13.4
  url_launcher: ^6.0.9
  location: ^5.0.3
  web3dart: ^2.3.3 
  provider: ^6.0.1
  encrypt: ^5.0.1
  flutter_native_splash: ^2.0.2+1
  dropdown_button2: ^1.0.0
  logging: ^1.0.0
  flutter_web3: ^2.0.0
  web_socket_channel: ^2.2.0

            flutter_lints: ^2.0.0


flutter:

        uses-material-design: true
//
//  Generated file. Do not edit.
//

// clang-format off



void RegisterPlugins(flutter::PluginRegistry* registry) {
  GeolocatorWindowsRegisterWithRegistrar(
      registry->GetRegistrarForPlugin("GeolocatorWindows"));
  UrlLauncherWindowsRegisterWithRegistrar(
      registry->GetRegistrarForPlugin("UrlLauncherWindows"));
}
list(APPEND FLUTTER_PLUGIN_LIST
  geolocator_windows
  url_launcher_windows
)

list(APPEND FLUTTER_FFI_PLUGIN_LIST
)

set(PLUGIN_BUNDLED_LIBRARIES)

foreach(plugin ${FLUTTER_PLUGIN_LIST})
  add_subdirectory(flutter/ephemeral/.plugin_symlinks/${plugin}/windows plugins/${plugin})
  target_link_libraries(${BINARY_NAME} PRIVATE ${plugin}_plugin)
  list(APPEND PLUGIN_BUNDLED_LIBRARIES $<TARGET_FILE:${plugin}_plugin>)
  list(APPEND PLUGIN_BUNDLED_LIBRARIES ${${plugin}_bundled_libraries})
endforeach(plugin)

foreach(ffi_plugin ${FLUTTER_FFI_PLUGIN_LIST})
  add_subdirectory(flutter/ephemeral/.plugin_symlinks/${ffi_plugin}/windows plugins/${ffi_plugin})
  list(APPEND PLUGIN_BUNDLED_LIBRARIES ${${ffi_plugin}_bundled_libraries})
endforeach(ffi_plugin)
Remix default workspace is present when:
i. Remix loads for the very first time 
ii. A new workspace is created with 'Default' template
iii. There are no files existing in the File Explorer

This workspace contains 3 directories:

1. 'contracts': Holds three contracts with increasing levels of complexity.
2. 'scripts': Contains four typescript files to deploy a contract. It is explained below.
3. 'tests': Contains one Solidity test file for 'Ballot' contract & one JS test file for 'Storage' contract.


The 'scripts' folder has four typescript files which help to deploy the 'Storage' contract using 'web3.js' and 'ethers.js' libraries.

For the deployment of any other contract, just update the contract's name from 'Storage' to the desired contract and provide constructor arguments accordingly 
in the file `deploy_with_ethers.ts` or  `deploy_with_web3.ts`

In the 'tests' folder there is a script containing Mocha-Chai unit tests for 'Storage' contract.

To run a script, right click on file name in the file explorer and click 'Run'. Remember, Solidity file must already be compiled.
Output from script will appear in remix terminal.

Please note, require/import is supported in a limited manner for Remix supported modules.
For now, modules supported by Remix are ethers, web3, swarmgw, chai, multihashes, remix and hardhat only for hardhat.ethers object/plugin.
For unsupported modules, an error like this will be thrown: '<module_name> module require is not supported by Remix IDE' will be shown.
import 'package:encrypt/encrypt.dart';
import 'package:mobile_app_flutter/main.dart' as pass;

class EncryptionDecryption {
  static final Encrypter encrypter =
      Encrypter(AES(Key.fromUtf8(pass.password)));
  static final iv = IV.fromLength(16);
  static String encryptAES(String text) {
    return encrypter.encrypt(text, iv: iv).base64;
  }

  static String decryptAES(String encryptedText) {
    final encrypted = Encrypted.fromBase64(encryptedText);
    return encrypter.decrypt(encrypted, iv: iv);
  }
}
require("@nomicfoundation/hardhat-toolbox");

/** @type import('hardhat/config').HardhatUserConfig */
module.exports = {
  solidity: "0.8.17",
};
pragma solidity 0.4.20;
contract Casino {
   address public owner;
   uint256 public minimumBet;
   uint256 public totalBet;
   uint256 public numberOfBets;
   uint256 public maxAmountOfBets = 100;
   address[] public players;   struct Player {
      uint256 amountBet;
      uint256 numberSelected;
   }   
   
   // The address of the player and => the user info   
   mapping(address => Player) public playerInfo;   
   
   function() public payable {}   
   
   function Casino(uint256 _minimumBet) public {
      owner = msg.sender;
      if(_minimumBet != 0 ) minimumBet = _minimumBet;
   }   
   
   function kill() public {
      if(msg.sender == owner) selfdestruct(owner);
   }   
   
   function checkPlayerExists(address player) public constant returns(bool){
      for(uint256 i = 0; i < players.length; i++){
         if(players[i] == player) return true;
      }
      return false;
   }   
   
   // To bet for a number between 1 and 10 both inclusive
   function bet(uint256 numberSelected) public payable {
      require(!checkPlayerExists(msg.sender));
      require(numberSelected >= 1 && numberSelected <= 10);
      require(msg.value >= minimumBet);      playerInfo[msg.sender].amountBet = msg.value;
      playerInfo[msg.sender].numberSelected = numberSelected;
      numberOfBets++;
      players.push(msg.sender);
      totalBet += msg.value;
   }   
   
   // Generates a number between 1 and 10 that will be the winner
   function generateNumberWinner() public {
      uint256 numberGenerated = block.number % 10 + 1; // This isn't secure
      distributePrizes(numberGenerated);
   }   
   
   // Sends the corresponding ether to each winner depending on the total bets
   function distributePrizes(uint256 numberWinner) public {
      address[100] memory winners; // We have to create a temporary in memory array with fixed size
      uint256 count = 0; 
      
      // This is the count for the array of winners      
      for(uint256 i = 0; i < players.length; i++){
         address playerAddress = players[i];
         if(playerInfo[playerAddress].numberSelected == numberWinner){
            winners[count] = playerAddress;
            count++;
         }
         delete playerInfo[playerAddress]; // Delete all the players
      }      players.length = 0; // Delete all the players array      
      
      uint256 winnerEtherAmount = totalBet / winners.length; // How much each winner gets      
      for(uint256 j = 0; j < count; j++){
         if(winners[j] != address(0)) // Check that the address in this fixed array is not empty
         winners[j].transfer(winnerEtherAmount);
      }
   }
}
// We require the Hardhat Runtime Environment explicitly here. This is optional
// but useful for running the script in a standalone fashion through `node <script>`.
//
// You can also run a script with `npx hardhat run <script>`. If you do that, Hardhat
// will compile your contracts, add the Hardhat Runtime Environment's members to the
// global scope, and execute the script.
const hre = require("hardhat");

async function main() {
  const minimumBettingAmount = hre.ethers.parseEther("0.000001");

  const Casino = await hre.ethers.deployContract("Casino", [minimumBettingAmount],
  );

  await Casino.waitForDeployment();

  console.log(
    `Casino with minumum bet amount ${ethers.formatEther(
      minimumBettingAmount
    )}ETH and deployed to ${Casino.target}`
  );
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
import type { AppProps } from "next/app";
import { ThirdwebProvider } from "@thirdweb-dev/react";
import "../styles/globals.css";

// This is the chain your dApp will work on.
// Change this to the chain your app is built for.
// You can also import additional chains from `@thirdweb-dev/chains` and pass them directly.
const activeChain = "ethereum";

function MyApp({ Component, pageProps }: AppProps) {
  return (
    <ThirdwebProvider
      clientId={process.env.CLIENT_ID}
      activeChain={activeChain}
    >
      <Component {...pageProps} />
    </ThirdwebProvider>
  );
}

export default MyApp;
import { ConnectWallet, useAddress } from "@thirdweb-dev/react";
import styles from "../styles/Home.module.css";
import { NextPage } from "next";
import AddContact from "../components/add-contact";
import ContactList from "../components/contact-list";

import { Sepolia } from "@thirdweb-dev/chains";
import { ThirdwebSDK } from "@thirdweb-dev/sdk";

// If used on the FRONTEND pass your 'clientId'
/*const sdk = new ThirdwebSDK(Sepolia, {
  clientId: process.env.CLIENT_ID,
});*/



const Home: NextPage = () => {
  const address = useAddress();

  return (
    <div className={styles.container}>
      <div className={styles.addressContainer}>
        <div className={styles.addressHeader}>
          <h1>Contact Book</h1>
          <ConnectWallet />
        </div>
        {address && (
          <div className={styles.addressListContainer}>
            <div className={styles.addressListHeader}>
              <h3>Contacts:</h3>
              <AddContact />
            </div>
            <ContactList />
          </div>
        )}
      </div>
    </div>
  );
};

export default Home;
// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.0;

contract GeoLogix
{
    //Set of States
    enum StateType { Created, InTransit, Completed}

    StateType public  state;
    address public  company; 
    address public  device;
    address public  driver;

    struct Checkpoint{
        int lat;
        int lng;
        uint distance;
        uint timestamp;
    }

   Checkpoint[] public checkpoints;
   Checkpoint[] public compliance;
   Checkpoint[] public nonCompliance;


    constructor(address _device, address _company, address _driver) payable {
        // Ensure that at least 0.005 Ether is sent to the contract upon creation
        //require(msg.value >= 0.00000005 ether, "Minimum 0.005 Ether required");
        company = _company;
        device = _device;
        driver = _driver; 
        state = StateType.Created;
    }

    // modifier that checks the current user calling the contract function is the owner
    modifier onlyOwner(){
        require(msg.sender == company, "Account must be company/owner");
        _;
    }

    function addCheckpoint(int _lat, int _lng, uint _distance, uint _timestamp) public onlyOwner{
        Checkpoint memory checkpoint = Checkpoint(_lat, _lng,_distance, _timestamp);
        checkpoints.push(checkpoint);
    }

    function getsCheckpoints() public view returns (int, int, uint, uint, uint){
        return (checkpoints[checkpoints.length - 1].lat, checkpoints[checkpoints.length - 1].lng, checkpoints[checkpoints.length - 1].distance, checkpoints[checkpoints.length - 1].timestamp, checkpoints.length);
    }

     function removeCheckpoint(uint _index) public onlyOwner{
        require(_index < checkpoints.length, "index out of range");
        for ( uint i=_index; i< checkpoints.length - 1; i++){
            checkpoints[i] = checkpoints[i+1];
        }
        checkpoints.pop();
    }
 

    function IngestTelemetry(int _lat, int _lng, uint _distance, uint _timestamp) public{
        // if the state is already completed, no more telemetry can be ingested
        require(state != StateType.Completed,"State already completed" );
        require(device == msg.sender,"Account not from Device");

        state = StateType.InTransit;

        // find the index of a checkpoint given a timestamp and return an index
         int index = findACheckpointGivenATimestamp(_timestamp);
        if(index == -1){
            nonCompliance.push(Checkpoint(_lat, _lng,_distance, _timestamp));
        }else{
            Checkpoint memory checkpoint = checkpoints[uint256(index)];
            // check if the distance is greater than the distance of the checkpoint outlined
            if( _distance > checkpoint.distance){
                nonCompliance.push(Checkpoint(_lat, _lng,_distance, _timestamp));
            }else{
            compliance.push(Checkpoint(_lat, _lng,_distance, _timestamp));
            }
        }

       
    }

    function findACheckpointGivenATimestamp(uint _timestamp) internal view returns (int){
        for (uint256 i = 0; i < checkpoints.length; i++) {
            Checkpoint memory checkpoint = checkpoints[i];
            // if the timestamp is the same or within a 5 minute window
            if ((_timestamp == checkpoint.timestamp) || (_timestamp > checkpoint.timestamp  && _timestamp < checkpoint.timestamp + 300)){
                return int(i);
            }
        } 
        return -1;
    }



    function complete() public payable onlyOwner{

       require(state != StateType.Completed,"State already completed");
       
        // calculate how many compliance are there, and 
        // if >= 75% transfer all the balance to driver,
        // >=50% transfer 0.003 ether to driver,
        // <50% transfer the balance to the owner
        if(compliance.length >= checkpoints.length *3/4){
            // transfer all balance
            payable(driver).transfer(address(this).balance);
        }else if(compliance.length >= checkpoints.length * 1/2){
            // transfer 0.003 ether
            payable(driver).transfer(0.003 ether);
            payable(company).transfer(address(this).balance - 0.003 ether);
        }else{
            // transfer balance to company from the contract
            payable(company).transfer(address(this).balance);
        }
       
        state = StateType.Completed;
        
    }

    
}
export const CONTRACT_ADDRESS = "0xc84409666CEE694Be2c61020B9A1562d7Cb4709e";
.container {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
}

.gradientText0 {
  background: -webkit-linear-gradient(  -webkit-background-clip: text;
  background-clip: text;
  -webkit-text-fill-color: transparent;
}

.gradientText1 {
  background: -webkit-linear-gradient(  -webkit-background-clip: text;
  background-clip: text;
  -webkit-text-fill-color: transparent;
}

.gradientText2 {
  background: -webkit-linear-gradient(  -webkit-background-clip: text;
  background-clip: text;
  -webkit-text-fill-color: transparent;
}

.gradientText3 {
  background: -webkit-linear-gradient(  -webkit-background-clip: text;
  background-clip: text;
  -webkit-text-fill-color: transparent;
}

.title a:hover,
.title a:focus,
.title a:active {
  text-decoration: underline;
  text-decoration-color: }

.title {
  line-height: 1.15;
  font-size: 2rem;
}

.title,
.description {
  text-align: left;
}

.connect {
  margin-bottom: 2rem;
}

.description {
  margin-top: 2rem;
  margin-bottom: 2rem;
  line-height: 1.5;
  font-size: 1.5rem;
}

.code {
  background:   border-radius: 5px;
  padding: 0.5em;
  font-size: 1.1rem;
}

.grid {
  display: flex;
  justify-content: left;
  flex-wrap: wrap;
  gap: 20px;
}

.card {
  background-color:   text-align: left;
  color: inherit;
  text-decoration: none;
  border-radius: 10px;
  transition: color 0.15s ease, border-color 0.15s ease;
  max-width: 440px;
  overflow: none;
  border: none;
}

.cardText {
  padding: 1rem;
}

.card img {
  display: block;
  width: 100%;
  height: auto;
  border-radius: 4px 4px 0 0;
  margin-bottom: 12px;
  border: none;
}

.card:hover,
.card:focus,
.card:active {
  background-color:   opacity: 80%;
}

.card h2 {
  margin: 0 0 0.75rem 0;
}

.card p {
  margin: 0;
  font-size: 1rem;
  line-height: 1.75;
}

.logo {
  height: 1em;
  margin-left: 0.5rem;
}

@media (max-width: 768px) {
  .header {
    margin-left: 0;
  }
  .grid {
    width: 100%;
    flex-direction: column;
  }
  .title {
    font-size: 3rem;
    line-height: 1.15;
  }
}

.card,
.footer {
  border-color: }
.logo img {
  filter: invert(1);
}

.addressContainer {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  margin-top: 2rem;
  border:   border-radius: 10px;
  padding: 1rem;
  width: 40%;
}
.addressHeader {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  width: 100%;
  border-bottom: }

.addressListContainer {
  width: 100%;
}
.addressListHeader {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  width: 100%;
  margin-top: 1rem;
}

.addContactContainer {
  height: 100vh;
  width: 100vw;
  position: fixed;
  top: 0;
  left: 0;
  background-color: }
.addContactCard {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  background-color:   border-radius: 10px;
  padding: 1rem;
  width: 30%;
  height: 40%;
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
.addContactTriggerButton {
  padding: 0.5rem;
  border-radius: 5px;
  background-color:   color:   border: none;
  cursor: pointer;
}
.closeButton {
  position: absolute;
  top: 0;
  right: 0;
  margin: 1rem;
  cursor: pointer;
  padding: 0.5rem;
  border-radius: 5px;
}
.addContactForm {
  display: flex;
  flex-direction: column;
  width: 100%;
  margin-top: 1rem;
}
.addContactForm input {
  margin-bottom: 1rem;
  padding: 0.5rem;
  border-radius: 5px;
  border: }
.addContactButton {
  position: absolute !important;
  bottom: 0 !important;
  right: 0 !important;
  margin: 1rem !important;
  cursor: pointer !important;
}

.contactCardContainer {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: flex-start;
  background-color:   border-radius: 10px;
  padding: 0.5rem 1rem;
  width: 100%;
  height: 20%;
  margin-bottom: 10px;
}
.contactCardInfo p {
  font-size: 0.75rem;
}
.removeContactButton {
  min-width: 32px !important;
  min-height: 24px !important;
  cursor: pointer !important;
  padding: 0.5rem !important;
  border-radius: 5px !important;
  background-color: lightcoral !important;
  color:   border: none !important;
  margin-left: 1rem !important;
}
import type { AppProps } from "next/app";
import { BaseSepoliaTestnet } from "@thirdweb-dev/chains";
import { ThirdwebSDK } from "@thirdweb-dev/sdk";
import { ThirdwebProvider } from "@thirdweb-dev/react";
import "../styles/globals.css";
// If used on the FRONTEND pass your 'clientId'
const sdk = new ThirdwebSDK(BaseSepoliaTestnet, {
  clientId: "9c3cbec1384224d02fa21d82caa4d2ec",
});
// --- OR ---
// If used on the BACKEND pass your 'secretKey'
//const sdk = new ThirdwebSDK(BaseSepoliaTestnet, {
//  secretKey: "YOUR_SECRET_KEY",/
//});

const contract = sdk.getContract("0xc84409666CEE694Be2c61020B9A1562d7Cb4709e");

// This is the chain your dApp will work on.
// Change this to the chain your app is built for.
// You can also import additional chains from `@thirdweb-dev/chains` and pass them directly.
//const activeChain = "BaseSepoliaTestnet";

function MyApp({ Component, pageProps }: AppProps) {
  return (
    <ThirdwebProvider
      activeChain={BaseSepoliaTestnet}
      clientId={process.env.CLIENT_ID}
    >
      <Component {...pageProps} />
    </ThirdwebProvider>
  );
}

export default MyApp;
import { ConnectWallet, useAddress } from "@thirdweb-dev/react";
import styles from "../styles/Home.module.css";
import { NextPage } from "next";
import AddCheckpoint from "../components/addCheckpoint";
import CheckpointList from "../components/checkpointList";
import { BaseSepoliaTestnet } from "@thirdweb-dev/chains";
import { ThirdwebSDK } from "@thirdweb-dev/sdk";

//import "../styles/globals.css";
// If used on the FRONTEND pass your 'clientId'
const sdk = new ThirdwebSDK(BaseSepoliaTestnet, {
  clientId:"9c3cbec1384224d02fa21d82caa4d2ec",
});


const contract = sdk.getContract("0xc84409666CEE694Be2c61020B9A1562d7Cb4709e");


const Home: NextPage = () => {
  const address = useAddress();
  return (
    <main className={styles.main}>
      <div className={styles.container}>
        <div className={styles.header}>
          <h3 className={styles.title}>
            Welcome to{" "}
            <span className={styles.gradientText0}>
              <a
                href="https://thirdweb.com/"
                target="_blank"
                rel="noopener noreferrer"
              >
                GeoLoxis Logistics and Delivery System.
              </a>
            </span>
          </h3>
        </div>
      <div className={styles.addressContainer}>
        <div className={styles.addressHeader}>
          <h1>Checkpoints</h1>
          <ConnectWallet />
        </div>
        {address && (
          <div className={styles.addressListContainer}>
            <div className={styles.addressListHeader}>
              <h3>Checkpoints:</h3>
              <AddCheckpoint />
            </div>
            <CheckpointList />
          </div>
        )}
      </div>
      </div>
    </main>
  );
};

export default Home;
import { useState } from "react";
import styles from "../styles/Home.module.css";
import { Web3Button } from "@thirdweb-dev/react";
import { CONTRACT_ADDRESS } from "../constants/address";

export default function AddCheckpoint() {

    const [addCheckpoint, setAddCheckpoint] = useState(false);
    const [latitude, setLatitude] = useState("");
    const [longitude, setLongitude] = useState("");
    const [diameter, setDiameter] = useState("");
    const [timestamp, setTimestamp] = useState("");
    

    function resetForm() {
        setLatitude("");
        setLongitude("");
        setDiameter("");
        setTimestamp("");
    }

    return (
        <div>
            {!addCheckpoint ? (
                <button
                    className={styles.addContactTriggerButton}
                    onClick={() => setAddCheckpoint(true)}
                >Add Checkpoint</button>
            ) : (
                <div className={styles.addContactContainer}>
                    <div className={styles.addContactCard}>
                        <button
                            className={styles.closeButton}
                            onClick={() => setAddCheckpoint(false)}
                        >Close</button>
                        <div className={styles.addContactForm}>
                            <h3>Add Contact:</h3>
                            <input 
                                type="text" 
                                placeholder="Latitude"
                                value={latitude}
                                onChange={(e) => setLatitude(e.target.value)}
                            />
                            <input 
                                type="text" 
                                placeholder="Longitude"
                                value={longitude}
                                onChange={(e) => setLongitude(e.target.value)}
                            />
                            <input 
                                type="text" 
                                placeholder="Diameter"
                                value={diameter}
                                onChange={(e) => setDiameter(e.target.value)}
                            />
                            <input 
                                type="text" 
                                placeholder="Timestamp"
                                value={timestamp}
                                onChange={(e) => setTimestamp(e.target.value)}
                            />
                        </div>
                        <Web3Button
                            contractAddress={CONTRACT_ADDRESS}
                            action={(contract) => contract.call(
                                "addCheckpoint",
                                [
                                    latitude,
                                    longitude,
                                    diameter,
                                    timestamp
                                ]
                            )}
                            onSuccess={() => {
                                resetForm();
                                setAddCheckpoint(false);
                                {console.log()}
                            }}
                        >Add Checkpoint</Web3Button>
                    </div>
                </div>
            )}
        </div>
    )
}
import { Web3Button } from '@thirdweb-dev/react';
import styles from '../styles/Home.module.css';
import { CONTRACT_ADDRESS } from '../constants/address';

type Props = {
    index: number;
    latitude: number;
    longitude: number;
    diameter: number;
    timestamp: number;
};

export default function CheckpointCard({ index, latitude, longitude, diameter, timestamp }: Props) {
    return (
        <div className={styles.contactCardContainer}>
            <div className={styles.contactCardInfo}>
                <h2>{latitude}</h2>
                <p>{longitude}</p>
                <p>{diameter}</p>
                <p>{timestamp}</p>
            </div>
            <Web3Button
                className={styles.removeContactButton}
                contractAddress={CONTRACT_ADDRESS}
                action={(contract) => contract.call(
                    "removeCheckpoint",
                    [
                        index
                    ]
                )}
            >x</Web3Button>
        </div>
    )
}
require("@nomicfoundation/hardhat-toolbox");

/** @type import('hardhat/config').HardhatUserConfig */
module.exports = {
  solidity: "0.8.9",
  paths: {
    artifacts: './src/artifacts',
  },
  networks: {
    hardhat: {
      chainId: 1337
    }
  }
};
const ethers = require('ethers');
const fs = require('fs');

async function main() {
  try {
    const provider = new ethers.providers.JsonRpcProvider('provided_URL');

    const privateKey = process.env.MY_PRIVATE_KEY;
    const wallet = new ethers.Wallet(privateKey, provider);

    const refundFactory = await ethers.getContractFactory("refundByLocation");

    const refundContract = await refundFactory.deploy();
    await refundContract.deployed();

    console.log("Contract deployed to address:", refundContract.address);
  } catch (error) {
    console.error(error);
    process.exit(1);
  }
}
pragma solidity  ^0.8.0;

contract GeoLogix
{
    //Set of States
    enum StateType { Created, Completed, OutOfCompliance}
    enum SensorType { None, deivceLongitude, Latitude, deviceTimestamp}

    event Transfer(address ownerI;d, uint amount, uint balance)
    
    address payable public owner;
    address payable public driver;

    constructor() payable {owner = payable(msg.sender);
    }
    
    struct Conditions {

        string driverName;
        string longitude;
        string latitude;
        string expectedlatitude;
        string expectedlongitude;
        string differnece;
        string timestamp;

    }

    struct Status {
        string status;
    }

    address[] public driverIds;

    function createDriver( address _address, string memory _driverName, string memory _longitude, string memory _latitude,  memdriver)
    //List of properties
    StateType public  State;
    address public  Owner;
    address public  Driver;
    address public  Device;
    address public  Contracts;
    int public  Latitude;
    int public  Longtude;
    int public  Radius;
    SensorType public  ComplianceSensorType;
    int public  ComplianceSensorReading;
    bool public  ComplianceStatus;
    string public  ComplianceDetail;

    constructor(address device, address owner, address contracts, address driver, int longitude, int latitude, int radius)
    {
        ComplianceStatus = true;
        ComplianceSensorReading = -1;
        Owner = msg.sender;
        Device = device;
        Driver = driver;
        Contracts = contracts;
        Latitude = latitude;
        Longtude = longitude;
        Radius = radius;
        State = StateType.Created;
        ComplianceDetail = "N/A";
    }

    function square(int x) public pure returns (int){
        return (x * x);
    }

    function ReadLocation(int latitude, int longitude, int timestamp) public
    {
        // Separately check for states and sender 
        // to avoid not checking for state when the sender is the device
        // because of the logical OR
        if ( State == StateType.Completed )
        {
            revert();
        }

        if ( State == StateType.OutOfCompliance )
        {
            revert();
        }

        if (Device != msg.sender)
        {
            revert();
        }

        bool Inbound = square(Latitude - latitude) + square(Longtude - longitude) <= square(Radius);

        if (Inbound == false)
        {
            ComplianceDetail = "Out of range.";
            ComplianceStatus = false;
        }

        if (ComplianceStatus == false)
        {
            State = StateType.OutOfCompliance;
        }
    }

    // function TransferResponsibility(address newCounterparty) public
    // {
    //     // keep the state checking, message sender, and device checks separate
    //     // to not get cloberred by the order of evaluation for logical OR
    //     if ( State == StateType.Completed )
    //     {
    //         revert();
    //     }

    //     if ( State == StateType.OutOfCompliance )
    //     {
    //         revert();
    //     }

    //     if ( InitiatingCounterparty != msg.sender && Counterparty != msg.sender )
    //     {
    //         revert();
    //     }

    //     if ( newCounterparty == Device )
    //     {
    //         revert();
    //     }

    //     if (State == StateType.Created)
    //     {
    //         State = StateType.InTransit;
    //     }

    //     PreviousCounterparty = Counterparty;
    //     Counterparty = newCounterparty;
    // }

    function Complete() public
    {
        // keep the state checking, message sender, and device checks separate
        // to not get cloberred by the order of evaluation for logical OR
        if ( State == StateType.Completed )
        {
            revert();
        }

        if ( State == StateType.OutOfCompliance )
        {
            revert();
        }

        if (Owner != msg.sender)
        {
            revert();
        }

        State = StateType.Completed;
        Driver = 0x0000000000000000000000000000000000000000;
    }
}
pragma solidity  ^0.8.0;

import "@thirdweb-dev/contracts/extension/Ownable.sol";


contract Geoogix
{
    event Delivery(address indexed driverId, bool status);
    
    address payable public owner;

    struct Driver{
        address driverId;
        string driverName;
        string longitude;
        string latitude;
        // string expectedlatitude;
        // string expectedlongitude;
        // string differnece;
        uint radius;
        string timestamp;
        bool status;
    }
    //Set of States

    
    address payable public driver;

    constructor() payable {owner = payable(msg.sender);
    }
    
    struct Conditions {

        string driverName;
        string longitude;
        string latitude;
        string expectedlatitude;
        string expectedlongitude;
        string differnece;
        string timestamp;

    }

    struct Status {
        string status;
    }

    address[] public driverIds;

    function createDriver( address _driverId, string memory _driverName, string memory _longitude, string memory _latitude,  uint radius, uint timestamp) exteranl onlyownerP
    
    
    address public  OwnerId;
    address public  DriverId;
    address public  Device;
    address public  Contracts;
    int public  Latitude;
    int public  Longtude;
    int public  Radius;
    bool public  ComplianceStatus;

    constructor(address device, address owner, address contracts, address driver, int longitude, int latitude, int radius)
    {
        ComplianceStatus = true;
        ComplianceSensorReading = -1;
        Owner = msg.sender;
        Device = device;
        Driver = driver;
        Contracts = contracts;
        Latitude = latitude;
        Longtude = longitude;
        Radius = radius;
        State = StateType.Created;
        ComplianceDetail = "N/A";
    }

    function square(int x) public pure returns (int){
        return (x * x);
    }

    function ReadLocation(int latitude, int longitude, int timestamp) public
    {
        // Separately check for states and sender 
        // to avoid not checking for state when the sender is the device
        // because of the logical OR
        if ( State == StateType.Completed )
        {
            revert();
        }

        if ( State == StateType.OutOfCompliance )
        {
            revert();
        }

        if (Device != msg.sender)
        {
            revert();
        }

        bool Inbound = square(Latitude - latitude) + square(Longtude - longitude) <= square(Radius);

        if (Inbound == false)
        {
            ComplianceDetail = "Out of range.";
            ComplianceStatus = false;
        }

        if (ComplianceStatus == false)
        {
            State = StateType.OutOfCompliance;
        }
    }

    function Complete() public
    {
        // keep the state checking, message sender, and device checks separate
        // to not get cloberred by the order of evaluation for logical OR
        if ( State == StateType.Completed )
        {
            revert();
        }

        if ( State == StateType.OutOfCompliance )
        {
            revert();
        }

        if (Owner != msg.sender)
        {
            revert();
        }

        State = StateType.Completed;
        Driver = 0x0000000000000000000000000000000000000000;
    }
}
import web3 from './interactors/web3';
import { BrowserRouter, Route, Routes } from 'react-router-dom'
import './App.css';
import React, { useEffect, useState } from 'react';
import contract from './interactors/payer';
import List from './pages/List';
import Details from './pages/Details';
import Create from './pages/Create';

function App() {

  useEffect(() => {
    const init = async () => {
    };

    init();

  }, []);

  return (
     <BrowserRouter>
      <Routes>

        <Route path={"/"} exact element={<List />} />
        <Route path={"/empList"} exact element={<List />} />
        <Route path={"/empDetail/:id"} exact element={<Details />} />
        <Route path={"/addEmp"} exact element={<Create />} />

      </Routes>
    </BrowserRouter>
  );
}

export default App;
