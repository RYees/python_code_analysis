End-to-End Web3 dApps: certificate generation, distribution, and value transfer with Algorand NFTs and smart contracts

 **Table of Contents**
 - [End to End Web3 dApps](  - [Overview](  - [About](  - [Project Structure](    - [.github](    - [notebooks](    - [scripts](    - [tests](    - [root folder](  - [Installation guide](
  
from dotenv import load_dotenv
from openai import OpenAI
import os 
from pathlib import Path
import json
import requests
from PIL import Image
from io import BytesIO
import uuid

DATA_DIR = Path.cwd() / "responses"

DATA_DIR.mkdir(exist_ok=True)

load_dotenv()

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

prompt="I NEED to test how the tool works with extremely simple prompts. DO NOT add any detail, just use it AS-IS, White background Design a minimalist, futuristic certificate with a red theme. The certificate should be straight-facing, occupy the full screen, and have extremely minimal details. The design may feature subtle, elegant patterns around the edges, but the center and 95% of the certificate should be pure white. No other elements should be present. Make the most of it white. Make the center blank!"

response = client.images.generate(
  model="dall-e-3",
  prompt=prompt,
  size="1024x1024",
  quality="standard",
  n=1,
)

image_url = response.data[0].url

response = requests.get(image_url)

img = Image.open(BytesIO(response.content))

unique_id = uuid.uuid4()

img.save(DATA_DIR / f"certificate_{unique_id}.png")
import { DeflyWalletConnect } from '@blockshake/defly-connect'
import { DaffiWalletConnect } from '@daffiwallet/connect'
import { PeraWalletConnect } from '@perawallet/connect'
import { PROVIDER_ID, ProvidersArray, WalletProvider, useInitializeProviders, useWallet } from '@txnlab/use-wallet'
import algosdk from 'algosdk'
import { SnackbarProvider } from 'notistack'
import { useState } from 'react'
import ConnectWallet from './components/ConnectWallet'
import Transact from './components/Transact'
import { getAlgodConfigFromViteEnvironment, getKmdConfigFromViteEnvironment } from './utils/network/getAlgoClientConfigs'


let providersArray: ProvidersArray
if (import.meta.env.VITE_ALGOD_NETWORK === '') {
  const kmdConfig = getKmdConfigFromViteEnvironment()
  providersArray = [
    {
      id: PROVIDER_ID.KMD,
      clientOptions: {
        wallet: kmdConfig.wallet,
        password: kmdConfig.password,
        host: kmdConfig.server,
        token: String(kmdConfig.token),
        port: String(kmdConfig.port),
      },
    },
  ]
} else {
  providersArray = [
    { id: PROVIDER_ID.DEFLY, clientStatic: DeflyWalletConnect },
    { id: PROVIDER_ID.PERA, clientStatic: PeraWalletConnect },
    { id: PROVIDER_ID.DAFFI, clientStatic: DaffiWalletConnect },
    { id: PROVIDER_ID.EXODUS },
  ]
}

export default function App() {
  const [openWalletModal, setOpenWalletModal] = useState<boolean>(false)
  const [openDemoModal, setOpenDemoModal] = useState<boolean>(false)
  const { activeAddress } = useWallet()

  const toggleWalletModal = () => {
    setOpenWalletModal(!openWalletModal)
  }

  const toggleDemoModal = () => {
    setOpenDemoModal(!openDemoModal)
  }

  const algodConfig = getAlgodConfigFromViteEnvironment()

  const walletProviders = useInitializeProviders({
    providers: providersArray,
    nodeConfig: {
      network: algodConfig.network,
      nodeServer: algodConfig.server,
      nodePort: String(algodConfig.port),
      nodeToken: String(algodConfig.token),
    },
    algosdkStatic: algosdk,
  })

  return (
    <SnackbarProvider maxSnack={3}>
      <WalletProvider value={walletProviders}>
        <div className="hero min-h-screen bg-teal-400">
          <div className="hero-content text-center rounded-lg p-6 max-w-md bg-white mx-auto">
            <div className="max-w-md">
              <h1 className="text-4xl">
                Welcome to <div className="font-bold">AlgoKit ðŸ™‚</div>
              </h1>
              <p className="py-6">
                This starter has been generated using official AlgoKit React template. Refer to the resource below for next steps.
              </p>

              <div className="grid">
                <div className="divider" />
                <button data-test-id="connect-wallet" className="btn m-2" onClick={toggleWalletModal}>
                  Wallet Connection
                </button>

                {activeAddress && (
                  <button data-test-id="transactions-demo" className="btn m-2" onClick={toggleDemoModal}>
                    Transactions Demo
                  </button>
                )}
              </div>

              <ConnectWallet openModal={openWalletModal} closeModal={toggleWalletModal} />
              <Transact openModal={openDemoModal} setModalState={setOpenDemoModal} />
            </div>
          </div>
        </div>
      </WalletProvider>
    </SnackbarProvider>
  )
}

import { Dialog, Transition } from '@headlessui/react'
import { XMarkIcon } from '@heroicons/react/24/outline'
import { useWallet } from '@txnlab/use-wallet'
import { Fragment, useState } from 'react'
import ConnectButton from '@/components/ConnectButton'
import Provider from '@/components/Provider'
import UserThumbnail from '@/components/UserThumbnail'


export default function ConnectMenu() {
  const [open, setOpen] = useState(false)

  const { providers, activeAddress } = useWallet()

  const renderProviders = () => {
    return providers?.map((provider) => (
      <Provider
        key={provider.metadata.id}
        id={provider.metadata.id}
        name={provider.metadata.name}
        icon={provider.metadata.icon}
        onConnect={provider.connect}
        onDisconnect={provider.disconnect}
        onSetActive={provider.setActiveProvider}
        onChangeAccount={provider.setActiveAccount}
        isConnected={provider.isConnected}
        isActive={provider.isActive}
        accounts={provider.accounts}
        activeAddress={activeAddress}
      />
    ))
  }

  return (
    <>
      <ConnectButton setOpen={setOpen} activeAddress={activeAddress} />

      <Transition.Root show={open} as={Fragment}>
        <Dialog as="div" className="relative z-10" onClose={setOpen}>
          <Transition.Child
            as={Fragment}
            enter="ease-in-out duration-500"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="ease-in-out duration-500"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <div className="fixed inset-0 bg-zinc-950 bg-opacity-75 transition-opacity" />
          </Transition.Child>

          <div className="fixed inset-0 overflow-hidden">
            <div className="absolute inset-0 overflow-hidden">
              <div className="pointer-events-none fixed inset-y-0 right-0 flex max-w-full pl-10">
                <Transition.Child
                  as={Fragment}
                  enter="transform transition ease-in-out duration-500"
                  enterFrom="translate-x-full"
                  enterTo="translate-x-0"
                  leave="transform transition ease-in-out duration-500"
                  leaveFrom="translate-x-0"
                  leaveTo="translate-x-full"
                >
                  <Dialog.Panel className="pointer-events-auto w-screen max-w-md">
                    <div
                      className="flex h-full flex-col overflow-y-scroll bg-zinc-900 shadow-xl"
                      data-testid="connect-menu"
                    >
                      <div className="bg-red-600 px-4 py-6 sm:px-6">
                        <div className="flex items-start justify-between">
                          <Dialog.Title className="text-base font-semibold leading-6 text-white">
                            {!activeAddress ? (
                              'Connect a wallet to get started'
                            ) : (
                              <UserThumbnail address={activeAddress} />
                            )}
                          </Dialog.Title>
                          <div className="ml-3 flex h-7 items-center">
                            <button
                              type="button"
                              className="relative rounded-md bg-red-600 text-teal-200 hover:text-white focus:outline-none focus:ring-2 focus:ring-white"
                              onClick={() => setOpen(false)}
                              data-testid="close-menu"
                            >
                              <span className="absolute -inset-2.5" />
                              <span className="sr-only">Close panel</span>
                              <XMarkIcon
                                className="h-6 w-6"
                                aria-hidden="true"
                              />
                            </button>
                          </div>
                        </div>

                        {!activeAddress && (
                          <div className="mt-1">
                            <p className="text-sm text-white">
                              Select the wallet provider you would like to
                              connect to from the options below.
                            </p>
                          </div>
                        )}
                      </div>
                      <div className="relative flex-1 py-6 sm:px-6">
                        <div className="flex flex-col gap-6 sm:gap-7">
                          {renderProviders()}
                        </div>
                      </div>
                    </div>
                  </Dialog.Panel>
                </Transition.Child>
              </div>
            </div>
          </div>
        </Dialog>
      </Transition.Root>
    </>
  )
}
import { classNames } from '@/utils'
import { Inter } from 'next/font/google'
import Header from '@/components/Header'
import SendTransaction from '@/components/SendTransaction'
import {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell, getKeyValue} from "@nextui-org/react";
import { useWallet } from '@txnlab/use-wallet'
import Provider from '@/components/Provider'
import React, { useEffect } from 'react';
import { useRouter } from 'next/router'
import { truncateAddress } from '@/utils'

const rows = [
    {
      key: "1",
      name: "Tony Reichert",
      role: "CEO",
      status: "Active",
    },
    {
      key: "2",
      name: "Zoey Lang",
      role: "Technical Lead",
      status: "Paused",
    },
    {
      key: "3",
      name: "Jane Fisher",
      role: "Senior Developer",
      status: "Active",
    },
    {
      key: "4",
      name: "William Howard",
      role: "Community Manager",
      status: "Vacation",
    },
  ];
  
  const columns = [
    {
      key: "name",
      label: "NAME",
    },
    {
      key: "role",
      label: "ROLE",
    },
    {
      key: "status",
      label: "STATUS",
    },
  ];
  

const inter = Inter({ subsets: ['latin'] })



export default function Page() {
    const { providers, activeAddress } = useWallet()
    const renderProviders = () => {
        return providers?.map((provider) => (
          <Provider
            activeAddress={activeAddress}
          />
        ))
      }
      const router = useRouter(); 

      React.useEffect(() => {
        async function checkAddress() {
            const response = await fetch('http://192.168.137.236:8088/trainees_hash');
            if (response.ok) {
                const data = await response.json();
                const hashes = data.map((item: { hash: string }) => item.hash);
    
                if (activeAddress === 'ZYPLVWUNKL4MNZPJNSYFTZYUDJMMDJHGLSGZDUC6NPTBRKMZWUBAYCWXBI') {
                    router.push('/trainer');
                } else if (hashes.includes(activeAddress)) {
                    router.push('/trainee');
                }
            } else {
                console.error('Failed to fetch trainees hash');
            }
        }
    
        checkAddress();
    }, [activeAddress, router]);

  return (
    <main className={classNames('relative flex-1 isolate', inter.className)}>
      <Header />

      <section className="py-10 sm:py-16 lg:py-24">
            <div className="px-4 mx-auto max-w-7xl sm:px-6 lg:px-8">
                <div className="grid items-center grid-cols-1 lg:grid-cols-2 gap-x-12 xl:gap-x-24 gap-y-12">
                    <div className="relative lg:mb-12">
                        <img className="absolute -right-0 -bottom-8 xl:-bottom-12 xl:-right-4" src="https://cdn.rareblocks.xyz/collection/celebration/images/content/3/dots-pattern.svg" alt="" />
                        <div className="pl-12 pr-6">
                            <img className="relative" src="https://10academy.org/static/media/Africa.c7db02081813640baf85.png" alt="" />
                        </div>
                        <div className="absolute left-0 pr-12 bottom-8 xl:bottom-20">
                            <div className="max-w-xs bg-red-600 rounded-lg sm:max-w-md xl:max-w-md">
                                <div className="px-3 py-4 sm:px-5 sm:py-8">
                                    <div className="flex items-start">
                                        <p className="text-3xl sm:text-4xl">ðŸ“„</p>
                                        <blockquote className="ml-5">
                                            <p className="text-sm font-medium text-white sm:text-lg">Certification arena!</p>
                                        </blockquote>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div className="2xl:pl-16">
                        <h2 className="text-3xl font-bold leading-tight text-white sm:text-4xl lg:text-5xl lg:leading-tight">Precision Learning for AI and Web3 Jobs</h2>
                        <p className="text-xl leading-relaxed text-white mt-9">95% employment, community-rich cohorts, custom learning platform, pan-African, careers skills and alumni network included!</p>
                    </div>
                </div>
            </div>
        </section>

        <section className="py-10 sm:py-16 lg:py-24">
            <div className="px-4 mx-auto max-w-7xl sm:px-6 lg:px-8">
                <div className="max-w-xl mx-auto text-center">
                    <div className="inline-flex px-4 py-1.5 mx-auto rounded-full bg-red-500">
                        <p className="text-xs font-semibold tracking-widest text-white uppercase">NFT Certificates</p>
                    </div>
                    <h2 className="mt-6 text-3xl font-bold leading-tight text-white sm:text-4xl lg:text-5xl">Effortless certificate creation for trainers, easy claims for students</h2>
                    <p className="mt-4 text-base leading-relaxed text-white">A dynamic portal where trainers effortlessly create certificates and students easily claim their achievements. Streamlining certification processes for a seamless learning journey.</p>
                </div>

                <div className="grid grid-cols-1 gap-5 mt-12 sm:grid-cols-2 lg:mt-20 lg:gap-x-12">
                    {/* Repeat this div for each feature */}
                    <div className="transition-all rounded-xl duration-200 bg-red-600 hover:shadow-xl">
                        <div className="py-10 px-9">
                            <svg className="w-16 h-16 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                            </svg>
                            <h3 className="mt-8 text-4xl font-semibold text-white">Trainer</h3>
                            <p className="mt-4 text-base text-white">Revolutionizing Education with Unique Digital Certificates for Students.</p>
                        </div>
                    </div>
                    <div className="transition-all rounded-xl duration-200 bg-red-600 hover:shadow-xl">
                        <div className="py-10 px-9">
                            <svg className="w-16 h-16 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                            </svg>
                            <h3 className="mt-8 text-4xl font-semibold text-white">Trainee</h3>
                            <p className="mt-4 text-base text-white">Your Digital Passport to Achievements! Seamlessly receive and showcase your unique certificates on the blockchain.</p>
                        </div>
                    </div>
                    
                </div>
            </div>
        </section>
        <section className="py-10 sm:py-16 lg:py-24">
            <div className="max-w-6xl px-4 mx-auto sm:px-6 lg:px-8">
                <h2 className="text-3xl font-bold leading-tight text-white sm:text-4xl lg:text-5xl">Frequently Asked Questions</h2>

                <div className="flow-root mt-12 sm:mt-16">
                    <div className="divide-y divide-gray--200 -my-9">
                        <div className="py-9">
                            <p className="text-xl font-semibold text-white">How to create an account?</p>
                            <p className="mt-3 text-base text-white">You have to submit your public key to the tenx academy platform so that we can create and transfer the certificate asset for you.</p>
                            <p className="mt-3 text-base text-white">Submitting your public key to the TenX Academy platform is necessary to establish a secure and verifiable connection. A public key serves as a cryptographic identifier, enabling the platform to generate and transfer your certificate asset securely.</p>
                        </div>

                        <div className="py-9">
                            <p className="text-xl font-semibold text-white">How does it work?</p>
                            <p className="mt-3 text-base text-white">To transfer the asset created for you, you need to actively choose to opt in on the this platform. This involves providing your consent, verifying your identity, and submitting your public key for secure communication. Once opted in, the trainer will initiate the transfer, and you'll receive confirmation upon completion.</p>
                        </div>

                        <div className="py-9">
                            <p className="text-xl font-semibold text-white">How do I connect my wallet?</p>
                            <p className="mt-3 text-base text-white">You have a variety of wallet connection options, such as Exodus, WalletConnect, Daffi, Pera, and Defly. Please feel free to utilize any of these to establish a connection.</p>
                        </div>

                        <div className="py-9">
                            <p className="text-xl font-semibold text-white">How do you provide support?</p>
                            <p className="mt-3 text-base text-white">
                                Please contact our dedicated support at <a href="                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </main>
  )
}
import { classNames } from '@/utils'
import { Inter } from 'next/font/google'
import Header from '@/components/Header'
import SendTransaction from '@/components/SendTransaction'
import React from "react";
import {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell, getKeyValue} from "@nextui-org/react";
import { useState } from 'react';
import {Button} from "@nextui-org/react";
import styles from './Trainee_dashboard.module.css';

const rows = [
    {
      key: "1",
      name: "Tony Reichert",
      role: "CEO",
      status: "Active",
    }
  ];
  
  const columns = [
    {
      key: "name",
      label: "NAME",
    }
  ];
  

const inter = Inter({ subsets: ['latin'] })

export default function Trainee_dashboard() {
  const [isTouched, setIsTouched] = useState(false);

  const handleClick = () => {
    setIsTouched(true);
  };

  return (
    <main className={classNames('relative flex-1 isolate', inter.className)}>
      <Header />

        <section className="py-10 sm:py-16 lg:py-24">
            <div className="px-4 mx-auto max-w-7xl sm:px-6 lg:px-8">
                <div className="max-w-xl mx-auto text-center">
                    <div className="inline-flex px-4 py-1.5 mx-auto rounded-full bg-red-500">
                        <p className="text-xs font-semibold tracking-widest text-white uppercase">Trainee</p>
                    </div>
                    <h2 className="mt-6 text-3xl font-bold leading-tight text-white sm:text-4xl lg:text-5xl">Request for transfer of certificate</h2>
                </div>
            </div>
        </section>
        <div className="flex items-center justify-center">
        <div className="outer-container bg-black w-2/3">
            <div className='container bg-black max-w-40 w-30'>
            <Table aria-label="Certification" className={styles['table-black']}>
    <TableHeader>
        <TableColumn>TRAINER</TableColumn>
        <TableColumn>WEEK</TableColumn>
        <TableColumn>STATUS</TableColumn>
    </TableHeader>
    <TableBody >
        <TableRow key="1">
        <TableCell>Yabebal Fantaye</TableCell>
        <TableCell>Week 2 Certificate</TableCell>
        <TableCell onClick={handleClick}>
        <Button color="success">
          Delivered
        </Button>
        </TableCell>
        </TableRow>
        <TableRow key="2">
        <TableCell>Yabebal Fantaye</TableCell>
        <TableCell>Week 3 Certificate</TableCell>
        <TableCell onClick={handleClick}>
        <Button color="warning">
          Requested
        </Button> 
        </TableCell>
        </TableRow>
        <TableRow key="2">
        <TableCell>Yabebal Fantaye</TableCell>
        <TableCell>Week 5 Certificate</TableCell>
        <TableCell onClick={handleClick}>
        <Button color={isTouched ? "warning" : "primary"} onClick={handleClick}>
          {isTouched ? 'Requested' : 'Request'}
        </Button>  
        </TableCell>
        </TableRow>
    </TableBody>
</Table>
            </div>
        </div>
        </div>
    </main>
  )
}

import Head from 'next/head'
import Page from '@/components/Trainer_dashboard'

import {NextUIProvider} from "@nextui-org/react";
import Trainer_dashboard from '@/components/Trainee_dashboard';
import Trainee_dashboard from '@/components/Trainee_dashboard';

export default function Home() {
  // 2. Wrap NextUIProvider at the root of your app
  return (
    <NextUIProvider>
          <>
          <Head>
            <title> Trainee | 10 Academy</title>
          </Head>

          <Trainee_dashboard/>
    </>
    </NextUIProvider>
  );
}
import sys
from scripts.sql_db import *
import json
from fastapi import FastAPI
from pydantic import BaseModel
from fastapi import FastAPI, File, UploadFile, HTTPException
import os
import requests
from algorand_kits.create_account import create_account
from fastapi.middleware.cors import CORSMiddleware
from algorand_kits.asset_operations import create_asset, opt_in, transfer_asset
from scripts.utils import create_certificate, pin_file_to_ipfs

from dotenv import load_dotenv

load_dotenv()

API_KEY = os.getenv('API_KEY')
API_SECRET = os.getenv('API_SECRET')

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=['*'],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.get("/check")
def check():
    return "Your API is up!"


class receiver(BaseModel):
    address: str
    asset_id: str


class Table(BaseModel):
    db_name: str
    schema_name: str


class Data(BaseModel):

    trainee: str
    email: str
    asset: str
    status: str
    hashed:str
class Insert(BaseModel):

    db_name: str
    tb_data: Data
    table_name: str
    
class Update(BaseModel):

    asset: str
    status: str
    email: str
    hashed:str
class OptinUpdate(BaseModel):

    status: str
    remark: str
    asset: str

class CertificateData(BaseModel):
    full_name: str
    week: str

@app.get("/trainees")
def get_trainees():
    return fetch_trainees()

@app.get("/trainees_hash")
def get_trainees_hash():
    return fetch_trainees_hash()


@app.post("/create_certificate")
def create_certificate_api(data: CertificateData):
    try:
        ipfs_hash = create_certificate(data.full_name, data.week)
        return {"ipfs_hash": ipfs_hash}
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))
    
@app.post("/create_account")
def create_account_api():
    try:
        mnemonic = create_account()
        return {"mnemonic": mnemonic}
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

@app.post("/mint")
def create_upload_file():

        file_path = 'crt.jpg'

        headers = {'pinata_api_key': API_KEY, 'pinata_secret_api_key': API_SECRET}
    endpoint = "https://api.pinata.cloud/pinning/pinFileToIPFS"

    if os.path.isfile(file_path):
        with open(file_path, 'rb') as filedata:
            response = requests.post(
                endpoint, headers=headers, files={'file': filedata})

        print(response.text)

        hash = response.json()['IpfsHash']
    return hash
    

@app.post("/createDb")
def create_db(name: str):
    createDB(name)


@app.post("/createTable")
def create_table(table: Table):
    createTable(table.db_name, table.schema_name)


@app.post("/insert")
def insert(data: Insert):
    json_stream=(data.tb_data.json())
    insert_to_table(data.db_name, json_stream, data.table_name) 
    @app.post("/create_asset")
async def api_create_asset(m: str, receiver_pk: str, asset_name: str, ipfs: str):
    try:
        create_asset(m, receiver_pk, asset_name, ipfs)
        return {"message": "Asset created successfully"}
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

@app.post("/opt_in")
async def api_opt_in(trainee_m: str, asset_id: str):
    try:
        opt_in(trainee_m, asset_id)
        return {"message": "Opt-in operation successful"}
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

@app.post("/transfer_asset")
async def api_transfer_asset(sender_m: str, receiver_pk: str, asset_id: str):
    try:
        transfer_asset(sender_m, receiver_pk, asset_id)
        return {"message": "Asset transferred successfully"}
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

@app.post("/update")
def update(data: Update):
    json_stream=(data.json())

    update_table("trainee", json_stream, "trainee")

@app.post("/optinUpdate")
def update(data: OptinUpdate):
    json_stream=(data.json())

    optin_update("trainee", json_stream, "trainee")

@app.get("/getall")
def get_all():
    return db_get_values()

@app.get("/getTrainee")
def get_trainee(asset):
    return db_get_values_by_asset(asset)

@app.get("/getCertificates")
def get_trainee(addr):
    return db_get_values_by_addr(addr)
import pandas as pd
import json
import os
import psycopg2
from psycopg2 import sql, Error
from dotenv import load_dotenv

TRAINEE = "trainee.sql"

cwd = os.getcwd()

load_dotenv()

def DBConnect(dbName=None):
    load_dotenv()

    host = os.getenv('DB_HOST')
    user = os.getenv('DB_USER')
    password = os.getenv('DB_PASS')
    port = os.getenv('DB_PORT')

    if None in (host, user, password, port, dbName):
        raise ValueError("One or more database credentials are missing.")

    conn = psycopg2.connect(host=host, user=user, password=password, dbname=dbName, port=port)
    cur = conn.cursor()
    return conn, cur

def createDB(dbName: str) -> None:
    conn = DBConnect()
    conn.autocommit = True
    cur = conn.cursor()
    cur.execute(f"SELECT 1 FROM pg_catalog.pg_database WHERE datname = '{dbName}'")
    exists = cur.fetchone()
    if not exists:
        cur.execute(f"CREATE DATABASE {dbName}")
    cur.close()
    conn.close()

def createTable(dbName: str, table_schema: str) -> None:
    conn, cur = DBConnect(dbName)
    fd = open(f"{cwd}/scripts/{table_schema}", 'r')
    readSqlFile = fd.read()
    fd.close()

    sqlCommands = readSqlFile.split(';')

    for command in sqlCommands:
        try:
            res = cur.execute(command)
        except Exception as ex:
            print("Command skipped: ", command)
            print(ex)
    conn.commit()
    cur.close()

    return

def insert_to_table(dbName: str, json_stream: json, table_name: str) -> None:
    conn, cur = DBConnect(dbName)
    insert_data = json.dumps([json.loads(json_stream)])
    df = pd.read_json(insert_data)

    for _, row in df.iterrows():
        sqlQuery = sql.SQL(f"""INSERT INTO {table_name} (trainee, email, asset, status,hashed) VALUES(%s,%s,%s,%s,%s);""")
        data = (row[0], row[1], row[2], row[3], row[4])

        try:
            cur.execute(sqlQuery, data)
            conn.commit()
        except Exception as e:
            conn.rollback()
            print("Error: ", e)

    print("All Data Inserted Successfully")
    return

def update_table(dbName: str, json_stream: json, table_name: str) -> None:
    conn, cur = DBConnect(dbName)
    update_data = json.dumps([json.loads(json_stream)])
    df = pd.read_json(update_data)
    for _, row in df.iterrows():
        sqlQuery = sql.SQL(f"""
        UPDATE {table_name} SET asset = %s, status = %s, hashed= %s WHERE email = %s;
        """)

        data = (int(row[0]), str(row[1]), str(row[3]), str(row[2]))

        try:
            cur.execute(sqlQuery, data)
            conn.commit()
        except Exception as e:
            conn.rollback()
            print("Error: ", e)

    print("All Data Updated Successfully")
    return

def optin_update(dbName: str, json_stream: json, table_name: str) -> None:
    conn, cur = DBConnect(dbName)
    update_data = json.dumps([json.loads(json_stream)])
    df = pd.read_json(update_data)
    for _, row in df.iterrows():
        sqlQuery = sql.SQL(f"""
        UPDATE {table_name} SET status = %s, remark = %s WHERE asset = %s;
        """)

        data = ((row[0]), (row[1]), int(row[2]))

        try:
            cur.execute(sqlQuery, data)
            conn.commit()
        except Exception as e:
            conn.rollback()
            print("Error: ", e)

    print("All Data Updated Successfully")
    return

def db_get_values(dbName: str="trainee"):
    conn, cur = DBConnect(dbName)
    sqlQuery = 'SELECT * FROM trainee;'
    try:
        cur.execute(sqlQuery)
        result = cur.fetchall()
        conn.commit()
        return result
    except Exception as e:
        conn.rollback()
        print("Error: ", e)

def db_get_values_by_asset(asset: str, dbName: str="trainee"):
    conn, cur = DBConnect(dbName)
    sqlQuery = sql.SQL(f'SELECT remark,email,hashed FROM trainee WHERE asset = {asset};')
    try:
        cur.execute(sqlQuery)
        result = cur.fetchall()
        conn.commit()
        return result
    except Exception as e:
        conn.rollback()
        print("Error: ", e)

def db_get_values_by_addr(addr: str, dbName: str="trainee"):
    conn, cur = DBConnect(dbName)
    sqlQuery = sql.SQL(f'SELECT asset,status,hashed FROM trainee WHERE remark = {addr};')
    try:
        cur.execute(sqlQuery)
        result = cur.fetchall()
        conn.commit()
        return result
    except Exception as e:
        conn.rollback()
        print("Error: ", e)

def fetch_trainees() -> list:
    conn, cur = DBConnect("certificate")
    cur.execute("SELECT trainee, week, status FROM trainee")      rows = cur.fetchall()

    trainees = []
    for row in rows:
        trainee = {
            "trainee": str(row[0]),
            "status": row[1],
            "week": row[2],
        }
        trainees.append(trainee)

    cur.close()
    conn.close()

    return trainees

def fetch_trainees_hash() -> list:
    conn, cur = DBConnect("certificate")
    cur.execute("SELECT hashed FROM trainee")      rows = cur.fetchall()

    hashedd = []
    for row in rows:
        hashed = {
            "hash": str(row[0]),
        }
        hashedd.append(hashed)

    cur.close()
    conn.close()

    return hashedd
CREATE TABLE "trainee" (
    "id" SERIAL PRIMARY KEY,
    "trainee" VARCHAR(50) DEFAULT NULL,
    "email" VARCHAR(50),
    "asset" INTEGER,
    "status" VARCHAR(10),
    "week" VARCHAR(150),
    "date" VARCHAR(150),
    "hashed" VARCHAR(350) DEFAULT NULL
)
import requests
import json
from requests_toolbelt.multipart.encoder import MultipartEncoder
from dotenv import load_dotenv
import os
load_dotenv()

JWT = os.getenv('PINATA')
src = "cer.png"



def pin_file_to_ipfs():
    url = "https://api.pinata.cloud/pinning/pinFileToIPFS"
    filename = f"cer.png"
    headers = {
        "Authorization": "Bearer " + JWT
    }
    metadata = {
        'name': 'name_certificate'
    }
    options = {
        'cidVersion': 0
    }
    with open(filename, 'rb') as f:
        multipart_data = MultipartEncoder(
            fields={
                'file': (filename, f),
                'pinataMetadata': (None, json.dumps(metadata), 'application/json'),
                'pinataOptions': (None, json.dumps(options), 'application/json')
            }
        )
        headers['Content-Type'] = multipart_data.content_type
        response = requests.post(url, data=multipart_data, headers=headers)
    if response.status_code == 200:
        print(f"Successfully uploaded name certificate.")
        return response.json()["IpfsHash"]
    else:
        print(f"Failed to upload name's certificate. Response: {response.text}")
        return None
import cv2
import requests
import numpy as np
import os

def create_certificate(full_name, date, week):
    certificate_background = cv2.imread("with_texts_2.png")

    cv2.putText(
        certificate_background,
        full_name,
        (150, 402),          cv2.FONT_HERSHEY_SIMPLEX,
        1.0,          (0, 0, 255),
        2,
    )

    cv2.putText(
        certificate_background,
        week,
        (145, 473),          cv2.FONT_HERSHEY_SIMPLEX,
        0.6,          (10, 10, 10),
        2,
    )

    cv2.putText(
        certificate_background,
        date,
        (280 , 748),
        cv2.FONT_HERSHEY_SIMPLEX,
        0.6,
        (0, 0, 0),
        2,
    )

    filename = f"{full_name}_{date}_certificate.png"
    cv2.imwrite(filename, certificate_background)
import defaultTheme from 'tailwindcss/defaultTheme'
import type { Config } from 'tailwindcss'
const {nextui} = require("@nextui-org/react");

const config: Config = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
    "./node_modules/@nextui-org/theme/dist/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        primary: '      },
      fontFamily: {
        beni: ['Beni', ...defaultTheme.fontFamily.sans],
        algo: ['Algo', ...defaultTheme.fontFamily.sans]
      },
      fontSize: {
        'title-6xl': ['3.75rem', '0.7'],
        'title-7xl': ['5rem', '0.7'],
        'title-8xl': ['6rem', '0.7'],
        'title-9xl': ['8rem', '0.7'],
        'title-10xl': ['10rem', '0.7'],
        'title-11xl': ['12rem', '0.7']
      },
      screens: {
        xs: '390px',
        '3xl': '1600px',
        '4xl': '1920px',
        '5xl': '2560px'
      },
      keyframes: {
        'loading-pulse': {
          '0%, 60%, 100%': { opacity: '0.5' },
          '30%': { opacity: '1', transform: 'scale(1.1)' }
        }
      },
      animation: {
        'loading-pulse':
          'loading-pulse 1.25s cubic-bezier(0.4, 0, 0.6, 1) infinite'
      }
    }
  },
  darkMode: "class",
  plugins: [require('@tailwindcss/forms'), nextui()]
}
export default config


from dotenv import load_dotenv

import os
load_dotenv()  

api_key = os.getenv("OPENAI_API_KEY")

from openai import OpenAI

client = OpenAI(api_key=api_key)



response = client.images.generate(

  model="dall-e-3",

  prompt=" Generate a beautiful certificate base background, " ,

  size="1024x1024",

  quality="standard",

  n=1,

)



image_url = response.data[0].url
from IPython.display import display, Image as IPImage

display(IPImage(url=image_url))
from openai import OpenAI

import requests

from PIL import Image

import io

import cv2

from datetime import datetime





image_url = response.data[0].url




image_response = requests.get(image_url)

image_bytes = io.BytesIO(image_response.content)




certificate_background = Image.open(image_bytes)




certificate_background.save("certificate_background.png")


import numpy as np



def generate_certificate(full_name, logo_path, date, background_image, output_path):

    
    certificate = np.array(background_image)



    
    logo = cv2.imread(logo_path)

    logo = cv2.resize(logo, (100, 100))  


    
    certificate[50:150, 50:150] = logo  


    
    font = cv2.FONT_HERSHEY_SIMPLEX

    font_size = 1

    font_thickness = 2

    font_color = (0, 0, 0)  


    
    cv2.putText(certificate, full_name, (200, 300), font, font_size, font_color, font_thickness, cv2.LINE_AA)



    
    date_text = f"Date: {date}"

    cv2.putText(certificate, date_text, (200, 350), font, font_size, font_color, font_thickness, cv2.LINE_AA)



    
    certificate_with_info = Image.fromarray(certificate)



    
    certificate_with_info.save(output_path)
import numpy as np



def generate_certificate(full_name, logo_path, date, background_image, output_path):

    
    certificate = np.array(background_image)



    
    logo = cv2.imread(logo_path)

    logo = cv2.resize(logo, (100, 100))  


    
    logo_position = ((certificate.shape[1] - logo.shape[1]) // 2, (certificate.shape[0] - logo.shape[0]) // 2)



    
    certificate[logo_position[1]:logo_position[1] + logo.shape[0], logo_position[0]:logo_position[0] + logo.shape[1]] = logo



    
    font = cv2.FONT_HERSHEY_SIMPLEX

    font_size = 1

    font_thickness = 2

    font_color = (0, 0, 0)  


    
    text_size_full_name = cv2.getTextSize(full_name, font, font_size, font_thickness)[0]

    text_position_full_name = ((certificate.shape[1] - text_size_full_name[0]) // 2, logo_position[1] + logo.shape[0] + 50)

    cv2.putText(certificate, full_name, text_position_full_name, font, font_size, font_color, font_thickness, cv2.LINE_AA)



    
    date_text = f"Date: {date}"

    text_size_date = cv2.getTextSize(date_text, font, font_size, font_thickness)[0]

    text_position_date = ((certificate.shape[1] - text_size_date[0]) // 2, text_position_full_name[1] + text_size_full_name[1] + 20)

    cv2.putText(certificate, date_text, text_position_date, font, font_size, font_color, font_thickness, cv2.LINE_AA)



    
    certificate_with_info = Image.fromarray(certificate)



    
    certificate_with_info.save(output_path)
full_name = "Abamitchew Tomas Belay"

logo_path = "certificate_background.png"

date = datetime.now().strftime("%Y-%m-%d")

output_path = "output_certificate.png"



generate_certificate(full_name, logo_path, date, certificate_background, output_path)
from IPython.display import Image, display




output_certificate_path = 'output_certificate.png'




display(Image(filename=output_certificate_path))
 

from flask import Flask, request
import cv2
import config.config as config
import connection
from openai import OpenAI
import urllib.request
import numpy as np
app = Flask(__name__)



@app.route('/')
def hello():
    return connection.create_table() 



    
@app.route('/certificate', methods=['GET', 'POST'])
def certificate():
    if request.method == 'GET':
        return generate_certificate()
    else:
        return show_the_login_form()


def generate_certificate():


    client = OpenAI(api_key=config.key_api)

    response = client.images.generate(
    model="dall-e-3",
    prompt= """
    a white background and add an edge blue color simple line  
    """
,
    size="1792x1024",
    quality="standard",
    n=1,
    )
    
    image_url = response.data[0].url 
    add_info(image_url)
    print(image_url)
    return image_url

def add_info(image):
    recipient_name = "recipient_name"
    training_date = "training_date"
    duration = "duration"
    trainer_name = "trainer_name"
    topics_covered = "topics_covered"
    additional_details = "additional_details"
    
    
    font = cv2.FONT_HERSHEY_COMPLEX
    font_scale = 1
    font_color = (0, 0, 0)      line_thickness = 3
    underline_thickness = 2
    x_axis = 550

    req = urllib.request.urlopen(image)
    arr = np.asarray(bytearray(req.read()), dtype=np.uint8)
    img = cv2.imdecode(arr, -1)
    cv2.putText(img,"Oracle", (800, 160), font,2, font_color,3,cv2.LINE_AA)
    cv2.putText(img,"Certificate ", (x_axis,300), font,5, font_color,3,cv2.LINE_AA)
    cv2.putText(img,"of Completion", (650,400), font,3, font_color,3,cv2.LINE_AA)
    
  
    
 

        name_position = (650, 500)  
    cv2.putText(img,  recipient_name, name_position, cv2.FONT_HERSHEY_SCRIPT_SIMPLEX, 3, font_color)
    text_size, _ = cv2.getTextSize(recipient_name, cv2.FONT_HERSHEY_SCRIPT_SIMPLEX, 2, line_thickness)
    underline_y = name_position[1] + text_size[1] + underline_thickness
    underline_start = (name_position[0], underline_y)
    underline_end = (name_position[0] + text_size[0], underline_y)
    cv2.line(img, underline_start, underline_end, font_color, underline_thickness)
    
    text_position = (x_axis, 600)
    cv2.putText(img, "For completing online softer development course " , text_position, font, font_scale, font_color, 4)

        date_position = (100, 900)
    date_text_position = (100, 950)
    
    cv2.putText(img, training_date, date_position, font, font_scale, font_color, line_thickness,cv2.LINE_AA)
    cv2.putText(img, "Completion Date", date_text_position, font, font_scale, font_color, line_thickness,cv2.LINE_AA)
    
    


   

        trainer_position = (1300, 900)
    trainer_text_position = (1300, 950)
    
    cv2.putText(img,trainer_name, trainer_position, font, font_scale, font_color, line_thickness,cv2.LINE_AA)
    cv2.putText(img, "Trainer", trainer_text_position, font, font_scale, font_color, line_thickness,cv2.LINE_AA)
    



    cv2.imshow('image', img)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
import cv2
import os
img = cv2.imread('/home/fanuel-data/Projects/Week5/AlgorandCertificate/Algorand_Certificate_Creation/ImageGeneration/asset/openai_image_test_1.PNG',1)





def put_text_on_image(img,name,company,date,message,message2):
    cv2.putText(img,date,(610,239),cv2.FONT_HERSHEY_PLAIN,1,(0,0,0),2)
    cv2.putText(img,company,(310,300),cv2.FONT_HERSHEY_SIMPLEX,2,(153,0,0),2)
    cv2.putText(img,name,(306,340),cv2.FONT_HERSHEY_PLAIN,2,(0,0,51),3)
    cv2.putText(img,message,(306,400),cv2.FONT_HERSHEY_SIMPLEX,0.5,(0,0,51),2)
    cv2.putText(img,message2,(306,420),cv2.FONT_HERSHEY_SIMPLEX,0.5,(0,0,51),2)


    cv2.imshow('Image', img)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

message1 = "This certificate is given to Trainee to indicate"
message2 = "that they finished their challenge successfully"
put_text_on_image(img,"Fanuel Abebe","10 Academy","January 10, 2024",message1,message2)
from openai import OpenAI
import os
from dotenv import load_dotenv
import requests
from PIL import Image
from io import BytesIO
load_dotenv()

client = OpenAI()

def create_variation_from_file():
    response = client.images.create_variation(
      model="dall-e-2",
      image = open("openai_image_test_1.jpg","rb"),
      size="1792x1024",
      n=1
    )
    return response

def get_img_with_prompt(prompt):
    response = client.images.generate(
      model="dall-e-3",
      prompt=prompt,
      size="1024x1792",
      quality="standard",
      n=1,
    )
    return response

def show_img_response(response):
    image_url = response.data[0].url
    print(image_url)
    response = requests.get(image_url)
    img = Image.open(BytesIO(response.content))
    img.show()


prompt = "minimalist professional background, very small algorand logo at the top,white background, professional certificate template, has empty space for text in the middle, \
no lines,make it look like a document"
show_img_response(get_img_with_prompt(prompt))
import sys

!{sys.executable} -m pip install py-algorand-sdk
from algosdk import account, mnemonic

from algosdk import transaction
private_key, address = account.generate_account()

print(f"address: {address}")

print(f"private key: {private_key}")

print(f"mnemonic: {mnemonic.from_private_key(private_key)}")
private_key2, address2 = account.generate_account()

print(f"address2: {address2}")

print(f"private key2: {private_key2}")

print(f"mnemonic2: {mnemonic.from_private_key(private_key2)}")
from utils import get_accounts, get_algod_client
from algosdk.v2client import algod



algod_address = "http://localhost:4001"

algod_token = "a" * 64

algod_client = algod.AlgodClient(algod_token, algod_address)







special_algod_client = algod.AlgodClient(

    "", algod_address, headers={"X-API-Key": algod_token}

)
algod_client = get_algod_client()

accts = get_accounts()



acct1 = accts.pop()

private_key, address = acct1.private_key, acct1.address

address
acct2 = accts.pop()

address2 = acct2.address

address2
from typing import Dict, Any



account_info: Dict[str, Any] = algod_client.account_info(address2)

print(f"Account balance: {account_info.get('amount')} microAlgos")
params = algod_client.suggested_params()

unsigned_txn = transaction.PaymentTxn(

    sender=address,

    sp=params,

    receiver=address2,

    amt=1000000,

    note=b"Hello World",

)

unsigned_txn

signed_txn = unsigned_txn.sign(private_key)

signed_txn
import json

from base64 import b64decode


txid = algod_client.send_transaction(signed_txn)

print("Successfully submitted transaction with txID: {}".format(txid))




txn_result = transaction.wait_for_confirmation(algod_client, txid, 4)



print(f"Transaction information: {json.dumps(txn_result, indent=4)}")

print(f"Decoded note: {b64decode(txn_result['txn']['txn']['note'])}")
import sys

!{sys.executable} -m pip install py-algorand-sdk
from algosdk import account, mnemonic

from algosdk import transaction
private_key, address = account.generate_account()

print(f"address: {address}")

print(f"private key: {private_key}")

print(f"mnemonic: {mnemonic.from_private_key(private_key)}")
private_key2, address2 = account.generate_account()

print(f"address2: {address2}")

print(f"private key2: {private_key2}")

print(f"mnemonic2: {mnemonic.from_private_key(private_key2)}")
from utils import get_accounts, get_algod_client
from algosdk.v2client import algod



algod_address = "http://localhost:4001"

algod_token = "a" * 64

algod_client = algod.AlgodClient(algod_token, algod_address)







special_algod_client = algod.AlgodClient(

    "", algod_address, headers={"X-API-Key": algod_token}

)
algod_client = get_algod_client()

accts = get_accounts()



acct1 = accts.pop()

private_key, address = acct1.private_key, acct1.address

address
acct2 = accts.pop()

address2 = acct2.address

address2
from typing import Dict, Any



account_info: Dict[str, Any] = algod_client.account_info(address2)

print(f"Account balance: {account_info.get('amount')} microAlgos")
params = algod_client.suggested_params()

unsigned_txn = transaction.PaymentTxn(

    sender=address,

    sp=params,

    receiver=address2,

    amt=1000000,

    note=b"Hello World",

)

unsigned_txn

signed_txn = unsigned_txn.sign(private_key)

signed_txn
import json

from base64 import b64decode


txid = algod_client.send_transaction(signed_txn)

print("Successfully submitted transaction with txID: {}".format(txid))




txn_result = transaction.wait_for_confirmation(algod_client, txid, 4)



print(f"Transaction information: {json.dumps(txn_result, indent=4)}")

print(f"Decoded note: {b64decode(txn_result['txn']['txn']['note'])}")
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base

URL_DATABASE = 'sqlite:///.account.db'

engine = create_engine(URL_DATABASE,connect_args={"check_same_thread":False})

SessionLocal = sessionmaker(autocommit=False,autoflush=False,bind=engine)

Base = declarative_base()
from fastapi import FastAPI, HTTPException, Depends
from typing import Annotated, List
from sqlalchemy.orm import Session
from pydantic import BaseModel
from database import SessionLocal, engine
import models
from fastapi.middleware.cors import CORSMiddleware

app = FastAPI();

origins = [
    'http://localhost:3000'
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,

)

class AccountBase(BaseModel):
    user_name: str
    password: str
    role: int
    public_key: str
    remark: str

class AccountModel(AccountBase):
    id:int

    class Config:
        from_attributes = True

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

db_dependency = Annotated[Session, Depends(get_db)]

models.Base.metadata.create_all(bind=engine)

@app.post("/accounts/",response_model=AccountModel)
async def create_account(account:AccountBase,db:db_dependency):
    db_account = models.Account(**account.dict())
    db.add(db_account)
    db.commit()
    db.refresh(db_account)
    return db_account

@app.get("/accounts/",response_model=List[AccountModel])
async def read_accounts(db:db_dependency,skip:int = 0,limit: int = 100):
    accounts = db.query(models.Account).offset(skip).limit(limit).all()
    return accounts
from database import Base
from sqlalchemy import Column, Integer, String, Boolean, Float

class Account(Base):
    __tablename__ = 'accounts'

    id = Column(Integer,primary_key=True,index=True)
    user_name = Column(String)
    password = Column(String)
    role = Column(Integer)
    public_key = Column(String)
    remark = Column(String)
import React, {useState, useEffect} from 'react'
import api from './api/api'
import 'bootstrap/dist/css/bootstrap.css'
import {Routes, Route, useNavigate} from 'react-router-dom';
import AdminPage from './Pages/Admin';
import HomePage from './Pages/Home';
import Trainee from './Pages/Trainee'

const App = () => {

 

  const [accounts, setAccounts] = useState([]);
  const [formData, setFormData] = useState({
    user_name: '',
    password: ''
  });

const fetchAccounts = async () => {
  const response = await api.get('/accounts/')
  setAccounts(response.data)
};

useEffect(() => {
  fetchAccounts();
},[]);

  const handleInputChange = (event) => {
    const value = event.target.type === 'checkbox'? event.target.checked: event.target.value;
    setFormData({
      ...formData,
      [event.target.name]: value,
    });
  };

  const handleFormatSumbit = async (event) => {
    event.preventDefault();
    await api.post('/accounts/',formData);
    fetchAccounts();
    setFormData({
      user_name: '',
      password: ''
    });
  };


  return(
    <div>
      <Routes>
        <Route path="/" exact element={<HomePage/>} />
        <Route path="/trainee" element={<Trainee/>} />
        <Route path="/admin" element={<AdminPage/>} />
      </Routes>
     
     
      {/* <Trainee /> */}
    </div>
  )
}

export default App;
import React from "react";
import Table from '../Components/Table'
import Trainee from './Trainee'
import {Routes, Route, useNavigate} from 'react-router-dom';
const Home = () => {
    const navigate = useNavigate();

    const navigateToContacts = () => {
      //  navigate to /Trainee
      console.log('clicked')
      navigate('/trainee', {replace: true});
    };
    return (
        <div>
        <Routes>
          <Route path="/trainee" element={<Trainee />} />
        </Routes>
            <nav className= 'navbar navbar-dark bg-primary'>
                <div className='container-fluid'>
                    <a className='navbar-brand' href='                        Accounts
                    </a>
                </div>
            </nav>
        <Table onClick={navigateToContacts} />
        </div>
    )
}

export default Home
import React from "react";

const Trainee = () => {
    return (
        <div>
            <h1>I am Trainee</h1>
        </div>
    )
}

export default Trainee
import os
import requests 
from openai import OpenAI
from dotenv import load_dotenv

load_dotenv()

VARIABLE_KEY=os.environ.get("OPENAI_KEY")
client = OpenAI(
  api_key=VARIABLE_KEY
)

prompt = """ 
          Create a simple certificate template exclusively crafted for trainees at 10 Academy. This certificate will be presented to individuals who successfully complete the challenging weekly task'
          The certificate design must incorporate the following elements:
          The top left corner should showcase the official logo of the company.
          Adjacent to the logo, include the text '10 Academy.'.
          Below the logo and '10 Academy,' left-justify the 'Issuing Date.'
          On the same line, right-justify the 'Certificate ID.'.
          Boldly state 'Awarded To:' below the 'Issuing Date' and 'Certificate ID.'.
          Display the recipient's bolded 'FULL NAME'  directly beneath 'Awarded To,' aligning it to the center.
          Add the line 'FOR SUCCESSFULLY COMPLETING THE WEB-3 WEEKLY CHALLENGE' on a separate line to the recipient's name.
          On the last line, right-justify the signature and name of the CEO of the company.
          The background color of the image should be white with no images for a clean and professional appearance.
          Ensure readability of the text by selecting appropriate font styles and sizes.
          Allow for ample space between elements to maintain a polished and organized layout.
          The image should showcase a single certificate, extending to fill the entire space.          
          Please use this components only. use the words perfectly like in the given and put 
          the compoinents in the given order
        """

response = client.images.generate(
  model="dall-e-3",
  prompt=prompt,
  size="1024x1024",
  quality="hd",
  n=1,
)

image_url = response.data[0].url

image_data = requests.get(image_url).content
with open("../images/certificate.png", "wb") as f:
  f.write(image_data)

print("Image saved successfully.")
body {
  font-family: 'Arial', sans-serif;
  margin: 0;
  padding: 0;
}

.app-container {
  background-color:   height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
}

.role-selection-container {
  text-align: center;
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color:   color:   padding: 10px 20px;
}

.role-buttons {
  display: flex;
  gap: 10px;
}

.role-button {
  padding: 10px;
  font-size: 16px;
  cursor: pointer;
  background-color:   color:   border: none;
  border-radius: 5px;
}

.role-content {
  width: 100%;
}

.create-trainee-popup {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color:   padding: 20px;
  border-radius: 8px;
}

.create-trainee-popup h2 {
  margin-bottom: 10px;
}

.create-trainee-popup form {
  display: flex;
  flex-direction: column;
}

.create-trainee-popup label {
  margin-bottom: 10px;
}

.create-trainee-popup input {
  padding: 8px;
  margin-bottom: 10px;
}

.create-trainee-popup button {
  padding: 10px;
  cursor: pointer;
  background-color:   color:   border: none;
  border-radius: 5px;
}

.admin-component,
.trainee-component,
.create-trainee-component,
.opt-in-form,
.trainees-list {
  background-color:   padding: 20px;
  border-radius: 8px;
}

.action-button {
  padding: 10px;
  margin: 5px;
}
import { useState } from "react";
import StaffForm from "./components/StaffForm";
import TraineeForm from "./components/TraineeForm";
import { Button } from "@mui/material";
import styled from "styled-components";

const Container = styled.div`
  margin: 100px 400px;
`;

const RoleSelectionButtons = styled.div`
  text-align: right;
  margin-bottom: 10px;

  button {
    margin-left: 10px;
  }
`;

const App = () => {
  const [trainees, setTrainees] = useState([]);
  const [activeRole, setActiveRole] = useState(null);

  const handleRoleSelection = (role) => {
    setActiveRole(role);
  };

  return (
    <Container>
      <RoleSelectionButtons>
        <Button
          variant={activeRole === "staff" ? "contained" : "outlined"}
          color="primary"
          onClick={() => handleRoleSelection("staff")}
        >
          Staff Role
        </Button>
        <Button
          variant={activeRole === "trainee" ? "contained" : "outlined"}
          color="primary"
          onClick={() => handleRoleSelection("trainee")}
        >
          Trainee Role
        </Button>
      </RoleSelectionButtons>

      {activeRole === "staff" && <StaffForm trainees={trainees} />}
      {activeRole === "trainee" && <TraineeForm />}
    </Container>
  );
};

export default App;
import os,sys
from algosdk import transaction
rpath = os.path.abspath('..')
if rpath not in sys.path:
    sys.path.insert(0, rpath)

from scripts.algo_client import AlgoClient

def create_asset(acct1, asset_url):
    addr1 = acct1["address"]
    pk1 = acct1["private_key"]
    algo_client = AlgoClient("http://localhost:4001", "a" * 64).get_algod_client()

    sp = algo_client.suggested_params()
    txn = transaction.AssetConfigTxn(
        sender=addr1,
        sp=sp,
        default_frozen=False,
        unit_name="algos",
        asset_name="Certificate",
        manager=addr1,
        reserve=addr1,
        freeze=addr1,
        clawback=addr1,
        url=asset_url,
        total=1,
        decimals=0,
    )
    print("address1:", addr1)
    stxn = txn.sign(pk1)
    
    txid = algo_client.send_transaction(stxn)
    print(f"Sent asset create transaction with txid: {txid}")
    
    results = transaction.wait_for_confirmation(algo_client, txid, 4)
    print(f"Result confirmed in round: {results['confirmed-round']}")

    created_asset = results["asset-index"]
    return created_asset


def opt_in_asset(trainee_email, asset_id, acct2):
    addr2 = acct2["address"]
    pk2 = acct2["private_key"]
    algo_client = AlgoClient("http://localhost:4001", "a" * 64).get_algod_client()

    sp = algo_client.suggested_params()
    optin_txn = transaction.AssetOptInTxn(
        sender=addr2, sp=sp, index=asset_id
    )

    signed_optin_txn = optin_txn.sign(pk2)
    txid = algo_client.send_transaction(signed_optin_txn)
    print(f"Sent opt-in transaction with txid: {txid}")

    results = transaction.wait_for_confirmation(algo_client, txid, 4)
    print(f"Result confirmed in round: {results['confirmed-round']}")


def transfer_asset(acct1, acct2, created_asset):
    address1 = acct1["address"]
    pk1 = acct1["private_key"]
    address2 = acct2["address"]
    pk2 = acct2["private_key"]

    algod_client = AlgoClient("http://localhost:4001", "a" * 64).get_algod_client()
    sp = algod_client.suggested_params()

    xfer_txn = transaction.AssetTransferTxn(
        sender=address1,
        sp=sp,
        receiver=address2,
        amt=1,
        index=created_asset,
    )
    signed_xfer_txn = xfer_txn.sign(pk1)
    txid = algod_client.send_transaction(signed_xfer_txn)
    print(f"Sent transfer transaction with txid: {txid}")

    results = transaction.wait_for_confirmation(algod_client, txid, 4)
    print(f"Result confirmed in round: {results['confirmed-round']}")

def freeze_asset(acct1, acct2, created_asset):
    address1 = acct1["address"]
    pk1 = acct1["private_key"]
    address2 = acct2["address"]
    pk2 = acct2["private_key"]

    algod_client = AlgoClient("http://localhost:4001", "a" * 64).get_algod_client()
    sp = algod_client.suggested_params()
    freeze_txn = transaction.AssetFreezeTxn(
        sender=address1,
        sp=sp,
        index=created_asset,
        target=address2,
        new_freeze_state=True,
    )
    signed_freeze_txn = freeze_txn.sign(pk1)
    txid = algod_client.send_transaction(signed_freeze_txn)
    print(f"Sent freeze transaction with txid: {txid}")
    results = transaction.wait_for_confirmation(algod_client, txid, 4)
    print(f"Result confirmed in round: {results['confirmed-round']}")
from fastapi import FastAPI, HTTPException, Depends, status
from pydantic import BaseModel, EmailStr
from typing import Optional, List
from ipfs_operations import pin_to_ipfs
from algorand_operations import create_asset, opt_in_asset, transfer_asset, freeze_asset
from send_email import send_email
from fastapi.middleware.cors import CORSMiddleware
import os,sys 

rpath = os.path.abspath('..')
if rpath not in sys.path:
    sys.path.insert(0, rpath)

from scripts.account_info import get_keys


app = FastAPI()

origins = ["*"]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],  
    allow_headers=["*"],  
)

class Trainee(BaseModel):
    name: str
    email: EmailStr

class OptInTrainee(Trainee):
    asset_id: str
    state: str = "created"

class TransferAsset(Trainee):
    reciever_address: str = get_keys("trainee_1")["address"]

trainees_db = []
opt_in_list = []
asset_id = ''

@app.post("/create_trainee")
def issue_nft(trainee: Trainee):
    trainees_db.append(trainee)
    print(*trainees_db)
    ipfsHash = pin_to_ipfs(trainee.name)
    asset_url = f"https://gateway.pinata.cloud/ipfs/{ipfsHash}"
    print("ASSET_URL",asset_url)
    asset_id = create_asset(get_keys("tutor"), asset_url)
    
    send_email(trainee.email, asset_id, trainee.name)
    return trainee

@app.post("/opt_in")
def opt_in_to_asset_endpoint(trainee: OptInTrainee):
    try:
        opt_in_asset(trainee.email, trainee.asset_id, get_keys("trainee_1"))
        opt_in_list.append(trainee)
        asset_id = trainee.asset_id
    except HTTPException as e:
        return e
    return {"message": "Opt-in successful!"}

@app.post("/transfer_asset")
def transfer_asset_endpoint(data: TransferAsset):
    nonlocal asset_id
    try:
        print("Asset ID:", asset_id)
        transfer_asset(get_keys("tutor"), get_keys("trainee_1"), asset_id)
        freeze_asset(get_keys("tutor"), get_keys("trainee_1"), asset_id)
        for index, t in enumerate(opt_in_list):
            if t.email == data.email:
                opt_in_list[index].state = "approved"
    except HTTPException as e:
        return e
    return {"message": "Asset transfer successful!"}

@app.get("/opt_in_list", response_model=List[OptInTrainee])
async def get_opt_in_list():
    return opt_in_list

@app.post("/approve_opt_in", status_code=status.HTTP_204_NO_CONTENT)
async def approve_opt_in(trainee: OptInTrainee):
    for index, t in enumerate(opt_in_list):
        if t.email == trainee.email:
            opt_in_list[index].state = "approved"
            return
    raise HTTPException(status_code=404, detail="Trainee not found")

@app.post("/decline_opt_in", status_code=status.HTTP_204_NO_CONTENT)
async def decline_opt_in(trainee: Trainee):
    for index, t in enumerate(opt_in_list):
        if t.email == trainee.email:
            opt_in_list[index].state = "declined"
            return
    raise HTTPException(status_code=404, detail="Trainee not found")
import { useState, useEffect } from "react";
import { Button, TextField, CircularProgress } from "@mui/material";
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
} from "@mui/material";

const StaffForm = ({ trainees }) => {
  const [newTrainee, setNewTrainee] = useState({
    name: "",
    email: "",
  });
  const [optInList, setOptInList] = useState([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    // Fetch the list of trainees who have opted in from the backend
    const fetchOptInList = async () => {
      try {
        const response = await fetch("http://127.0.0.1:8000/opt_in_list");
        if (response.ok) {
          const optInListData = await response.json();
          setOptInList(optInListData);
        } else {
          console.error("Error fetching opt-in list");
        }
      } catch (error) {
        console.error("Error fetching opt-in list:", error);
      }
    };

    fetchOptInList();
  }, []);

  const handleApprove = async (assetId) => {
    try {
      // Call the backend endpoint to approve the opt-in request
      const response = await fetch("http://127.0.0.1:8000/transfer_asset", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          asset_id: assetId,
          name: "TraineeName",
          email: "trainee@example.com",
        }),
      });

      if (response.ok) {
        // Update the user state to reflect approval
        setOptInList((prevList) =>
          prevList.map((trainee) =>
            trainee.assetId === assetId
              ? { ...trainee, state: "approved" }
              : trainee
          )
        );
        alert("Opt-in request approved successfully!");
      } else {
        console.error("Error approving opt-in request");
      }
    } catch (error) {
      console.error("Error approving opt-in request:", error);
    }
  };

  const handleDecline = async (assetId) => {
    try {
      // Call the backend endpoint to decline the opt-in request
      const response = await fetch("http://127.0.0.1:8000/decline_opt_in", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: "TraineeName",
          email: "trainee@example.com",
        }),
      });

      if (response.ok) {
        // Update the user state to reflect decline
        setOptInList((prevList) =>
          prevList.map((trainee) =>
            trainee.assetId === assetId
              ? { ...trainee, state: "declined" }
              : trainee
          )
        );
        alert("Opt-in request declined successfully!");
      } else {
        console.error("Error declining opt-in request");
      }
    } catch (error) {
      console.error("Error declining opt-in request:", error);
    }
  };

  const handleCreateTrainee = async () => {
    console.log("New Trainee:");
    console.log(newTrainee);

    if (newTrainee.name && newTrainee.email) {
      try {
        setLoading(true);

        const response = await fetch("http://127.0.0.1:8000/create_trainee", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(newTrainee),
        });

        if (response.ok) {
          setNewTrainee({ name: "", email: "" });
          alert("Trainee created successfully!");
        } else {
          const errorMessage = await response.text();
          alert(`Error creating trainee: ${errorMessage}`);
        }
      } catch (error) {
        console.error("Error:", error);
        alert("An error occurred.");
      } finally {
        setLoading(false);
      }
    } else {
      alert("Please fill in all fields.");
    }
  };

  return (
    <div>
      <h2>Create New Trainee</h2>
      <TextField
        label="Name"
        value={newTrainee.name}
        onChange={(e) => setNewTrainee({ ...newTrainee, name: e.target.value })}
      />
      <TextField
        label="Email"
        value={newTrainee.email}
        onChange={(e) =>
          setNewTrainee({ ...newTrainee, email: e.target.value })
        }
      />
      <Button
        variant="contained"
        color="primary"
        onClick={handleCreateTrainee}
        disabled={loading}
      >
        {loading ? <CircularProgress size={24} /> : "Create New Trainee"}
      </Button>

      <div>
        <h2>Opt-In Requests</h2>
        <TableContainer component={Paper}>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell>Name</TableCell>
                <TableCell>Actions</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {optInList.map((trainee) => (
                <TableRow key={trainee.assetId}>
                  <TableCell>{trainee.email}</TableCell>
                  <TableCell>
                    {trainee.state === "approved" ? (
                      "Approved"
                    ) : trainee.state === "declined" ? (
                      "Declined"
                    ) : (
                      <>
                        <Button
                          variant="contained"
                          color="primary"
                          onClick={() => handleApprove(trainee.assetId)}
                        >
                          Approve
                        </Button>
                        <Button
                          variant="contained"
                          color="secondary"
                          onClick={() => handleDecline(trainee.assetId)}
                        >
                          Decline
                        </Button>
                      </>
                    )}
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      </div>
    </div>
  );
};

export default StaffForm;
import json

from algosdk import account, mnemonic, transaction



acct = account.generate_account()

pk1 = acct[0]

address1 = acct[1]

print("Account 1")

print(address1)

mnemonic1 = mnemonic.from_private_key(acct[0])



print("Account 2")

acct = account.generate_account()

pk2 = acct[0]

address2 = acct[1]

print(address2)

mnemonic2 = mnemonic.from_private_key(acct[0])



print("Account 3")

acct = account.generate_account()

pk3 = acct[0]

address3 = acct[1]

print(address3)

mnemonic3 = mnemonic.from_private_key(acct[0])

print ("")

print("Copy off accounts above and add TestNet Algo funds using the TestNet Dispenser at https://bank.testnet.algorand.network/")

print("copy off the following mnemonic code for use later")

print("")

print("mnemonic1 = \"{}\"".format(mnemonic1))

print("mnemonic2 = \"{}\"".format(mnemonic2))

print("mnemonic3 = \"{}\"".format(mnemonic3))
from algosdk.v2client import algod

import json 



algod_address = "http://localhost:4001"

algod_token = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" 



algod_client = algod.AlgodClient(algod_token, algod_address)
account_info1 = algod_client.account_info(address1)

balance1 = account_info1.get('amount')

print('Account 1 balance: {} microAlgos'.format(balance1))



account_info2 = algod_client.account_info(address2)

balance2 = account_info2.get('amount')

print('Account 2 balance: {} microAlgos'.format(balance2))



account_info3 = algod_client.account_info(address3)

balance3 = account_info3.get('amount')

print('Account 3 balance: {} microAlgos'.format(balance3))

from algosdk.v2client import algod

from algosdk import transaction

import json 



algod_address = "http://localhost:4001"

algod_token = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" 



algod_client = algod.AlgodClient(algod_token, algod_address)

sp = algod_client.suggested_params()

txn = transaction.AssetConfigTxn(

    sender=address1,

    sp=sp,

    default_frozen=False,

    unit_name="rug",

    asset_name="Really Useful Gift",

    manager=address1,

    reserve=address1,

    freeze=address1,

    clawback=address1,

    url="https://path/to/my/asset/details",

    total=1,

    decimals=0,

)




stxn = txn.sign(pk1)


txid = algod_client.send_transaction(stxn)

print(f"Sent asset create transaction with txid: {txid}")


results = transaction.wait_for_confirmation(algod_client, txid, 4)

print(f"Result confirmed in round: {results['confirmed-round']}")




created_asset = results["asset-index"]

print(f"Asset ID created: {created_asset}")


import requests

from requests_toolbelt.multipart.encoder import MultipartEncoder

import json



JWT = 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySW5mb3JtYXRpb24iOnsiaWQiOiJhYTI2ZGU2OS0wMTEwLTRmMWQtYjFhNi02YTE5YzhmNGIxZjMiLCJlbWFpbCI6Im1zZ2FuYXdiZXJpaHVuMTBAZ21haWwuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInBpbl9wb2xpY3kiOnsicmVnaW9ucyI6W3siaWQiOiJGUkExIiwiZGVzaXJlZFJlcGxpY2F0aW9uQ291bnQiOjF9LHsiaWQiOiJOWUMxIiwiZGVzaXJlZFJlcGxpY2F0aW9uQ291bnQiOjF9XSwidmVyc2lvbiI6MX0sIm1mYV9lbmFibGVkIjpmYWxzZSwic3RhdHVzIjoiQUNUSVZFIn0sImF1dGhlbnRpY2F0aW9uVHlwZSI6InNjb3BlZEtleSIsInNjb3BlZEtleUtleSI6IjM1NGZhMWI4YWNjMGNiYjk3ZTUzIiwic2NvcGVkS2V5U2VjcmV0IjoiOGVjZTk2MzIyN2JmMzIwM2IzZTE5OTQ4YjBiZDllZjJiOGNmZDA1OThkMmJmMTliNTRiNzZiMDgxZjQ5M2JlOSIsImlhdCI6MTcwNTA2NDk3Mn0.aeYS6De46yTacViF4OUMwPDUWfH22GQttgYkYQqaoFw'



def pin_file_to_ipfs(name):

    url = "https://api.pinata.cloud/pinning/pinFileToIPFS"

    src = "../images/certificate.png"



    
    multipart_data = MultipartEncoder(

        fields={

            'file': (f'{name}.png', open(src, 'rb'), 'image/png'),

            'pinataMetadata': json.dumps({'name': f'{name}'}),

            'pinataOptions': json.dumps({'cidVersion': 0})

        }

    )



    headers = {

        'Content-Type': multipart_data.content_type,

        'Authorization': JWT

    }



    try:

        response = requests.post(url, data=multipart_data, headers=headers)

        return response.json()

    except Exception as e:

        print(e)

        return None




res = pin_file_to_ipfs("misge")

gateway = "blue-deliberate-tyrannosaurus-532.mypinata.cloud"

link = f"http://{gateway}/ipfs/{res['IpfsHash']}"

link


private_key, address = account.generate_account()

print(f"address: {address}")

print(f"private key: {private_key}")

print(f"mnemonic: {mnemonic.from_private_key(private_key)}")
memo = "vehicle volcano loud cigar hunt glad rabbit potato escape quality hole have barely board strike much lobster wreck print hair tissue cherry ride absent rent"

private = mnemonic.to_private_key(memo)

address = "MOBXTM2XM5QUWERNPY4564XELXV6BDKZ5KJ2WVBACUWVHGQSDSR74WI2NY"

private


algod_address = "http://localhost:4001"

algod_token = "a" * 64

algod_client = algod.AlgodClient(algod_token, algod_address)



memo1 = "appear position client wait exotic chair observe kitchen able brain enemy quantum reopen stock slide winter actress hollow dutch sniff cute balance size absorb human"

pk1 = mnemonic.to_private_key(memo1)

pub1 = "AXTRKY5BFZN57QXL26KLAEH533VC46MWMS7OBSGQQ5LQUML6P3NZGJPEAM"



mem2 = "vehicle volcano loud cigar hunt glad rabbit potato escape quality hole have barely board strike much lobster wreck print hair tissue cherry ride absent rent"

pk2 = mnemonic.to_private_key(mem2)

pub2 = "LNWCPO3SL6Q2D5IW7JMBZ2SJRSUVDYFAAE65PYSIWY5LWUJBJL7RI2LOUA"
account_info = algod_client.account_info(pub1)

print(f"Account balance: {account_info.get('amount')} microAlgos")
sp = algod_client.suggested_params()

txn = transaction.AssetConfigTxn(

    sender=pub1,

    sp=sp,

    default_frozen=False,

    unit_name="rug",

    asset_name="Really Useful Gift",

    manager=pub1,

    reserve=pub1,

    freeze=pub1,

    clawback=pub1,

    url="https://gateway.pinata.cloud/ipfs/QmQEA2YasZHhzLg3Fo7rtzjvBwD5oAi3Hab9qDB49cqsNL",

    total=1,

    decimals=0,

)




stxn = txn.sign(pk1)


txid = algod_client.send_transaction(stxn)

print(f"Sent asset create transaction with txid: {txid}")


results = transaction.wait_for_confirmation(algod_client, txid, 4)

print(f"Result confirmed in round: {results['confirmed-round']}")




created_asset = results["asset-index"]

print(f"Asset ID created: {created_asset}")
import smtplib

s = smtplib.SMTP('smtp.gmail.com', 587)

s.starttls()



s.login("msganawberihun10@gmail.com", os.environ.get('app_pwd'))

message = "This email is sent using code."


s.sendmail("msganawberihun10@gmail.com", "misganawbmb@gmail.com", message)


s.quit()
import cv2
from datetime import datetime

def load_image(image_path):
    return cv2.imread(image_path)

def resize_logo(logo, target_width):
    _, _, channels = logo.shape
    scale_factor = target_width / logo.shape[1]
    return cv2.resize(logo, (int(target_width), int(logo.shape[0] * scale_factor)))

def add_logo(certificate, logo, position):
    certificate[position[0]:position[0] + logo.shape[0], 
                position[1]:position[1] + logo.shape[1]] = logo

def add_text(certificate, text, position, font_size, font_color, font_thickness, font=cv2.FONT_HERSHEY_SIMPLEX):
    cv2.putText(certificate, text, position, font, font_size, font_color, font_thickness)

def generate_certificate(full_name, date, output_path, certificate_id):
    certificate_bg = load_image("../images/certificate.png")
    logo = load_image("../images/logo.png")
    logo = resize_logo(logo, target_width=100)
    
    add_logo(certificate_bg, logo, position=(20, 20))

    add_text(certificate_bg, "ISSUE DATE", position=(130, 485), font_size=1, font_color=(0, 0, 0), font_thickness=2)
    add_text(certificate_bg, "Certificate ID", position=(690, 485), font_size=1, font_color=(0, 0, 0), font_thickness=2)

    add_text(certificate_bg, full_name, position=(200, 635), font_size=2, font_color=(255, 0, 0), font_thickness=4)

    date_str = date.strftime("%B %d, %Y") 
    add_text(certificate_bg, date_str, position=(200, 520), font_size=0.5, font_color=(255, 0, 0), font_thickness=2)

    add_text(certificate_bg, certificate_id, position=(700, 520), font_size=0.5, font_color=(255, 0, 0), font_thickness=2)

    cv2.imwrite(output_path, certificate_bg)

if __name__ == "__main__":
    full_name = "Misganaw Berihun"
    date = datetime.now()
    output_path = "output_certificate.jpg"
    generate_certificate(full_name, date, output_path, "CTF123494u5664098")
import os,sys
from datetime import datetime
import json
from requests_toolbelt.multipart.encoder import MultipartEncoder
import requests
from dotenv import load_dotenv

rpath = os.path.abspath('..')
if rpath not in sys.path:
    sys.path.insert(0, rpath)

from scripts.edit_certificate import generate_certificate

load_dotenv()

def pin_to_ipfs(name):
    jwt_key = os.environ.get("jwt")
    jwt = f'Bearer {jwt_key}'
    print(jwt_key[-10:])
    date = datetime.now()
    output_path = f"../images/op_certificate.jpg"
    generate_certificate(name, date, output_path, "CTF123494U5664098")

    url = "https://api.pinata.cloud/pinning/pinFileToIPFS"
    src = f"../images/op_certificate.jpg"

    multipart_data = MultipartEncoder(
        fields={
            'file': (f'{name}.png', open(src, 'rb'), 'image/png'),
            'pinataMetadata': json.dumps({'name': f'{name}'}),
            'pinataOptions': json.dumps({'cidVersion': 0})
        }
    )

    headers = {
        'Content-Type': multipart_data.content_type,
        'Authorization': jwt
    }

    try:
        response = requests.post(url, data=multipart_data, headers=headers)
        print("JSON", response.json())
        return response.json()["IpfsHash"]
    except Exception as e:
        print(e)
        return None
import smtplib
import os
from dotenv import load_dotenv

load_dotenv()

def send_email(email, asset_id, name):
    app_pwd = os.environ.get("app_pwd")
    s = smtplib.SMTP('smtp.gmail.com', 587)
    s.starttls()

    s.login("msganawberihun10@gmail.com", app_pwd)
    message = f"Hey {name},\n Your certificate is ready you can get it using this id {asset_id}"
    s.sendmail("msganawberihun10@gmail.com", email, message)
    s.quit()
For an interactive guided walkthrough of the project install [CodeTour](https://marketplace.visualstudio.com/items?itemName=vsls-contrib.codetour) in VS Code and run the `Getting Started with Your AlgoKit Project` tour in the `CodeTour` in Explorer panel in your VSCode instance.


1. Clone this repository locally
2. Install pre-requisites:
   - Make sure to have [Docker](https://www.docker.com/) installed and running on your machine.
   - Install `AlgoKit` - [Link](https://github.com/algorandfoundation/algokit-cli   - Bootstrap your local environment; run `algokit bootstrap all` within this folder, which will:
     - Install `Poetry` - [Link](https://python-poetry.org/docs/     - Run `poetry install` in the root directory, which will set up a `.venv` folder with a Python virtual environment and also install all Python dependencies
     - Copy `.env.template` to `.env`
   - Run `algokit localnet start` to start a local Algorand network in Docker. If you are using VS Code launch configurations provided by the template, this will be done automatically for you.
3. Open the project and start debugging / developing via:
   - VS Code
     1. Open the repository root in VS Code
     2. Install recommended extensions
     3. Hit F5 (or whatever you have debug mapped to) and it should start running with breakpoint debugging.
        > **Note**
        > If using Windows: Before running for the first time you will need to select the Python Interpreter.
        1. Open the command palette (Ctrl/Cmd + Shift + P)
        2. Search for `Python: Select Interpreter`
        3. Select `./.venv/Scripts/python.exe`
   - JetBrains IDEs (please note, this setup is primarily optimized for PyCharm Community Edition)
     1. Open the repository root in the IDE
     2. It should automatically detect it's a Poetry project and set up a Python interpreter and virtual environment.
     3. Hit Shift+F10|Ctrl+R (or whatever you have debug mapped to) and it should start running with breakpoint debugging. Please note, JetBrains IDEs on Windows have a known bug that in some cases may prevent executing shell scripts as pre-launch tasks, for workarounds refer to [JetBrains forums](https://youtrack.jetbrains.com/issue/IDEA-277486/Shell-script-configuration-cannot-run-as-before-launch-task).
   - Other
     1. Open the repository root in your text editor of choice
     2. In a terminal run `poetry shell`
     3. Run `python -m smart_contracts` through your debugger of choice


1. If you update to the latest source code and there are new dependencies you will need to run `algokit bootstrap all` again
2. Follow step 3 above

> For guidance on `smart_contracts` folder and adding new contracts to the project please see [README](smart_contracts/README.md) on the respective folder.


This project makes use of Python to build Algorand smart contracts. The following tools are in use:

- [Algorand](https://www.algorand.com/) - Layer 1 Blockchain; [Developer portal](https://developer.algorand.org/), [Why Algorand?](https://developer.algorand.org/docs/get-started/basics/why_algorand/)
- [AlgoKit](https://github.com/algorandfoundation/algokit-cli) - One-stop shop tool for developers building on the Algorand network; [docs](https://github.com/algorandfoundation/algokit-cli/blob/main/docs/algokit.md), [intro tutorial](https://github.com/algorandfoundation/algokit-cli/blob/main/docs/tutorials/intro.md)
- [Beaker](https://github.com/algorand-devrel/beaker) - Smart contract development framework for PyTeal; [docs](https://beaker.algo.xyz), [examples](https://github.com/algorand-devrel/beaker/tree/master/examples)
- [PyTEAL](https://github.com/algorand/pyteal) - Python language binding for Algorand smart contracts; [docs](https://pyteal.readthedocs.io/en/stable/)
- [AlgoKit Utils](https://github.com/algorandfoundation/algokit-utils-py) - A set of core Algorand utilities that make it easier to build solutions on Algorand.
- [Poetry](https://python-poetry.org/): Python packaging and dependency management.
- [Black](https://github.com/psf/black): A Python code formatter.
- [Ruff](https://github.com/charliermarsh/ruff): An extremely fast Python linter.
- [mypy](https://mypy-lang.org/): Static type checker.
- [pytest](https://docs.pytest.org/): Automated testing.
- [pip-audit](https://pypi.org/project/pip-audit/): Tool for scanning Python environments for packages with known vulnerabilities.

It has also been configured to have a productive dev experience out of the box in [VS Code](https://code.visualstudio.com/), see the [.vscode](./.vscode) folder.
import os, sys
import base64
from algosdk.v2client import algod
from fastapi import FastAPI
from typing import Optional
from algosdk import account , encoding , mnemonic
from algosdk.transaction import PaymentTxn
from algosdk.transaction import AssetConfigTxn, AssetCreateTxn, AssetTransferTxn, AssetFreezeTxn
from algosdk.transaction import *
from algosdk.error import *
from algosdk.v2client import algod, indexer

from pydantic import BaseModel

class Transaction(BaseModel):
    sender_address: str
    reciever_address: str
    paraphrase: str
    asset_id: int
    amount: int
    note: str

class Asset(BaseModel):
    sender:str
    asset_name:str
    unit:str
    total:int
    default_frozen:bool
    decimals:int
    url:str
    manager:str
    reserve:str
    freeze:str
    clawback:str
    passphrase: str


class AssetCreation(BaseModel):
    creator_address: str
    passphrase: str
    asset_name: str
    unit_name: str
    total: int
    default_frozen: bool
    decimals: int
    url: str
    manager: str
    reserve: str
    freeze: str
    clawback: str




sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

algod_client=algod.AlgodClient("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","http://localhost:4001") indexer_client=indexer.IndexerClient("","http://localhost:8980") 

app = FastAPI()

@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/account")
def create_account():
    private_key, address = account.generate_account()
    paraphrase = mnemonic.from_private_key(private_key)

    return {"address": address, "paraphrase": paraphrase}

@app.get("/account/{Address}")
def get_account_details(Address: str):
    info = algod_client.account_info(Address)
    return {"Address": info}

@app.post("/nft_transfer")
def nft_transfer(transaction: Transaction):
    algod_address = "https://testnet-algorand.api.purestake.io/ps2"
    algod_token = "your-api-key"
    algod_client = algod.AlgodClient(algod_token, algod_address)

    try:
        private_key = encoding.mnemonic_to_private_key(transaction.passphrase)
        sender_address = account.address_from_private_key(private_key)

        params = algod_client.suggested_params()
        unsigned_txn = transaction.AssetTransferTxn(
            sender = sender_address,
            first=params["lastRound"],
            last=params["lastRound"] + 1000,
            note =transaction.note.encode(),
            asset=transaction.asset_id,
            to=transaction.reciever_address,
            amount=transaction.amount,
            genesis_hash=algod_client.genesis().hash,
        )

                signed_txn = unsigned_txn.sign(private_key)
        
        
        tx_id = algod_client.send_transaction(signed_txn)
        return {"Transaction ID": tx_id}
    
    except WrongChecksumError:
        return {"passphrase": "Checksum Error"}
    
    except ValueError:
        return {"passphrase": "Unknown value in the passphrase"}
    
    except WrongMnemonicLengthError:
        return {"passphrase": "Incorrect lengthof the passphrase"}
    





@app.post("/create_asset")
def create_asset(asset_creation: AssetCreation, transaction: Transaction):

    '''
    Endpoint to create an asset in the algorand blockchain

    Takes data defined inside of the AssetCreation and Transaction classes

    Request Method: POST

    '''
    algod_address = "https://testnet-algorand.api.purestake.io/ps2"
    algod_token = "ALGOD_API_KEY"
    algod_client = algod.AlgodClient(algod_token, algod_address)

    try:
                private_key = encoding.mnemonic_to_private_key(asset_creation.passphrase)
        creator_address = account.address_from_private_key(private_key)

                params = algod_client.suggested_params()
        unsigned_txn = transaction.AssetConfigTxn(
            sender=creator_address,
            fee=10,
            first=params["lastRound"],
            last=params["lastRound"] + 1000,
            gh=params["genesisID"],
            receiver=creator_address,
            asset_name=asset_creation.asset_name,
            unit_name=asset_creation.unit_name,
            total=asset_creation.total,
            decimals=asset_creation.decimals,
            default_frozen=asset_creation.default_frozen,
            url=asset_creation.url,
            manager=asset_creation.manager,
            reserve=asset_creation.reserve,
            freeze=asset_creation.freeze,
            clawback=asset_creation.clawback,
        )

                signed_txn = unsigned_txn.sign(private_key)

                tx_id = algod_client.send_transaction(signed_txn)
        return {"Asset Creation Transaction ID": tx_id}

    except WrongChecksumError:
        return {"passphrase": "Checksum error"}

    except ValueError:
        return {"passphrase": "unknown word in the passphrase"}

    except WrongMnemonicLengthError:
        return {"passphrase": "Incorrect size of the passphrase"}


@app.get("/assets")
def get_nfts():
    '''
    Endpoint to view all the available assets

    Request Method: GET

    '''
    return indexer_client.search_assets()

@app.get("/transaction/{account}")
def get_transactions(account: str):
    '''
    Endpoint to geet all the transactions for an account

    Request Method: GET
    '''

    return indexer_client.search_transactions_by_address(account)


@app.get("/transaction/{transaction_ID}")
def get_txn_info(transaction_ID: str):
    '''
    Get an info on a transaction by the txn ID
    '''

    return indexer_client.transaction(transaction_ID)
from pydantic import BaseModel

class Transaction(BaseModel):
    sender_address: str
    reciever_address: str
    paraphrase: str
    asset_id: int
    amount: int
    note: str

class Asset(BaseModel):
    sender:str
    asset_name:str
    unit:str
    total:int
    default_frozen:bool
    decimals:int
    url:str
    manager:str
    reserve:str
    freeze:str
    clawback:str
    passphrase: str
from pyteal import *

def nft_contract(receiver, reference_program, approval_program, clear_program):
    is_creator = Txn.sender() == Global.creator_address()
    is_close_to_creator = Txn.close_remainder_to() == Global.creator_address()

    on_creation = And(
        Txn.application_args.length() == Int(0),
        Txn.asset_total() == Int(1),
        Txn.asset_sender() == Global.creator_address(),
        Txn.asset_close_to() == Global.creator_address(),
        Gtxn[0].type_enum() == TxnType.AssetConfig,
        Gtxn[0].xfer_asset() == Int(0),
        Gtxn[0].asset_sender() == Global.creator_address(),
        Gtxn[0].asset_close_to() == Global.creator_address(),
        Gtxn[1].type_enum() == TxnType.AssetTransfer,
        Gtxn[1].xfer_asset() == Int(0),
        Gtxn[1].asset_sender() == Global.creator_address(),
        Gtxn[1].asset_close_to() == Global.creator_address(),
    )

    transfer_check = And(
        Gtxn[0].asset_sender() == Global.creator_address(),
        Gtxn[0].asset_close_to() == Global.creator_address(),
        Gtxn[1].asset_receiver() == Global.creator_address(),
    )

    on_transfer = And(
        Gtxn[0].type_enum() == TxnType.AssetTransfer,
        Gtxn[0].asset_amount() == Int(1),
        Gtxn[0].asset_close_to() == Global.creator_address(),
        Gtxn[1].type_enum() == TxnType.Payment,
        Gtxn[2].type_enum() == TxnType.Payment,
        Gtxn[1].amount() == Int(0),
        Gtxn[2].amount() == Int(0),
        transfer_check
    )

    return Cond(
        [on_creation, Seq([App.localPut(Int(0), Bytes("reference_program"), reference_program),
                          App.localPut(Int(0), Bytes("approval_program"), approval_program),
                          App.localPut(Int(0), Bytes("clear_program"), clear_program),
                          App.localPut(Int(0), Bytes("owner"), receiver),
                          App.localPut(Int(0), Bytes("freeze"), Int(0)),
                          Return(Int(1))])],
        [on_transfer, App.localGet(Int(0), Bytes("freeze")) == Int(0)],
        [is_creator, Int(1)],
        [is_close_to_creator, Int(1)],
        [Txn.close_remainder_to() == Global.creator_address(), Int(1)],
        [And(Txn.close_remainder_to() == Global.creator_address(),
             Gtxn[0].asset_close_to() == Global.creator_address()), Int(1)],
        [Else(), Int(0)]
    )

creator_address = "YOUR_CREATOR_ADDRESS"
reference_program = "REFERENCE_PROGRAM_HASH"
approval_program = "APPROVAL_PROGRAM_HASH"
clear_program = "CLEAR_PROGRAM_HASH"

compiled_contract = compileTeal(nft_contract(creator_address, reference_program, approval_program, clear_program), mode=Mode.Application)

print(compiled_contract.to_json())
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from dotenv import load_dotenv

load_dotenv()



import os 
from fastapi import Path
from fastapi import HTTPException
from scripts.send_email import send
from fastapi import FastAPI, HTTPException, File, UploadFile
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from config import API_KEY, API_SECRET
from scripts.sql_db import *
import requests
import sys
sys.path.append(f'./scripts')
import json
import os
from fastapi.middleware.cors import CORSMiddleware
from config import *


app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=['*'],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.get("/check")
def check():
    return "Your API is up!"


class receiver(BaseModel):
    address: str
    asset_id: str


class Table(BaseModel):
    db_name: str
    schema_name: str


class Data(BaseModel):

    trainee: str
    email: str
    asset: str
    status: str
    hashed:str
class Insert(BaseModel):

    db_name: str
    tb_data: Data
    table_name: str
    
class Update(BaseModel):

    asset: str
    status: str
    email: str
    hashed:str
class OptinUpdate(BaseModel):

    status: str
    remark: str
    asset: str


@app.post("/mint")
def create_upload_file():

        file_path = 'crt.jpg'

        headers = {'pinata_api_key': API_KEY, 'pinata_secret_api_key': API_SECRET}
    endpoint = "https://api.pinata.cloud/pinning/pinFileToIPFS"

    if os.path.isfile(file_path):
        with open(file_path, 'rb') as filedata:
            response = requests.post(
                endpoint, headers=headers, files={'file': filedata})

        print(response.text)

        hash = response.json()['IpfsHash']
    return hash
    

@app.post("/mail")
def mail(rec: receiver):
    send(rec.asset_id, rec.address)


@app.post("/createDb")
def create_db(name: str):
    createDB(name)


@app.post("/createTable")
def create_table(table: Table):
    createTable(table.db_name, table.schema_name)


@app.post("/insert")
def insert(data: Insert):
    json_stream=(data.tb_data.json())
    insert_to_table(data.db_name, json_stream, data.table_name) 
    
@app.post("/update")
def update(data: Update):
    json_stream=(data.json())

    update_table("trainee", json_stream, "trainee")

@app.post("/optinUpdate")
def update(data: OptinUpdate):
    json_stream=(data.json())

    optin_update("trainee", json_stream, "trainee")

@app.get("/getall")
def get_all():
    return db_get_values()

@app.get("/getTrainee")
def get_trainee(asset):
    return db_get_values_by_asset(asset)

@app.get("/getCertificates")
def get_trainee(addr):
    return db_get_values_by_addr(addr) 

 

%%bash



curl -X POST https://api.openai.com/v1/images/generations \

  -H 'Content-Type: application/json' \

  -H 'Authorization: Bearer $OPENAPIKEY' \

  -d '{

    "model": "dall-e-3",

    "prompt": "This certificate is awarded to [Name] for [Achievments] on [Date]. ![Logo](https://10academy.org/static/media/mLogo.888d64a1b5b3ec5cdf754e2d691004de.svg)",

    "n": 1,

    "size": "1792x1024"

  }'
%%bash



curl -X POST https://api.openai.com/v1/images/generations \

  -H 'Content-Type: application/json' \

  -H 'Authorization: Bearer $OPENAIKEY' \

  -d '{

    "model": "dall-e-3",

    "prompt": "Generate a beautiful certificate base background that is easy and elegant, with a clean and spacious design.

    The color scheme should primarily consist of white and red, creating a visually appealing contrast. 

    Please ensure that the certificate has ample white space and clearance between elements, 

    allowing for a professional and uncluttered appearance. The overall design should exude a sense of sophistication 

    and simplicity. Consider incorporating subtle patterns or borders that enhance the elegance of the certificate.  

    This certificate is awarded to [Name] for [Achievements] on [Date].",

    "n": 1,

    "size": "1792x1024"

    

  }'
%%bash

curl -X POST https://api.openai.com/v1/images/generations \

  -H 'Content-Type: application/json' \

  -H 'Authorization: Bearer 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 ' \

  -d '{

    "model": "dall-e-3",

    "prompt": "Generate a beautiful certificate base background that is easy and elegant, with a clean and spacious design. The color scheme should primarily consist of white and red, creating a visually appealing contrast. Please ensure that the certificate has ample white space and clearance between elements, allowing for a professional and uncluttered appearance. The overall design should exude a sense of sophistication and simplicity. Consider incorporating subtle patterns or borders that enhance the elegance of the certificate. This certificate is awarded to [Name] for [Achievements] on [Date].",

    "n": 1,

    "size": "1792x1024"

  }'
  
import { loadStdlib } from '@reach-sh/stdlib'
import MyAlgoConnect from '@reach-sh/stdlib/ALGO_MyAlgoConnect';
import React from 'react'
import './App.css';

import Login from './components/Login'
import Trainee from './components/layout/Trainee'
import ProtectedRoute from './components/ProtectedRoute'
import { BrowserRouter, Route, Routes } from 'react-router-dom'

import './assets/css/app.css'
import Home from './pages/Home'

require('dotenv').config()

const reach = loadStdlib("ALGO")
reach.setWalletFallback(reach.walletFallback({
    providerEnv: 'TestNet', MyAlgoConnect
}));


function App() {
  return (
    <BrowserRouter>
      <Routes>
        <Route path={"/"} exact element={<Home />} />
                    <Route path={"/login"} exact element={<Login />} />

                    <Route exact path='/trainee' element={<ProtectedRoute />}>
                        <Route exact path='/trainee' element={<Trainee />} />
                    </Route>
                    <Route exact path='/trainer' element={<ProtectedRoute />}>
                        <Route exact path='/trainer' element={<Trainer />} />
                    </Route>
        
      </Routes>
    </BrowserRouter>
    
  );
}

export default App;
/*global reach*/
import MyAlgoConnect from '@randlabs/myalgo-connect';

const algosdk = require('algosdk');
const myAlgoConnect = new MyAlgoConnect();
const sender = localStorage.getItem('token')

const baseServer = ''
const port = '';
const token = {
    'X-API-Key': 'F5w4DoU6Kg3pJlYR4Wsyh28decsbCirSqKMGrk1f'
}

const algodClient = new algosdk.Algodv2(token, baseServer, port);

const waitForConfirmation = async function (algodclient, txId) {
    let response = await algodclient.status().do();
    let lastround = response["last-round"];
    while (true) {
        const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();
        if (pendingInfo["confirmed-round"] !== null && pendingInfo["confirmed-round"] > 0) {
            //Got the completed Transaction
            console.log("Transaction " + txId + " confirmed in round " + pendingInfo["confirmed-round"]);
            break;
        }
        lastround++;
        await algodclient.statusAfterBlock(lastround).do();
    }
};

export const createAsset = async (hash, reserve = undefined) => {

    const params = await algodClient.getTransactionParams().do();

    const txn = algosdk.makeAssetCreateTxnWithSuggestedParamsFromObject({
        from: sender,
        total: 1,
        decimals: 0,
        assetName: "Traine Certificate",
        unitName: "Cert",
        assetURL: "https://ipfs.stibits.com/" + hash,
        assetMetadataHash: "mbBLKbJ36J+DRjXM1JO2qAGyUO79DF4=",
        defaultFrozen: false,
        freeze: undefined,
        manager: undefined,
        clawback: undefined,
        reserve: reserve,
        suggestedParams: params,
        // manager: "EUVBE6MISEX3QLZYERRCPJBJYXXSXM3GQU5DY6EEO7VGAHBFFEZLMXVET4",
        // reserve: "JLPXYTO2Z5KJWBG2HJLJHJYCRUNDU2AH6QQOYWA6G6CCGN6NJYSBR62CGA",
    });

    const signedTxn = await myAlgoConnect.signTransaction(txn.toByte());
    console.log("txn", signedTxn);

    const tx = (await algodClient.sendRawTransaction(signedTxn.blob).do());
    let assetID = null;
    // wait for transaction to be confirmed
    await waitForConfirmation(algodClient, tx.txId);
    // Get the new asset's information from the creator account
    let ptx = await algodClient.pendingTransactionInformation(tx.txId).do();
    assetID = ptx["asset-index"];
    //Get the completed Transaction
    // assetID = confirmedTxn["asset-index"];
    // console.log("asset", assetID);
    return assetID
}

export const upload = () => {
}

export const optin = async (assetID) => {

    console.log(assetID);
    let note="Opt-in"
    const params = await algodClient.getTransactionParams().do();
    
    const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({
        suggestedParams: {
            ...params,
        },
        from: sender,
        to: sender,
        assetIndex:assetID,
        amount: 0
    });
    const signedTxn = await myAlgoConnect.signTransaction(txn.toByte());
    console.log("txn", signedTxn);

    const tx = (await algodClient.sendRawTransaction(signedTxn.blob).do());
    // wait for transaction to be confirmed
    await waitForConfirmation(algodClient, tx.txId);
    // Get the new asset's information from the creator account
    let ptx = await algodClient.pendingTransactionInformation(tx.txId).do();
    console.log("ptx:",ptx);

    
}

export const transfer = async (assetID,receiver) => {

    const params = await algodClient.getTransactionParams().do();

    let recipient = receiver;
    let closeRemainderTo = undefined;
    let revocationTarget = undefined;
    let amount = 1;
    let note = undefined;

    let txn = algosdk.makeAssetTransferTxnWithSuggestedParams(
        sender, 
        recipient, 
        closeRemainderTo, 
        revocationTarget,
        amount,  
        note, 
        assetID, 
        params);


    const signedTxn = await myAlgoConnect.signTransaction(txn.toByte());
    console.log("txn", signedTxn);

    const tx = (await algodClient.sendRawTransaction(signedTxn.blob).do());
    // wait for transaction to be confirmed
    await waitForConfirmation(algodClient, tx.txId);
    // Get the new asset's information from the creator account
    let ptx = await algodClient.pendingTransactionInformation(tx.txId).do();
    console.log("ptx:",ptx);

    
}

// export { createAsset, upload, optin }
import json
import hashlib
import os
from algosdk import mnemonic
from algosdk.v2client import algod

from ..algorand_interaction.close_accnt import closeout_account
from ..algorand_interaction.create_accnt import create_account
def create_non_fungible_token():
      print("--------------------------------------------")
  print("Creating account...")
  accounts = {}
  m = create_account()
  accounts[1] = {}
  accounts[1]['pk'] = mnemonic.to_public_key(m)
  accounts[1]['sk'] = mnemonic.to_private_key(m)

    algod_token = "2f3203f21e738a1de6110eba6984f9d03e5a95d7a577b34616854064cf2c0e7b"
  algod_address = "https://academy-algod.dev.aws.algodev.network/"
  algod_client = algod.AlgodClient(algod_token, algod_address)

  print("--------------------------------------------")
  print("Creating Asset...")
      params = algod_client.suggested_params()
          
    dir_path = os.path.dirname(os.path.realpath(__file__))
  f = open (dir_path + '/NFT/metadata.json', "r")


  
    metadataJSON = json.loads(f.read())
  metadataStr = json.dumps(metadataJSON)

  hash = hashlib.new("sha512_256")
  hash.update(b"arc0003/amj")
  hash.update(metadataStr.encode("utf-8"))
  json_metadata_hash = hash.digest()


        txn = AssetConfigTxn(
      sender=accounts[1]['pk'],
      sp=params,
      total=1,
      default_frozen=False,
      unit_name="ALICE001",
      asset_name="Alice's Artwork 001",
      manager=accounts[1]['pk'],
      reserve=None,
      freeze=None,
      clawback=None,
      strict_empty_address_check=False,
      url="https://path/to/my/asset/details", 
      metadata_hash=json_metadata_hash,
      decimals=0)

    stxn = txn.sign(accounts[1]['sk'])

    txid = algod_client.send_transaction(stxn)
  print("Asset Creation Transaction ID: {}".format(txid))


    confirmed_txn = wait_for_confirmation(algod_client, txid, 4)  
  print("TXID: ", txid)
  print("Result confirmed in round: {}".format(confirmed_txn['confirmed-round']))
  try:
                              ptx = algod_client.pending_transaction_info(txid)
      asset_id = ptx["asset-index"]
      print_created_asset(algod_client, accounts[1]['pk'], asset_id)
      print_asset_holding(algod_client, accounts[1]['pk'], asset_id)
  except Exception as e:
      print(e)

  print("--------------------------------------------")
  print("You have successfully created your own Non-fungible token! For the purpose of the demo, we will now delete the asset.")
  print("Deleting Asset...")

    txn = AssetConfigTxn(
      sender=accounts[1]['pk'],
      sp=params,
      index=asset_id,
      strict_empty_address_check=False
      )

    stxn = txn.sign(accounts[1]['sk'])
    txid = algod_client.send_transaction(stxn)
  print("Asset Destroy Transaction ID: {}".format(txid))

    confirmed_txn = wait_for_confirmation(algod_client, txid, 4)  
  print("TXID: ", txid)
  print("Result confirmed in round: {}".format(confirmed_txn['confirmed-round']))
    try:
      print_asset_holding(algod_client, accounts[1]['pk'], asset_id)
      print_created_asset(algod_client, accounts[1]['pk'], asset_id)
      print("Asset is deleted.")
  except Exception as e:
      print(e)
  
  print("--------------------------------------------")
  print("Sending closeout transaction back to the testnet dispenser...")
  closeout_account(algod_client, accounts[1] )


def print_created_asset(algodclient, account, assetid):
        account_info = algodclient.account_info(account)
  idx = 0
  for my_account_info in account_info['created-assets']:
    scrutinized_asset = account_info['created-assets'][idx]
    idx = idx + 1       
    if (scrutinized_asset['index'] == assetid):
      print("Asset ID: {}".format(scrutinized_asset['index']))
      print(json.dumps(my_account_info['params'], indent=4))
      break

def print_asset_holding(algodclient, account, assetid):
                account_info = algodclient.account_info(account)
    idx = 0
    for my_account_info in account_info['assets']:
        scrutinized_asset = account_info['assets'][idx]
        idx = idx + 1        
        if (scrutinized_asset['asset-id'] == assetid):
            print("Asset ID: {}".format(scrutinized_asset['asset-id']))
            print(json.dumps(scrutinized_asset, indent=4))
            break

create_non_fungible_token()
const algosdk = require('algosdk');
const baseServer = 'https://app.dappflow.org/dev-wallets'
const port = '';
const token = {
    'X-API-Key': 'F5w4DoU6Kg3pJlYR4Wsyh28decsbCirSqKMGrk1f'
}

let algodClient = new algosdk.Algodv2(token, baseServer, port);

const tx=async () => {

    let params = await algodClient.getTransactionParams().do();

    let amount = Math.floor(Math.random() * 1000);
    var mnemonic = "code thrive mouse code badge example pride stereo sell viable adjust planet text close erupt embrace nature upon february weekend humble surprise shrug absorb faint";
    var recoveredAccount = algosdk.mnemonicToSecretKey(mnemonic);

    let txn = {
        "from": recoveredAccount.addr,
        "to": "UUOB7ZC2IEE4A7JO4WY4TXKXWDFNATM43TL73IZRAFIFFOE6ORPKC7Q62E",
        // "to": "K3EIOLLO6XKUDW46NDCRCSJVAF3WEQQZKHQ4A5X3SDRMEMKABC46RI3RFM",
        "fee": 1,
        "amount": amount,
        "firstRound": params.firstRound,
        "lastRound": params.lastRound,
        "genesisID": params.genesisID,
        "genesisHash": params.genesisHash,
        "note": new Uint8Array(0),
    };

    let signedTxn = algosdk.signTransaction(txn, recoveredAccount.sk);
    let sendTx = await algodClient.sendRawTransaction(signedTxn.blob).do();

    console.log("Transaction : " + sendTx.txId);
}

try {
   tx()
}
catch(e){
    console.log("err",e);
}
from openai import OpenAI
from dotenv import load_dotenv
import os
from pathlib import Path
import requests
import concurrent.futures
import random
import string

DATA_DIR = Path.cwd() / "Download"
subfolder_name = "Certificates"
subfolder_path = DATA_DIR / subfolder_name
file_path = DATA_DIR.joinpath("base_certificate_image_url.json")

DATA_DIR.mkdir(exist_ok=True)
subfolder_path.mkdir(parents=True, exist_ok=True)


load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=OPENAI_API_KEY)


def generate_cretificate_background(prompt):
    response = client.images.generate(
        model="dall-e-3",
        prompt=prompt,
        size="1024x1024",
        n=1,
        response_format="url",
    )
    file_name = "".join(random.choices(string.ascii_letters, k=5))
    download_generated_image(
        response.data[0].url, subfolder_path.joinpath(f"certificate_{file_name}.png")
    )


prompts = [
    "Clean, beautiful, elegant, and simple \
    certificate background with a combination \
    of black and gold colors with a placeholder \
    to write the name and other information the image should be landscape",
    "Clean, beautiful, elegant, and simple \
    certificate background with a combination \
    of black and silver colors with a placeholder \
    to write the name and other information the image should be landscape",
    "Clean, beautiful, elegant, and simple \
    certificate background with a combination \
    of black and bronze colors with a placeholder \
    to write the name and other information the image should be landscape",
]


def download_generated_image(image_url, path):
    try:
        image_data = requests.get(image_url)
        with open(path, "wb") as file:
            file.write(image_data.content)
    except requests.exceptions.RequestException as e:
        print(f"Error downloading image: {e}")


with concurrent.futures.ThreadPoolExecutor() as executor:
    executor.map(generate_cretificate_background, prompts)
from fastapi import FastAPI, Path
from openai import OpenAI
from dotenv import load_dotenv
import os
from pathlib import Path
import requests
import concurrent.futures
import random
import string
from pydantic import BaseModel
from typing import List
import cv2 as cv
from datetime import date
import algokit_utils as algokit

app = FastAPI()


class Prompts(BaseModel):
    prompts: List[str]


class Certificate_Params(BaseModel):
    name: str
    text: str


DATA_DIR = Path.cwd() / "Download"
subfolder_name = "Certificates"
subfolder_path = DATA_DIR / subfolder_name

DATA_DIR.mkdir(exist_ok=True)
subfolder_path.mkdir(parents=True, exist_ok=True)

FINAL_DIR = Path.cwd() / "Download/Certificates/Final"
FINAL_DIR.mkdir(parents=True, exist_ok=True)

load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=OPENAI_API_KEY)

gold_image = cv.imread("./Download/Certificates/certificate_aWxfb.png")
silver_image = cv.imread("./Download/Certificates/certificate_AUaHJ.png")
bronze_image = cv.imread("./Download/Certificates/certificate_LJZdo.png")
logo_image = cv.imread("./Download/Logo/TenxLogo.png")


def generate_certificate_background(prompt: str):
    response = client.images.generate(
        model="dall-e-3",
        prompt=prompt,
        size="1024x1024",
        n=1,
        response_format="url",
    )
    file_name = "".join(random.choices(string.ascii_letters, k=5))
    download_generated_image(
        response.data[0].url, subfolder_path.joinpath(f"certificate_{file_name}.png")
    )


def download_generated_image(image_url, path):
    try:
        image_data = requests.get(image_url)
        with open(path, "wb") as file:
            file.write(image_data.content)
    except requests.exceptions.RequestException as e:
        print(f"Error downloading image: {e}")


@app.get("/")
def index():
    return {"message": "This is a home route"}


@app.post("/generate-certificate")
async def generate_cerrtificte(prompts: Prompts):
    promts_to_be_generated = prompts.prompts
    with concurrent.futures.ThreadPoolExecutor() as executor:
        executor.map(generate_certificate_background, promts_to_be_generated)


@app.post("/generate-gold-certificate")
def generate_gold_certificate(certificate_params: Certificate_Params):
    try:
        img = gold_image
        texts = [certificate_params.name, certificate_params.text, str(date.today())]
        posiitons = [(360, 460), (370, 600), (410, 690)]
        font_scales = [2, 1, 1]
        font_thicknesses = [8, 2, 2]
        font = cv.FONT_HERSHEY_SIMPLEX
        font_scale = 2
        font_thickness = 8
        font_color = (0, 0, 0)
        for text, position, font_scale, font_thickness in zip(
            texts, posiitons, font_scales, font_thicknesses
        ):
            cv.putText(
                img, text, position, font, font_scale, font_color, font_thickness
            )
        logo_width = 100          logo_height = 100          resized_logo = cv.resize(logo_image, (logo_width, logo_height))

        logo_position = (275, 180)
        img[
            logo_position[1] : logo_position[1] + logo_height,
            logo_position[0] : logo_position[0] + logo_width,
        ] = resized_logo
        cv.imwrite(
            str(FINAL_DIR / f"{certificate_params.name}_gold_certificate.png"), img
        )
        return {"Message": "Succesfuly created gold certificate"}
    except Exception as e:
        return {"Error": f"Error editing gold certificate image: {e}"}


@app.post("/generate-silver-certificate")
def generate_silver_certificate(certificate_params: Certificate_Params):
    img = silver_image
    try:
        texts = [certificate_params.name, certificate_params.text, str(date.today())]

        posiitons = [(440, 380), (350, 460), (400, 520)]
        font_scales = [1, 1, 1]
        font_thicknesses = [4, 2, 2]
        font = cv.FONT_HERSHEY_SIMPLEX
        font_scale = 2
        font_thickness = 8
        font_color = (0, 0, 0)
        for text, position, font_scale, font_thickness in zip(
            texts, posiitons, font_scales, font_thicknesses
        ):
            cv.putText(
                img, text, position, font, font_scale, font_color, font_thickness
            )
        logo_width = 100          logo_height = 100          resized_logo = cv.resize(logo_image, (logo_width, logo_height))

        logo_position = (470, 200)
        img[
            logo_position[1] : logo_position[1] + logo_height,
            logo_position[0] : logo_position[0] + logo_width,
        ] = resized_logo
        cv.imwrite(
            str(FINAL_DIR / f"{certificate_params.name}_silver_certificate.png"), img
        )
        return {"Message": "Succesfuly created gold certificate"}
    except Exception as e:
        return {"Error": f"Error editing gold certificate image: {e}"}


@app.post("/generate-bronze-certificate")
def generate_bronze_certificate(certificate_params: Certificate_Params):
    try:
        img = bronze_image
        texts = [certificate_params.name, certificate_params.text, str(date.today())]
        posiitons = [(360, 460), (370, 600), (410, 690)]
        font_scales = [2, 1, 1]
        font_thicknesses = [8, 2, 2]
        font = cv.FONT_HERSHEY_SIMPLEX
        font_scale = 2
        font_thickness = 8
        font_color = (0, 0, 0)
        for text, position, font_scale, font_thickness in zip(
            texts, posiitons, font_scales, font_thicknesses
        ):
            cv.putText(
                img, text, position, font, font_scale, font_color, font_thickness
            )
        logo_width = 100          logo_height = 100          resized_logo = cv.resize(logo_image, (logo_width, logo_height))

        logo_position = (275, 180)
        img[
            logo_position[1] : logo_position[1] + logo_height,
            logo_position[0] : logo_position[0] + logo_width,
        ] = resized_logo

        cv.imwrite(
            str(FINAL_DIR / f"{certificate_params.name}_bronze_certificate.png"), img
        )
        return {"Message": "Succesfuly created gold certificate"}
    except Exception as e:
        return {"Error": f"Error editing gold certificate image: {e}"}
    

@app.post("/create-algorand-account")
def create_algorand_account():
    my_account = algokit.Account.new_account()
    algod = algokit.get_algod_client(
        algokit.get_default_localnet_config("algod")
        )
    algokit.get_kmd_client_from_algod_client(algod)
    algokit.ensure_funded(
        algod,
        algokit.EnsureBalanceParameters(
            account_to_fund=my_account,
            min_spending_balance_micro_algos=1_000_000_000
        )
    )
    return my_account
import { Route, Routes } from "react-router-dom";
import Home from "./pages/Home";
import Login from "./pages/Login";
import Certificate from "./pages/Certificate";
import NavBar from "./components/NavBar";
import { AuthProvider } from "./context/Auth";
import { RequireAuth } from "./components/RequireAuth";
function App() {
  return (
    <AuthProvider>
      <>
        <NavBar />
        <Routes>
          <Route
            path="/"
            element={
              <RequireAuth>
                <Home />
              </RequireAuth>
            }
          ></Route>
          <Route
            path="/certificates"
            element={
              <RequireAuth>
                <Certificate />
              </RequireAuth>
            }
          ></Route>
          <Route path="/login" element={<Login />}></Route>
        </Routes>
      </>
    </AuthProvider>
  );
}

export default App;
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App.tsx";
import "./index.css";
import { BrowserRouter } from "react-router-dom";

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>
);
@tailwind base;
@tailwind components;
@tailwind utilities;
import { useState, createContext, useContext } from "react";
import usersData from "../data/users.json";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { useAtom } from "jotai";
import { errorMessage } from "../global_state/global_state";

const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
  let [errorMsg, setErrorMsg] = useAtom(errorMessage);
  const [user, setUser] = useState(() => {
    const storedUser = localStorage.getItem("user");
    return storedUser ? JSON.parse(storedUser) : null;
  });
  const login = (username: string, password: string) => {
    try {
      const foundUser = usersData.users.find(
        (u) => u.username === username && u.password === password
      );
      if (foundUser !== undefined) {
        setUser(foundUser);
        localStorage.setItem("user", JSON.stringify(foundUser));
      } else {
        setErrorMsg("Invalid Username or password");
        toast.error("Invalid Username or password", {
          position: "top-right",
          autoClose: 5000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "dark",
        });
      }
    } catch (error) {
      setErrorMsg("Error during login");
      toast.error("Error during login", {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "dark",
      });
    }
  };

  const logout = () => {
    setUser(null);
    localStorage.removeItem("user");
  };

  return (
    <AuthContext.Provider value={{ user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  return useContext(AuthContext);
};
import { useState } from "react";
import { useAuth } from "../context/Auth";
import { useNavigate } from "react-router-dom";
import { errorMessage } from "../global_state/global_state";
import { useAtom } from "jotai";
import { useEffect } from "react";
const Login = () => {
  const [username, setUserName] = useState("");
  const [password, setPassword] = useState("");
  const [errorMsg] = useAtom(errorMessage);
  const auth = useAuth();
  const navigate = useNavigate();
  const handleLogin = (e) => {
    e.preventDefault();
    auth.login(username, password);
    navigate("/");
  };
  useEffect(() => {}, [errorMsg]);
  return (
    <div>
      <div className="text-red-700 px-4 py-3 rounded relative" role="alert">
        <strong className="font-bold">{errorMsg}</strong>
      </div>
      <div className="flex items-center min-h-screen p-4 bg-gray-100 lg:justify-center">
        <div className="flex flex-col overflow-hidden bg-white rounded-md shadow-lg max md:flex-row md:flex-1 lg:max-w-screen-md">
          <div className="p-5 bg-white md:flex-1">
            <h3 className="my-4 text-2xl font-semibold text-gray-700">
              Account Login
            </h3>
            <form onSubmit={handleLogin} className="flex flex-col space-y-5">
              <div className="flex flex-col space-y-1">
                <label
                  htmlFor="username"
                  className="text-sm font-semibold text-gray-500"
                >
                  Username
                </label>
                <input
                  type="username"
                  id="username"
                  className="px-4 py-2 transition duration-300 border border-gray-300 rounded focus:border-transparent focus:outline-none focus:ring-4 focus:ring-blue-200"
                  onChange={(e) => setUserName(e.target.value)}
                />
              </div>
              <div className="flex flex-col space-y-1">
                <div className="flex items-center justify-between">
                  <label
                    htmlFor="password"
                    className="text-sm font-semibold text-gray-500"
                  >
                    Password
                  </label>
                </div>
                <input
                  type="password"
                  id="password"
                  className="px-4 py-2 transition duration-300 border border-gray-300 rounded focus:border-transparent focus:outline-none focus:ring-4 focus:ring-blue-200"
                  onChange={(e) => setPassword(e.target.value)}
                />
              </div>
              <div>
                <button
                  type="submit"
                  className="w-full px-4 py-2 text-lg font-semibold text-white transition-colors duration-300 bg-blue-500 rounded-md shadow hover:bg-blue-600 focus:outline-none focus:ring-blue-200 focus:ring-4"
                >
                  Log in
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Login;


import openai
from dotenv import load_dotenv
import os
import base64
load_dotenv()

openai_api_key = os.getenv("OPENAI_API_KEY")

openai.api_key = openai_api_key



with open('logo.svg', 'rb') as logo_file:
    logo_content = logo_file.read()

encoded_logo = base64.b64encode(logo_content).decode('utf-8')

logo = 'logo.svg'

response = openai.Image.create(
  model="dall-e-3",
  prompt="""
          generate an image with small size logo on top right corner leave blank space for logo
          font family should be 'Times New Roman' font size has to be '16 px', background color is white with thin border color red,
          there should be space for Name signature and date
          leave blank space for document body, do not place sample stamp on the image
          be aware that is has to be readable by human that means it has to be in ENGLISH
          No stamp, and No signature know that there is only signature place, do not complicate the image, it has to
          readable no confusion and no meaningless design
        """,
  size="1024x1024",
  quality="standard",
  n=1,
)

image_url = response['data'][0]['url']

print(image_url)
 

from fastapi import APIRouter, HTTPException
from API.nft_models import NFTIssueRequest, TraineeOptInRequest, ApprovalRequest
from algosdk.v2client import algod
from algosdk import account, mnemonic, transaction

router = APIRouter()

ALGORAND_NODE = "http://localhost:4001"
ALGORAND_TOKEN = strings.Repeat("a", 64)
ISSUER_MNEMONIC = "your issuer mnemonic"
ISSUER_ADDRESS = "issuer_address"


@router.post("/issue-nft")
async def issue_nft(request: NFTIssueRequest):
        issuer_account = account.from_mnemonic(ISSUER_MNEMONIC)
    asset_id = ""


    txn = transaction.AssetTransferTxn(
        sender=ISSUER_ADDRESS,
        sp=None,
        receiver=request.trainee_public_key,
        amt=1,
        index=asset_id,
    )

    signed_txn = txn.sign(issuer_account)

        algod_client = algod.AlgodClient(ALGORAND_TOKEN, ALGORAND_NODE)
    txid = algod_client.send_transaction(signed_txn)

    return {
        "success": True,
        "message": f"NFT issued and distributed successfully. Transaction ID: {txid}",
    }


@router.post("/opt-in")
async def trainee_opt_in(request: TraineeOptInRequest):

    trainee_address = request.trainee_public_key
    asset_id = 123  

    return {"success": True, "message": "Trainee opted-in successfully"}


@router.post("/approve-decline")
async def approve_decline(request: ApprovalRequest):

    staff_mnemonic = ""
    staff_address = ""



    return {"success": True, "message": "Transfer request processed successfully"}


@router.get("/check-request-status/{trainee_public_key}")
async def check_request_status(trainee_public_key: str):

    trainee_address = trainee_public_key
    asset_id = ""


    return {"status": "pending"}
 

from openai import OpenAI

import os



api_key = os.environ.get("OPENAI_API_KEY")



client = OpenAI(api_key=api_key)








response = client.images.generate(

  model="dall-e-3",

  prompt="Design a simple certificate that has light cream color as base background and has no words written",

  size="1024x1024",

  quality="hd",

  n=1,

)



image_url = response.data[0].url
print(image_url)
import requests






response = requests.get(image_url)

with open("certificate.jpg", "wb") as f:

    f.write(response.content)





from openai import OpenAI

client = OpenAI()



response = client.images.create_variation(

  image=open("../assets/certificate.jpg", "rb"),

  n=2,

  size="1024x1024"

)



image_url = response.data[0].url
print(image_url)


import cv2  




background_img = cv2.imread("../assets/certificate.jpg")




logo_img = cv2.imread("../assets/Screenshot from 2024-01-10 18-45-08.png", cv2.IMREAD_UNCHANGED) 




if logo_img is not None:

   if len(logo_img.shape) == 3 and logo_img.shape[2] == 4:

       logo_img = cv2.cvtColor(logo_img, cv2.COLOR_BGRA2BGR)






header = "Certificate Of Completion"

header2 = "This certificate is awarded to"

header3 = "ABRAHAM TESFAYE AREDO"



full_name = "For successfully comlpeting Week 1"

date = "January 10, 2024"

other_info = "----"




font_face = cv2.FONT_HERSHEY_SIMPLEX

font_scale = 0.5

font_color = (0, 0, 0)  
thickness = 2




text_x, text_y = 300, 500  



cv2.putText(background_img, header, (text_x, text_y), cv2.FONT_HERSHEY_SCRIPT_COMPLEX, 1.33, font_color, thickness)

cv2.putText(background_img, header2, (text_x +100, text_y + 50), font_face, font_scale, font_color, thickness)

cv2.putText(background_img, header3, (text_x +20 , text_y + 100), cv2.FONT_HERSHEY_PLAIN, 2.0, font_color, thickness)



cv2.putText(background_img, full_name, (text_x + 80, text_y + 150), font_face, font_scale, font_color, thickness)

cv2.putText(background_img, date, (text_x + 180, text_y + 200), font_face, 0.3, font_color, thickness)

cv2.putText(background_img, other_info, (text_x + 205, text_y + 220), font_face, 0.2, font_color, thickness)






if logo_img is not None:

    logo_x, logo_y = 350, 280  
    background_img[logo_y:logo_y + logo_img.shape[0], logo_x:logo_x + logo_img.shape[1]] = logo_img




cv2.imshow("Certificate", background_img)

cv2.waitKey(0)




cv2.imwrite("new.jpg", background_img)

from openai import OpenAI

client = OpenAI()





from PIL import Image




original_image = Image.open("../notebooks/generated_image.jpg")




rgba_image = original_image.convert("RGBA")




rgba_image.save("../notebooks/generated_image_rgba.png")





response = client.images.edit(

  model="dall-e-2",

  image=open("../notebooks/generated_image_rgba.png", "rb"),

  prompt="A black dog inside a car",

  n=1,

  size="1024x1024"

)

image_url = response.data[0].url
print(image_url)
import { DeflyWalletConnect } from '@blockshake/defly-connect'
import { DaffiWalletConnect } from '@daffiwallet/connect'
import { PeraWalletConnect } from '@perawallet/connect'
import { PROVIDER_ID, ProvidersArray, WalletProvider, useInitializeProviders, useWallet } from '@txnlab/use-wallet'
import algosdk from 'algosdk'
import { SnackbarProvider } from 'notistack'
import { useState } from 'react'
import AppCalls from './components/AppCalls'
import ConnectWallet from './components/ConnectWallet'
import Transact from './components/Transact'
import { getAlgodConfigFromViteEnvironment } from './utils/network/getAlgoClientConfigs'

import { connectAlgoSigner } from 'algosignerjs'

let providersArray: ProvidersArray
if (import.meta.env.VITE_ALGOD_NETWORK === '') {
  providersArray = [{ id: PROVIDER_ID.KMD }]
} else {
  providersArray = [
    { id: PROVIDER_ID.DEFLY, clientStatic: DeflyWalletConnect },
    { id: PROVIDER_ID.PERA, clientStatic: PeraWalletConnect },
    { id: PROVIDER_ID.DAFFI, clientStatic: DaffiWalletConnect },
    { id: PROVIDER_ID.EXODUS },
    // If you are interested in WalletConnect v2 provider
    // refer to https://github.com/TxnLab/use-wallet for detailed integration instructions
  ]
}

export default function App() {
  const [openWalletModal, setOpenWalletModal] = useState<boolean>(false)
  const [openDemoModal, setOpenDemoModal] = useState<boolean>(false)
  const [appCallsDemoModal, setAppCallsDemoModal] = useState<boolean>(false)
  const { activeAddress } = useWallet()

  const toggleWalletModal = () => {
    setOpenWalletModal(!openWalletModal)
  }

  const toggleDemoModal = () => {
    setOpenDemoModal(!openDemoModal)
  }

  const toggleAppCallsModal = () => {
    setAppCallsDemoModal(!appCallsDemoModal)
  }

  const algodConfig = getAlgodConfigFromViteEnvironment()

  const walletProviders = useInitializeProviders({
    providers: providersArray,
    nodeConfig: {
      network: algodConfig.network,
      nodeServer: algodConfig.server,
      nodePort: String(algodConfig.port),
      nodeToken: String(algodConfig.token),
    },
    algosdkStatic: algosdk,
  })

  return (
    <SnackbarProvider maxSnack={3}>
      <WalletProvider value={walletProviders}>
        <div className="hero min-h-screen bg-teal-400">
          <div className="hero-content text-center rounded-lg p-6 max-w-md bg-white mx-auto">
            <div className="max-w-md">
              <h1 className="text-4xl">
                Welcome to <div className="font-bold">AlgoKit ðŸ™‚</div>
              </h1>
              <p className="py-6">
                This starter has been generated using official AlgoKit React template. Refer to the resource below for next steps.
              </p>

              <div className="grid">
                <a
                  data-test-id="getting-started"
                  className="btn btn-primary m-2"
                  target="_blank"
                  href="https://github.com/algorandfoundation/algokit-cli"
                >
                  Getting started
                </a>

                <div className="divider" />
                <button data-test-id="connect-wallet" className="btn m-2" onClick={toggleWalletModal}>
                  Wallet Connection
                </button>

                {activeAddress && (
                  <button data-test-id="transactions-demo" className="btn m-2" onClick={toggleDemoModal}>
                    Transactions Demo
                  </button>
                )}

                {activeAddress && (
                  <button data-test-id="appcalls-demo" className="btn m-2" onClick={toggleAppCallsModal}>
                    Contract Interactions Demo
                  </button>
                )}
              </div>

              <ConnectWallet openModal={openWalletModal} closeModal={toggleWalletModal} />
              <Transact openModal={openDemoModal} setModalState={setOpenDemoModal} />
              <AppCalls openModal={appCallsDemoModal} setModalState={setAppCallsDemoModal} />
            </div>
          </div>
        </div>
      </WalletProvider>
    </SnackbarProvider>
  )
}

function WalletConnect() {
  const { connect, connected, address } = connectAlgoSigner()

  const handleConnect = async () => {
    try {
      await connect()
    } catch (error) {
      console.error('Connection error:', error)
    }
  }

  const optInForNFT = async () => {
    try {
      // Assuming you have a method named `optIn` on your smart contract
      // that takes a public key as an argument
      const txId = await myContract.methods.optIn(address).send()
      console.log(`Transaction ID: ${txId}`)
    } catch (error) {
      console.error('Error opting in for NFT:', error)
    }
  }

  return (
    <div>
      {connected ? (
        <>
          Connected to address: {address}
          <button onClick={optInForNFT}>Opt-in for NFT</button>
        </>
      ) : (
        <button onClick={handleConnect}>Connect Wallet</button>
      )}
    </div>
  )
}

export default WalletConnect

const [nftName, setNftName] = useState('')
const [nftDescription, setNftDescription] = useState('')

const handleSubmit = (event) => {
  event.preventDefault()
  // TODO: Call the API to create the NFT
}

return (
  <div>
    <form onSubmit={handleSubmit}>
      <label>
        Name:
        <input type="text" value={nftName} onChange={(e) => setNftName(e.target.value)} />
      </label>
      <label>
        Description:
        <input type="text" value={nftDescription} onChange={(e) => setNftDescription(e.target.value)} />
      </label>
      <input type="submit" value="Create NFT" />
    </form>
  </div>
)
import beaker
import pyteal as pt

app = beaker.Application("algo_cert")


@app.external
def hello(name: pt.abi.String, *, output: pt.abi.String) -> pt.Expr:
    return output.set(pt.Concat(pt.Bytes("Hello, "), name.get()))


@app.external
def opt_in() -> pt.Expr:
    sender = pt.Txn.sender()
    already_opted_in = pt.App.globalGet(sender)
    opt_in_logic = pt.Seq(
        [
            pt.Assert(pt.Not(already_opted_in)),
            pt.App.globalPut(sender, pt.Int(1)),
            pt.Approve(),
        ]
    )
    return opt_in_logic


import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    SimulateAtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data)
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class HelloArgs(_ArgsBase[str]):
    name: str

    @staticmethod
    def method() -> str:
        return "hello(string)string"


@dataclasses.dataclass(kw_only=True)
class OptInArgs(_ArgsBase[None]):
    @staticmethod
    def method() -> str:
        return "opt_in()void"


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def simulate(self) -> SimulateAtomicTransactionResponse:
        result = self.atc.simulate(self.app_client.algod_client)
        return result

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def hello(
        self,
        *,
        name: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `hello(string)string` ABI method
        
        :param str name: The `name` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = HelloArgs(
            name=name,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def opt_in(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `opt_in()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = OptInArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to create an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        self.app_client.compose_create(
            self.atc,
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class AlgoCertClient:
    """A class for interacting with the algo_cert app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        AlgoCertClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
                self.app_client = algokit_utils.ApplicationClient(              algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def hello(
        self,
        *,
        name: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[str]:
        """Calls `hello(string)string` ABI method
        
        :param str name: The `name` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[str]: The result of the transaction"""

        args = HelloArgs(
            name=name,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def opt_in(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `opt_in()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = OptInArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Creates an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.TransactionResponse: The result of the transaction"""

        result = self.app_client.create(
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: algokit_utils.DeployCallArgs | None = None,
        update_args: algokit_utils.DeployCallArgs | None = None,
        delete_args: algokit_utils.DeployCallArgs | None = None,
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param algokit_utils.DeployCallArgs | None create_args: Arguments used when creating an application
        :param algokit_utils.DeployCallArgs | None update_args: Arguments used when updating an application
        :param algokit_utils.DeployCallArgs | None delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
from flask import Flask, jsonify, request
from flask_cors import CORS
from scripts import pinata, algo_assets, emails
from algosdk.v2client import algod



app = Flask(__name__)
CORS(app)

@app.route('/api/data', methods=['GET'])
def get_data():
    data = {'message': 'Hello from Flask!'}
    return jsonify(data)

@app.route('/api/option1', methods=['POST'])
def handle_option1():
    data = request.get_json()
    choice = data.get('choice')
    print(f'Received Option 1 choice: {choice}')

        return jsonify({'message': f'Received Option 1 choice: {choice}'})


@app.route('/api/create-asset', methods=['POST'])
def create_asset():
    """
    Endpoint to create an asset.

    Request JSON Body:
    {
        "trainee_email": "example@example.com",
        "tutor_public_key": "your_tutor_public_key",
        "tutor_private_key": "your_tutor_private_key"
    }

    Returns:
    {
        "status": "success",
        "message": "Asset created successfully",
        "asset_id": "<created_asset_id>"
    }
    """
    try:
                data = request.get_json()
        
                trainee_email = data.get('trainee_email')
        tutor_public_key = data.get('tutor_public_key')
        tutor_private_key = data.get('tutor_private_key')

                algod_address = "http://localhost:4001"
        algod_token = "a" * 64
        algod_client = algod.AlgodClient(algod_token, algod_address)
        
        asset_manager = algo_assets.AlgoAssetManager(algod_client)
        url = 'https://ipfs.io/ipfs/QmbCZsNosQwss7BXKmcCzGHZZ7PWdSW43ZxMJt3QYuGmth'

                created_asset_id = asset_manager.create_asset(tutor_private_key, tutor_public_key, url)

                emails.send_email(receiver_email=trainee_email, created_asset_id=created_asset_id)

                response_data = {
            "status": "success",
            "message": "Asset created successfully",
            "asset_id": created_asset_id
        }
        return jsonify(response_data), 200

    except Exception as e:
                response_data = {
            "status": "error",
            "message": f"Failed to create asset. Error: {str(e)}"
        }
        return jsonify(response_data), 500
    
def validate_receive_asset_input(data):
    """
    Validate and extract input parameters from the JSON data.

    Parameters:
    - data (dict): JSON data received in the request body.

    Returns:
    - address (int): Sender's address.
    - privatekey (int): Sender's private key.
    - created_asset (int): Index of the asset to opt into.

    Raises:
    - ValueError: If any required parameter is missing or not valid.
    """
        try:
        address = data['address']
        privatekey = data['privatekey']
        created_asset = int(data['created_asset'])
        return address, privatekey, created_asset
    except (KeyError, ValueError) as e:
        raise ValueError(f"Invalid or missing parameter: {str(e)}")

@app.route('/receive_asset', methods=['POST'])
def receive_asset_endpoint():
    """
    Flask endpoint for receiving assets. Expects a JSON payload with the following format:
    {
        "address": int,
        "privatekey": int,
        "created_asset": int
    }

    Returns:
    JSON response with transaction ID and status.

    Example response:
    {
        "txid": "transaction_id",
        "status": "success"
    }
    """
    try:
                data = request.get_json()

                address, privatekey, created_asset = validate_receive_asset_input(data)

        algod_address = "http://localhost:4001"
        algod_token = "a" * 64
        algod_client = algod.AlgodClient(algod_token, algod_address)
        
        asset_manager = algo_assets.AlgoAssetManager(algod_client)

                txid = asset_manager.receive_asset(address, privatekey, created_asset)

                response = {'txid': txid, 'status': 'success'}
        return jsonify(response)

    except ValueError as e:
                error_response = {'error': str(e), 'status': 'failure'}
        return jsonify(error_response), 400      

def validate_transfer_asset_input(data):
    """
    Validate and extract input parameters from the JSON data.

    Parameters:
    - data (dict): JSON data received in the request body.

    Returns:
    - private_key (str): Sender's private key.
    - sender (str): Sender's address.
    - receiver (str): Receiver's address.
    - created_asset (int): Index of the asset to transfer.

    Raises:
    - ValueError: If any required parameter is missing or not valid.
    """
        try:
        private_key = str(data['private_key'])
        sender = str(data['sender'])
        receiver = str(data['receiver'])
        created_asset = int(data['created_asset'])
        return private_key, sender, receiver, created_asset
    except (KeyError, ValueError) as e:
        raise ValueError(f"Invalid or missing parameter: {str(e)}")

@app.route('/transfer_asset', methods=['POST'])
def transfer_asset_endpoint():
    """
    Flask endpoint for transferring assets. Expects a JSON payload with the following format:
    {
        "private_key": str,
        "sender": str,
        "receiver": str,
        "created_asset": int
    }

    Returns:
    JSON response with transaction ID and status.

    Example response:
    {
        "txid": "transaction_id",
        "status": "success"
    }
    """
    try:
                data = request.get_json()

                private_key, sender, receiver, created_asset = validate_transfer_asset_input(data)

        algod_address = "http://localhost:4001"
        algod_token = "a" * 64
        algod_client = algod.AlgodClient(algod_token, algod_address)
        
        asset_manager = algo_assets.AlgoAssetManager(algod_client)

                txid = asset_manager.transfer_asset(private_key, sender, receiver, created_asset)

                response = {'txid': txid, 'status': 'success'}
        return jsonify(response)

    except ValueError as e:
                error_response = {'error': str(e), 'status': 'failure'}
        return jsonify(error_response), 400  

if __name__ == '__main__':
    app.run(debug=True)
// App.tsx
import React, { useState } from 'react';
import axios from 'axios';
import './App.css';

interface AppProps {}

const App: React.FC<AppProps> = () => {
  const [userChoice, setUserChoice] = useState<string | null>(null);

  const handleButtonClick = async (choice: string) => {
    setUserChoice(choice);
  
    if (choice === 'option1') {
      try {
        // Log the request details for debugging
        console.log('Sending Axios request...');
        const response = await axios.post('http://localhost:5000/api/option1', { choice });
        console.log('Axios response:', response.data.message);
      } catch (error) {
        console.error('Error sending data to Flask:', error);
  
        // Log specific Axios error details
        if (axios.isAxiosError(error)) {
          console.error('AxiosError details:', error.response);
        }
      }
    }
  };
  

  return (
    <div className="App">
      <h1>Welcome to Your App</h1>
      <p>Please choose one of the following options:</p>

      <div>
        <button onClick={() => handleButtonClick('option1')}>Option 1</button>
      </div>

      {userChoice && (
        <p>You chose: {userChoice}</p>
      )}
    </div>
  );
};

export default App;
from algosdk import account, mnemonic
from typing import Dict, Any
from algosdk.v2client import algod

class AlgorandAccountManager:
    def __init__(self):
                pass

    def create_account(self):
        """
        Generate a new Algorand account securely for production use.

        Returns:
            private_key (str): The private key of the new account.
            address (str): The public address associated with the private key.
            mnemonic_phrase (str): The mnemonic phrase for the private key.
        """
        private_key, address = account.generate_account()
        mnemonic_phrase = mnemonic.from_private_key(private_key)

        return private_key, address, mnemonic_phrase

    def get_account_info(algod_address: str, algod_token: str, account_address: str) -> Dict[str, Any]:
        """
        Get the account information, including balance, from the Algorand blockchain.

        Args:
            algod_address (str): The Algorand API endpoint.
            algod_token (str): The API key for authentication.
            account_address (str): The public address of the account.

        Returns:
            account_info (Dict[str, Any]): The account information.
        """
        algod_client = algod.AlgodClient(algod_token, algod_address)

        try:
            account_info = algod_client.account_info(account_address)
            balance = account_info.get("amount")
            print(f"Account Balance for {account_address}: {balance} microAlgos")
            return account_info
        except Exception as e:
            print(f"Error getting account information: {e}")
            return None
from algosdk.v2client import algod
from algosdk import transaction
from algosdk import account, mnemonic, transaction

class AlgoAssetManager:
    def __init__(self, algod_client: algod.AlgodClient):
        self.algod_client = algod_client

    def create_asset(self, private_key: str, address: str, url: str):
        sp = self.algod_client.suggested_params()
        txn = transaction.AssetConfigTxn(
            sender=address,
            sp=sp,
            default_frozen=False,
            unit_name="CERT",
            asset_name="Certification",
            manager=address,
            reserve=address,
            freeze=address,
            clawback=address,
            url=url,
            total=1,
            decimals=0,
        )
        stxn = txn.sign(private_key)
        txid = self.algod_client.send_transaction(stxn)
        print(f"Sent asset create transaction with txid: {txid}")
        results = transaction.wait_for_confirmation(self.algod_client, txid, 4)
        print(f"Result confirmed in round: {results['confirmed-round']}")
        created_asset = results["asset-index"]
        print(f"Asset ID created: {created_asset}")
        return created_asset

    def transfer_asset(self, private_key: str, sender: str, receiver: str, created_asset: int):
        sp = self.algod_client.suggested_params()
        xfer_txn = transaction.AssetTransferTxn(
            sender=sender,
            sp=sp,
            receiver=receiver,
            amt=1,
            index=created_asset,
        )
        signed_xfer_txn = xfer_txn.sign(private_key)
        txid = self.algod_client.send_transaction(signed_xfer_txn)
        print(f"Sent transfer transaction with txid: {txid}")
        results = transaction.wait_for_confirmation(self.algod_client, txid, 4)
        print(f"Result confirmed in round: {results['confirmed-round']}")
        return txid

    def receive_asset(self, address, privatekey, created_asset: int):
        sp = self.algod_client.suggested_params()
        optin_txn = transaction.AssetOptInTxn(
            sender=address, sp=sp, index=created_asset
        )
        signed_optin_txn = optin_txn.sign(privatekey)
        txid = self.algod_client.send_transaction(signed_optin_txn)
        print(f"Sent opt in transaction with txid: {txid}")
        results = transaction.wait_for_confirmation(self.algod_client, txid, 4)
        print(f"Result confirmed in round: {results['confirmed-round']}")
        return txid

    def get_asset_info(self, asset_id: int):
        asset_info = self.algod_client.asset_info(asset_id)
        print(asset_info)
        return asset_info
import requests
import os
from dotenv import load_dotenv

def upload_to_pinata(file_path):
    load_dotenv()
    url = "https://api.pinata.cloud/pinning/pinFileToIPFS"
    jwt_token = os.getenv("PINATA_API_KEY")
    headers = {"Authorization": f"Bearer {jwt_token}"}

    with open(file_path, "rb") as fp:
        response = requests.post(url, files={"file": fp}, headers=headers)
        return response.json()
import React, { useState } from 'react';
import Asset from './Asset';
import Requests from './requests';
import Revoke from './revoke';

function NavBar() {
    const [activeLink, setActiveLink] = useState<string>('home');

    const handleNavLinkClick = (link: string) => {
      setActiveLink(link);
    };
  return (
    <div className="container">
    <nav className="navbar navbar-expand-lg bg-body-tertiary">
      <div className="container-fluid">
        <a className="navbar-brand" href="/">
          10 Academy
        </a>
        <button
          className="navbar-toggler"
          type="button"
          data-bs-toggle="collapse"
          data-bs-target="          aria-controls="navbarNav"
          aria-expanded="false"
          aria-label="Toggle navigation"
        >
          <span className="navbar-toggler-icon"></span>
        </button>
        <div className="collapse navbar-collapse" id="navbarNav">
          <ul className="navbar-nav">
            <li className={`nav-item ${activeLink === 'home' ? 'active' : ''}`}>
              <a
                className="nav-link"
                href="                onClick={() => handleNavLinkClick('home')}
              >
                Create Certificate
              </a>
            </li>
            <li className={`nav-item ${activeLink === 'features' ? 'active' : ''}`}>
              <a
                className="nav-link"
                href="                onClick={() => handleNavLinkClick('features')}
              >
                Requests
              </a>
            </li>
            <li className={`nav-item ${activeLink === 'pricing' ? 'active' : ''}`}>
              <a
                className="nav-link"
                href="                onClick={() => handleNavLinkClick('pricing')}
              >
                Revoke
              </a>
            </li>
          </ul>
        </div>
      </div>
      </nav>
      
      <div className="row justify-content-center">
        <div className="col-md-8">
          {activeLink === 'home' && <Asset />}
          {activeLink === 'features' && <Requests />}
          {activeLink === 'pricing' && <Revoke />}
        </div>
      </div>
    </div>
    
    
  );
}

export default NavBar;
// Home.tsx
import React, { useState } from 'react';

const Home: React.FC = () => {
  const [inputValues, setInputValues] = useState({
    value1: '',
    value2: '',
    value3: '',
    value4: '',
  });

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>, fieldName: string) => {
    setInputValues({
      ...inputValues,
      [fieldName]: e.target.value,
    });
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // Add your logic here to send inputValues to the backend
    console.log('Sending values to backend:', inputValues);
  };

  return (
    <div className="container d-flex justify-content-center align-items-center vh-100">
      <div className="text-center">
        <h2>Create Certificate</h2>
        <form onSubmit={handleSubmit}>
          <div className="form-group row mt-4">
            <label htmlFor="value1" className="col-sm-2 col-form-label">
              Trainee Name:
            </label>
            <div className="col-sm-4">
              <input
                type="text"
                className="form-control"
                id="value1"
                value={inputValues.value1}
                onChange={(e) => handleChange(e, 'value1')}
              />
            </div>
            <label htmlFor="value2" className="col-sm-2 col-form-label">
              Trainee Email:
            </label>
            <div className="col-sm-4">
              <input
                type="text"
                className="form-control"
                id="value2"
                value={inputValues.value2}
                onChange={(e) => handleChange(e, 'value2')}
              />
            </div>
          </div>
          <div className="form-group row mt-4">
            <label htmlFor="value3" className="col-sm-2 col-form-label">
              Public Key:
            </label>
            <div className="col-sm-4">
              <input
                type="text"
                className="form-control"
                id="value3"
                value={inputValues.value3}
                onChange={(e) => handleChange(e, 'value3')}
              />
            </div>
            <label htmlFor="value4" className="col-sm-2 col-form-label">
              Private Key:
            </label>
            <div className="col-sm-4">
              <input
                type="text"
                className="form-control"
                id="value4"
                value={inputValues.value4}
                onChange={(e) => handleChange(e, 'value4')}
              />
            </div>
          </div>
          <div className="form-group row mt-4">
            <div className="col-sm-10 offset-sm-2">
              <button type="submit" className="btn btn-dark">
                Create
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>
  );
};

export default Home;
import React, { useState, ChangeEvent, FormEvent } from 'react';
import { Link } from 'react-router-dom';

interface FormData {
  inputValue1: string;
  inputValue2: string;
  inputValue3: string;
}

function Student() {
  const [formData, setFormData] = useState<FormData>({
    inputValue1: '',
    inputValue2: '',
    inputValue3: '',
  });

  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };

  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    // Access the name value from formData
    const { inputValue1 } = formData;

    // Redirect to the Features page with the entered name
    window.location.href = `/tutor?name=${inputValue1}`;
  };

  return (
    <div className="d-flex flex-column" style={{ minHeight: '100vh' }}>
      <div className="p-3">
        <Link to="/" className="btn btn-outline-secondary">&larr; </Link>
      </div>
      <div className="flex-grow-1 d-flex flex-column align-items-center justify-content-center">
        <h2 className="mb-4">Student Page - Hello World!</h2>
        <form onSubmit={handleSubmit} className="d-flex flex-column align-items-start">
          {/* Form 1 */}
          <div className="form-group d-flex mt-4">
            <label htmlFor="inputValue1" className="mr-2">Name:</label>
            <input
              type="text"
              className="form-control"
              id="inputValue1"
              name="inputValue1"
              value={formData.inputValue1}
              onChange={handleChange}
            />
          </div>

          {/* Form 2 */}
          <div className="form-group d-flex mt-4">
            <label htmlFor="inputValue2" className="mr-2">Asset id:</label>
            <input
              type="text"
              className="form-control"
              id="inputValue2"
              name="inputValue2"
              value={formData.inputValue2}
              onChange={handleChange}
            />
          </div>

          {/* Form 3 */}
          <div className="form-group d-flex mt-4">
            <label htmlFor="inputValue3" className="mr-2">Private Key:</label>
            <input
              type="text"
              className="form-control"
              id="inputValue3"
              name="inputValue3"
              value={formData.inputValue3}
              onChange={handleChange}
            />
          </div>

          <div className="form-group ml-auto mt-2">
            <button type="submit" className="btn btn-dark">Submit</button>
          </div>
        </form>
      </div>
    </div>
  );
}

export default Student;
// App.tsx
import React, { useState } from 'react';
import { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';
import axios from 'axios';
import NavBar from './components/navbar';
import Student from './components/student';


interface AppProps {}

const Home: React.FC = () => (
  <div className="container d-flex justify-content-center align-items-center vh-100">
      <div className="text-center">
        <h1>10 Academy</h1>
        <p>Which one are you?</p>
        <div>
          <Link to="/tutor">
            <button className="btn btn-dark mr-2">Tutor</button>
          </Link>
          <Link to="/student">
            <button className="btn btn-dark">Student</button>
          </Link>
        </div>
      </div>
    </div>

);




const App: React.FC<AppProps> = () => {
  const [userChoice, setUserChoice] = useState<string | null>(null);

  const handleButtonClick = async (choice: string) => {
    setUserChoice(choice);

    if (choice === 'option1') {
      try {
        console.log('Sending Axios request...');
        const response = await axios.post('http://localhost:5000/api/option1', { choice });
        console.log('Axios response:', response.data.message);
      } catch (error) {
        console.error('Error sending data to Flask:', error);

        if (axios.isAxiosError(error)) {
          console.error('AxiosError details:', error.response);
        }
      }
    }
  };

  return (
    <Router>
      <Routes>
        <Route path="/tutor" element={<NavBar />} />
        <Route path="/student" element={<Student />} />
        <Route path="/" element={<Home />} />
      </Routes>
    </Router>
  );
};

export default App;
import openai 
from dotenv import load_dotenv
import os

load_dotenv()
openai.api_key = os.getenv('API_KEY')

try:
    response = openai.Image.create(
        prompt='Students Certification',
        n=1,
        size='1024x1024'
    )
    image_url = response['data'][0]['url']
    print(image_url)
except Exception as e:
    print(f"Error: {e}")
import openai

from dotenv import load_dotenv

import os

import requests

import cv2

import numpy as np

from datetime import datetime
load_dotenv()

openai.api_key = os.getenv('API_KEY')
def generate_certificate(prompt, n=1, size='1024x1024'):

    try:

        response = openai.Image.create(

            prompt=prompt,

            n=n,

            size=size

        )

        image_url = response['data'][0]['url']

        print(image_url)

        return image_url

    except Exception as e:

        print(f"Error: {e}")

        return None
def download_image(url, save_path):

    response = requests.get(url)

    if response.status_code == 200:

        with open(save_path, 'wb') as file:

            file.write(response.content)

        print(f"Image downloaded and saved at {save_path}")

    else:

        print(f"Failed to download image. Status code: {response.status_code}")
original_prompt = (

   '''A captivating and dynamic certificate commemorating the successful completion of a weekly challenge at 10 Academy.

    This distinctive certificate is adorned with a luxurious gold border, adorned with the prestigious 10 Academy emblem as a watermark.

    It includes designated spaces for the recipient's name, the date of achievement,and the signature of the challenge coordinator.

    The certificate is designed to symbolize exceptional performance in the context of a weekly challenge.'''

)



updated_prompt = (

    "I NEED to test how the tool works with extremely simple prompts. "

    "DO NOT add any detail, just use it AS-IS: " + original_prompt

)



generated_image_url = generate_certificate(updated_prompt)

if generated_image_url:

    save_path = "../images/downloaded_image.jpg"

    download_image(generated_image_url, save_path)

def generate_certificate(name, logo_path, date):

    
    certificate = cv2.imread('certificate_template.jpg')  



    
    font = cv2.FONT_HERSHEY_SIMPLEX

    name_position = (100, 200)

    name_font_size = 2

    name_color = (0, 0, 0)  
    cv2.putText(certificate, name, name_position, font, name_font_size, name_color, 2, cv2.LINE_AA)



    
    logo = cv2.imread(logo_path)

    logo_position = (50, 50)

    certificate[logo_position[1]:logo_position[1] + logo.shape[0], logo_position[0]:logo_position[0] + logo.shape[1]] = logo



    
    date_text = f"Date: {date.strftime('%Y-%m-%d')}"

    date_position = (100, 300)

    date_font_size = 1

    date_color = (0, 0, 0)  
    cv2.putText(certificate, date_text, date_position, font, date_font_size, date_color, 1, cv2.LINE_AA)



    
    cv2.imwrite('generated_certificate.jpg', certificate)
import openai
from platform import python_version



print(python_version())
print(openai.__version__)
from dotenv import load_dotenv

import os
load_dotenv()
openai.api_key = 
try:

    response = openai.Image.create(

        prompt='Student Certification',

        n=1,

        size='1024x1024'

    )

    image_url = response['data'][0]['url']

    print(image_url)

except Exception as e:

    print(f"Error: {e}")




image_url = response['data'][0]['url']

print(image_url)
import json
import base64

from algosdk.v2client import algod

from algosdk import account,mnemonic

from algosdk.future.transaction import AssetConfigTxn, AssetTransferTxn, AssetFreezeTxn
!pip install --upgrade algosdk

from algosdk.future.transaction import *
algod_address = "http://localhost:4001"
algod_token = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
client = algod.AlgodClient(algod_token, algod_address)
from beaker import sandbox
client = sandbox.get_algod_client()
account = sandbox.get_accounts()
import os
import sys

def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'web3.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            ''' Django import failed.
                Please ensure that Django is installed and accessible on your PYTHONPATH environment variable.
                Have you activated a virtual environment?"
            '''
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
import { loadStdlib } from '@reach-sh/stdlib'
import Login from './components/Login'
import Form from './components/Form'
import Route from './components/Route'
import { BrowserRouter, Routes } from 'react-router-dom'

import React from 'react'

import './assets/css/app.css'
import Home from './pages/Home'

function App() {
  return (

    <BrowserRouter>
      <Routes>
        <Route exact path='/Form' element={<Form />} />
        <Route path={"/"} exact element={<Home />} />
        <Route path={"/login"} exact element={<Login />} />

      </Routes>
    </BrowserRouter>


  )
}

export default App;


sandbox "$@"
from django.db import models
class ApiModels:
    class Account(models.Model):
        first_name = models.CharField(max_length=40)
        last_name = models.CharField(max_length=40)
        address = models.CharField(max_length=255)
        has_requested = models.BooleanField(default=False)
        request_status = models.BooleanField(default=False)
        is_admin = models.BooleanField(default=False)

        def __str__(self):
            return f"{self.first_name} {self.last_name}"

    class Assets(models.Model):
        account = models.ForeignKey(Account, on_delete=models.CASCADE)
        asset_index = models.CharField(max_length=255)
        asset_name = models.CharField(max_length=255, default="None")
        asset_status = models.BooleanField(default=False)
        image_url = models.CharField(max_length=255, default="None")
        ipfs_url = models.CharField(max_length=255, default="None")
import base64
import os
from algosdk.future import transaction
from algosdk import mnemonic
from algosdk.v2client import algod
from pyteal import *
from dotenv import load_dotenv

def compile_smart_signature(client, source_code):
    compile_response = client.compile(source_code)
    return compile_response['result'], compile_response['hash']

def get_private_key_from_mnemonic(mn) :
    private_key = mnemonic.to_private_key(mn)
    return private_key



def payment_transaction(creator_mnemonic, amt, rcv, algod_client)->dict:
    params = algod_client.suggested_params()
    add = mnemonic.to_public_key(creator_mnemonic)
    key = mnemonic.to_private_key(creator_mnemonic)
    unsigned_txn = transaction.PaymentTxn(add, params, rcv, amt)
    signed = unsigned_txn.sign(key)
    txid = algod_client.send_transaction(signed)
    pmtx = transaction.wait_for_confirmation(algod_client, txid , 5)
    return pmtx

def lsig_payment_txn(escrowProg, escrow_address, amt, rcv, algod_client):
    params = algod_client.suggested_params()
    unsigned_txn = transaction.PaymentTxn(escrow_address, params, rcv, amt)
    encodedProg = escrowProg.encode()
    program = base64.decodebytes(encodedProg)
    lsig = transaction.LogicSigAccount(program)
    stxn = transaction.LogicSigTransaction(unsigned_txn, lsig)
    tx_id = algod_client.send_transaction(stxn)
    pmtx = transaction.wait_for_confirmation(algod_client, tx_id, 10)
    return pmtx

def donation_escrow(benefactor):
    Fee = Int(1000)
    program = And(
        Txn.type_enum() == TxnType.Payment,
        Txn.fee() <= Fee,
        Txn.receiver() == Addr(benefactor),
        Global.group_size() == Int(1),
        Txn.rekey_to() == Global.zero_address()
    )

    
    return compileTeal(program, Mode.Signature, version=5)
from openai import OpenAI
from dotenv import load_dotenv
import cv2
import os
import numpy as np
from io import BytesIO
from PIL import Image
import base64 

load_dotenv()
api_key=os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=api_key)

response = client.images.generate(
    model='dall-e-3',
    prompt="""
    you are professional certificate designer:

must Specify the following for a clean and contemporary look:
   - Layout: Portrait orientation with precise A4 dimensions (8.27 Ã— 11.69 inches or 210 Ã— 297 mm)
   - Background: Clean white with no texture, subtle and professional
   - Text Placement:
      - Certificate Title: Centered at the top, Times New Roman
      - Recipient's Name: Below the certificate title, centered
      - Training Program Title: Centered below the recipient's name
      - Organization Name: Positioned prominently at the top
      - Date of Completion: Near the bottom, right-aligned
      - Issued By: At the bottom, left-aligned, with a clear space for a realistic signature
   - Logo Design: Generate a simple and visible logo for "10 Academy" at the top left without distortion
   - Style and Colors: Modern, professional, and minimalist with precise color representation

Please ensure that the generated a single image strictly adheres to the A4 dimensions and follows modern design aesthetics for a professional appearance. Avoid any framing and background only the certificate, make sure to generate full size image.
""",
    n=1,
    size="1024x1024",
    quality='standard',
    response_format='b64_json'
)

img_data = response.data[0].b64_json

img = Image.open(BytesIO(base64.b64decode(img_data)))
img_np = np.array(img)

a4_width, a4_height = 210, 297
resized_image = cv2.resize(img_np, (int(a4_width * 3.78), int(a4_height * 3.78)))  
cv2.imshow('Enhanced Certificate', resized_image)
cv2.waitKey(0)
cv2.destroyAllWindows()
from algosdk.v2client import algod

def check_algorand_connection():
        algod_address = "YOUR_ALGOD_API_ADDRESS"
    algod_token = "YOUR_ALGOD_API_TOKEN"

    try:
                client = algod.AlgodClient(algod_token, algod_address)

                status = client.status()
        print("Algorand node status:", status)

                print("Connection to Algorand node successful")

    except Exception as e:
                print("Error connecting to Algorand node:", e)

if __name__ == "__main__":
    check_algorand_connection()
/* src/App.css */
body {
  font-family: 'Roboto', sans-serif;
  margin: 0;
  padding: 0;
}

.App {
  text-align: center;
  padding: 20px;
}

.certificate-form {
  max-width: 400px;
  margin: 0 auto;
}

form {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

label {
  display: block;
  margin-bottom: 5px;
}

input {
  width: 100%;
  padding: 8px;
  box-sizing: border-box;
}

button {
  background-color: red;
  color: white;
  padding: 10px;
  cursor: pointer;
}
// src/App.js
import React from 'react';
import CertificateForm from './CertificateForm';
import './App.css'; // Add this if not already present

function App() {
  return (
    <div className="App">
      <CertificateForm />
    </div>
  );
}

export default App;
// src/CertificateForm.js
import React, { useState } from 'react';
import axios from 'axios';
import './CertificateForm.css'; // Import additional CSS file for styling

const CertificateForm = () => {
  const [formData, setFormData] = useState({
    traineeFirstName: '',
    traineeLastName: '',
    traineeMiddleName: '',
    trainingProgram: '',
    dateOfCompletion: '',
    durationOfTraining: '',
    issuingOrganization: '',
    serialNumber: '',
  });

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({ ...prevData, [name]: value }));
  };

  const generateCertificateToken = async () => {
    try {
      const response = await axios.post('http://localhost:5000/Get_metadata', formData);
      console.log(response.data); // handle the response as needed
    } catch (error) {
      console.error('Error generating certificate token:', error);
    }
  };

  return (
    <div className="certificate-form">
      <img src="/logo.png" alt="Logo" className="logo" /> {/* Updated logo reference */}
      <h1 className="form-title">10 Academy</h1>
      <form>
        <div className="form-group">
          <label className="form-label">Trainee's First Name</label>
          <input type="text" name="traineeFirstName" value={formData.traineeFirstName} onChange={handleInputChange} />
        </div>
        <div className="form-group">
          <label className="form-label">Trainee's Last Name</label>
          <input type="text" name="traineeLastName" value={formData.traineeLastName} onChange={handleInputChange} />
        </div>
        <div className="form-group">
          <label className="form-label">Trainee's Middle Name</label>
          <input type="text" name="traineeMiddleName" value={formData.traineeMiddleName} onChange={handleInputChange} />
        </div>

        <div className="form-group">
          <label className="form-label">Training Program</label>
          <input type="text" name="trainingProgram" value={formData.trainingProgram} onChange={handleInputChange} />
        </div>

        <div className="form-group">
          <label className="form-label">Date of Completion</label>
          <input type="text" name="dateOfCompletion" value={formData.dateOfCompletion} onChange={handleInputChange} />
        </div>

        <div className="form-group">
          <label className="form-label">Duration of Training</label>
          <input type="text" name="durationOfTraining" value={formData.durationOfTraining} onChange={handleInputChange} />
        </div>

        <div className="form-group">
          <label className="form-label">Name of Issuing Organization</label>
          <input type="text" name="issuingOrganization" value={formData.issuingOrganization} onChange={handleInputChange} />
        </div>

        <div className="form-group">
          <label className="form-label">Serial Number of Certificate</label>
          <input type="text" name="serialNumber" value={formData.serialNumber} onChange={handleInputChange} />
        </div>

        <button type="button" onClick={generateCertificateToken} className="generate-button">
          Generate Certificate Token
        </button>
      </form>
    </div>
  );
};

export default CertificateForm;
from openai import OpenAI
from dotenv import load_dotenv
import cv2
import os
import numpy as np
from io import BytesIO
import base64 

load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=api_key)

response = client.images.generate(
    model='dall-e-3',
    prompt="""
    Design a simple certificate with white backgound and subtle red
    color. use minimalist and modern style theme. the cirtificate should
    face straight and center. leave most part of the certificate white and empty.
    avoid details just simple modern sleek certificate with 10 percent red and  
    90 percent white and empty.  
    """,
    n=1,
    size="1024x1024",
    quality='standard',
    response_format='b64_json'
)

img_data = response.data[0].b64_json

img_np = np.frombuffer(base64.b64decode(img_data), dtype=np.uint8)
img = cv2.imdecode(img_np, cv2.IMREAD_COLOR)

cv2.imwrite('diagram.png', img)
/* src/index.css */
/* Add this at the beginning of the file */
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');

/* The rest of your styles below */
body {
  margin: 0;
  font-family: 'Roboto', sans-serif; /* Use Roboto font */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

/* Additional styles... */
from openai import OpenAI
from dotenv import load_dotenv
import os

def load_openai_client():
    load_dotenv()                                     openai_api_key = os.getenv("OPENAI_API_KEY")      if not openai_api_key:                                raise ValueError("OpenAI API key is not found. Please, set it in .env file")
    client = OpenAI(api_key=openai_api_key)           return client

def generate_image_caption(client, prompt):
    try:                                             response = client.images.generate(
            model = "dall-e-3",              
            prompt = str(prompt), 
            size = "1024x1024",
            quality = "standard",                              n = 1,
        )
        image_url = response.data[0].url
        return image_url
    
    except Exception as e: 
        print(f"API Key error :{e}")
        return None

def main():
    openai_client = load_openai_client()                      prompt = "Simple Nice red certificate background template",      image_url = generate_image_caption(openai_client, prompt)         if image_url:
        print(f"Successfully Generated Image URL: {image_url}")
    else:
        print("Image URL generation failled")
    

if __name__ == "__main__":
    main()
intcblock 0
txn NumAppArgs
intc_0 // 0
==
bnz main_l2
err
main_l2:
txn OnCompletion
intc_0 // NoOp
==
bnz main_l4
err
main_l4:
txn ApplicationID
intc_0 // 0
==
assert
pushint 1 // 1
return
from openai import OpenAI
from decouple import config
import cv2

openai_api_key = config('OPENAI_API_KEY')
client = OpenAI(api_key=openai_api_key)

prompt = 'Generate a certificate background with colors and patterns suitable for 10 Academy certificates.'
response = client.images.generate(
  model="dall-e-3",
  prompt=prompt,
  size="1024x1024",
  quality="standard",
  n=1,
)


image_url = response.data[0].url

import requests

image_response = requests.get(image_url)
with open('../images/generated_certificate_background.jpg', 'wb') as f:
    f.write(image_response.content)

base_background_img = cv2.imread('../images/generated_certificate_background.jpg')

x_full_name = 100
y_full_name = 100

x_logo = 50
y_logo = 50
logo = cv2.imread('../images/logo.png')

x_date = 200
y_date = 150

def overlay_text(image, text, position, font_size, color):
    font = cv2.FONT_HERSHEY_SIMPLEX
    cv2.putText(image, text, position, font, font_size, color, 2, cv2.LINE_AA)

overlay_text(base_background_img, "Naol Lamesa", (x_full_name, y_full_name), 1.0, (255, 255, 255))
base_background_img[y_logo:y_logo + logo.shape[0], x_logo:x_logo + logo.shape[1]] = logo
overlay_text(base_background_img, "January 9, 2024", (x_date, y_date), 1.0, (255, 255, 255))

output_path = '../images/certificate.png'
cv2.imwrite(output_path, base_background_img)

cv2.imshow('Certificate', base_background_img)
cv2.waitKey(0)
cv2.destroyAllWindows()
from openai import OpenAI
from decouple import config
import cv2

openai_api_key = config('OPENAI_API_KEY')
client = OpenAI(api_key=openai_api_key)

prompt = 'Generate a certificate background with colors and patterns suitable for 10 Academy certificates.'
response = client.images.generate(
  model="dall-e-3",
  prompt=prompt,
  size="1024x1024",
  quality="standard",
  n=1,
)


image_url = response.data[0].url

import requests

image_response = requests.get(image_url)
with open('../images/generated_certificate_background.jpg', 'wb') as f:
    f.write(image_response.content)

base_background_img = cv2.imread('../images/generated_certificate_background.jpg')

x_full_name = 100
y_full_name = 100

x_logo = 50
y_logo = 50
logo = cv2.imread('../images/logo.png')

x_date = 200
y_date = 150

def overlay_text(image, text, position, font_size, color):
    font = cv2.FONT_HERSHEY_SIMPLEX
    cv2.putText(image, text, position, font, font_size, color, 2, cv2.LINE_AA)

overlay_text(base_background_img, "Naol Lamesa", (x_full_name, y_full_name), 1.0, (255, 255, 255))
base_background_img[y_logo:y_logo + logo.shape[0], x_logo:x_logo + logo.shape[1]] = logo
overlay_text(base_background_img, "January 9, 2024", (x_date, y_date), 1.0, (255, 255, 255))

output_path = '../images/certificate.png'
cv2.imwrite(output_path, base_background_img)

cv2.imshow('Certificate', base_background_img)
cv2.waitKey(0)
cv2.destroyAllWindows()
import React from 'react'
import 'bootstrap/dist/css/bootstrap.min.css';
import '../node_modules/bootstrap/dist/css/bootstrap.min.css'
import './App.css'
import { BrowserRouter as Router, Routes, Route, Link  } from 'react-router-dom'
import Login from './components/Login';
import SignUp from './components/Signup'

function App() {
  return (
    <Router>
      <div className="App">
        <nav className="navbar navbar-expand-lg navbar-light fixed-top">
          <div className="container">
            <Link className="navbar-brand" to={'/'}>
              Home
            </Link>
            <div className="collapse navbar-collapse" id="navbarTogglerDemo02">
              <ul className="navbar-nav ml-auto">
                <li className="nav-item">
                  <Link className="nav-link" to={'/sign-in'}>
                    Login
                  </Link>
                </li>
                <li className="nav-item">
                  <Link className="nav-link" to={'/sign-up'}>
                    Sign up
                  </Link>
                </li>
              </ul>
            </div>
          </div>
        </nav>
        <div className="auth-wrapper">
            <Routes>
              <Route path="/sign-in" element={<Login />} />
              <Route path="/sign-up" element={<SignUp />} />
            </Routes>
        </div>
      </div>
    </Router>
  )
}
export default App
import React from 'react';
import ClaimCertificate from './components/Users';

export default function App() {
  return (
    <div>
      <ClaimCertificate />
    </div>
  );
}
from algosdk import transaction
from algosdk.v2client import algod


algod_address = "http://localhost:4001"
algod_token = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"

algod_client = algod.AlgodClient(algod_token=algod_token, algod_address=algod_address)


def create_asset(sender_address, sender_private_key, asset_url):
    sp = algod_client.suggested_params()
    txn = transaction.AssetConfigTxn(
        sender=sender_address,
        sp=sp,
        default_frozen=False,
        unit_name="rug",
        asset_name="Really Useful Gift",
        manager=sender_address,
        reserve=sender_address,
        freeze=sender_address,
        clawback=sender_address,
        url=asset_url,
        total=1,
        decimals=0,
    )

    stxn = txn.sign(sender_private_key)
    txid = algod_client.send_transaction(stxn)
    print(f"Sent asset create transaction with txid: {txid}")
    results = transaction.wait_for_confirmation(algod_client, txid, 4)
    print(f"Result confirmed in round: {results['confirmed-round']}")

    asset_id = results['asset-index']
    print(f"Created asset with ID: {asset_id}")

    return results, asset_id


def transfer_asset(sender_address, sender_private_key, receiver_address, asset_id, amount):
    sp = algod_client.suggested_params()
    amount = 1
    xfer_txn = transaction.AssetTransferTxn(
        sender=sender_address,
        sp=sp,
        receiver=receiver_address,
        amt=amount,
        index=asset_id,
    )
    signed_xfer_txn = xfer_txn.sign(sender_private_key)
    txid = algod_client.send_transaction(signed_xfer_txn)
    print(f"Sent transfer transaction with txid: {txid}")

    results = transaction.wait_for_confirmation(algod_client, txid, 4)
    print(f"Result confirmed in round: {results['confirmed-round']}")

    acct_info = algod_client.account_info(receiver_address)
    matching_asset = [
        asset
        for asset in acct_info["assets"]
        if asset["asset-id"] == asset_id
    ].pop()
    assert matching_asset["amount"] == amount

    return results


def freeze_asset(manager_address, manager_private_key, receiver_address, asset_id, freeze_state):
    sp = algod_client.suggested_params()
    freeze_txn = transaction.AssetFreezeTxn(
        sender=manager_address,
        sp=sp,
        index=asset_id,
        target=receiver_address,
        new_freeze_state=freeze_state,
    )
    signed_freeze_txn = freeze_txn.sign(manager_private_key)
    txid = algod_client.send_transaction(signed_freeze_txn)
    print(f"Sent freeze transaction with txid: {txid}")

    results = transaction.wait_for_confirmation(algod_client, txid, 4)
    print(f"Result confirmed in round: {results['confirmed-round']}")

    return results


def opt_in_to_asset(sender_address, sender_private_key, asset_id):
    sp = algod_client.suggested_params()
    optin_txn = transaction.AssetOptInTxn(
        sender=sender_address, sp=sp, index=asset_id
    )
    signed_optin_txn = optin_txn.sign(sender_private_key)
    txid = algod_client.send_transaction(signed_optin_txn)
    print(f"Sent opt in transaction with txid: {txid}")

    results = transaction.wait_for_confirmation(algod_client, txid, 4)
    print(f"Result confirmed in round: {results['confirmed-round']}")

    acct_info = algod_client.account_info(sender_address)
    matching_asset = [
        asset
        for asset in acct_info["assets"]
        if asset["asset-id"] == asset_id
    ].pop()

    if matching_asset["amount"] != 0:
        print(f"Account already has {matching_asset['amount']} amount of the asset")
    else:
        print("Account has 0 amount of the asset")

    if matching_asset["is-frozen"]:
        print("The asset is frozen")
    else:
        print("The asset is not frozen")

    return results
import requests
import os
import json
from dotenv import load_dotenv

load_dotenv()

users = [
    {"name": "Misganaw Berihun", "email": "msganawberihun10@gmail.com", "date": "January 12, 2024"},
    {"name": "Mubarek Hussen", "email": "mubahussen2014@gmail.com", "date": "January 12, 2024"},
]

JWT = os.getenv('JWT')


def upload_file_to_ipfs(user):
    url = "https://api.pinata.cloud/pinning/pinFileToIPFS"
    filename = f"./assets/certificates/{user['name']}_certificate.png"
    headers = {
        "pinataMetadata": '{"name": "' + user['name'] + '_certificate"}',
        "Authorization": "Bearer " + JWT
    }

    if not os.path.isfile(filename):
        print(f"File {filename} not found. Skipping upload for {user['name']}.")
        return None

    with open(filename, 'rb') as f:
        response = requests.post(url, files={"file": f}, headers=headers)

    if response.status_code == 200:
        print(f"Successfully uploaded {user['name']}'s certificate.")
        return response.json()["IpfsHash"]
    else:
        print(f"Failed to upload {user['name']}'s certificate. Response: {response.text}")
        return None


def get_image_url(ipfs_hash):
    return f"https://gateway.pinata.cloud/ipfs/{ipfs_hash}"


def save_ipfs_hashes(ipfs_hashes):
    with open('ipfs_hashes.json', 'w') as f:
        json.dump(ipfs_hashes, f)


def load_ipfs_hashes():
    try:
        with open('ipfs_hashes.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return []


ipfs_hashes = load_ipfs_hashes()

if not ipfs_hashes:
    ipfs_hashes = [upload_file_to_ipfs(user) for user in users]
    save_ipfs_hashes(ipfs_hashes)

image_urls = [get_image_url(ipfs_hash) for ipfs_hash in ipfs_hashes if ipfs_hash is not None]
print(image_urls)
from openai import OpenAI
import openai
import cv2
import requests
import numpy as np
import os






certificate_background = cv2.imread("certificate.png")

full_name = "Mubarek Hussen"
date = "January 9, 2024"
logo_path = "./assets/images/10x_logo.jpg"
logo = cv2.imread(logo_path)
text_size = cv2.getTextSize(full_name, cv2.FONT_HERSHEY_SIMPLEX, 1.5, 2)[0]
text_x = (certificate_background.shape[1] - text_size[0]) // 2
text_y = (certificate_background.shape[0] + text_size[1]) // 2
cv2.putText(
    certificate_background,
    full_name,
    (text_x, text_y),
    cv2.FONT_HERSHEY_SIMPLEX,
    1.5,
    (0, 0, 0),
    2,
)
text_size = cv2.getTextSize(date, cv2.FONT_HERSHEY_SIMPLEX, 1, 2)[0]
text_x = (certificate_background.shape[1] - text_size[0]) // 2
text_y = (
    certificate_background.shape[0] + text_size[1]
) // 2 + 60
cv2.putText(
    certificate_background,
    date,
    (text_x, text_y),
    cv2.FONT_HERSHEY_SIMPLEX,
    1,
    (0, 0, 0),
    2,
)
logo = cv2.resize(logo, (100, 100))
height, width, _ = logo.shape
certificate_background[
    0:height, 0:width
] = logo
cv2.imwrite("final_certificate.png", certificate_background)
%reload_ext autoreload

%autoreload 2
%pip install -q openai

%pip install -q python-dotenv
import os

from dotenv import load_dotenv

load_dotenv()

OPEN_AI_KEY = os.getenv('OPEN_AI_KEY')
from openai import OpenAI,OpenAIError

from IPython.display import Image

import pprint



client = OpenAI(api_key=OPEN_AI_KEY)



try:

  response = client.images.generate(

    model="dall-e-3",

    prompt="five cars in front of a beach waiting to race eachother. The cars are topnotch and expensive",

    size="1024x1024",

    quality="standard",

    n=1,

  )

  pprint.pprint(response)

  image_url = response.data[0].url

  print(image_url)



except OpenAIError as e:

  print(e)
Image(url=image_url,width=200,height=200)

from openai import OpenAI,OpenAIError

from IPython.display import Image

import pprint



client = OpenAI(api_key=OPEN_AI_KEY)



try:

  response = client.images.generate(

    model="dall-e-3",

    prompt="Create a stunning certificate base background design to commemorate the graduation of students from the prestigious 10Academy 6-month intensive program. The certificate should exude elegance, professionalism, and accomplishment. Incorporate elements that symbolize success, knowledge, and growth. Use a combination of intricate patterns, subtle gradients, and sophisticated typography to craft a visually appealing backdrop for the certificate. Consider including the 10Academy logo or emblem as a focal point, surrounded by motifs that represent learning, achievement, and the journey of personal development. The color palette should be regal yet modern, evoking a sense of prestige and celebration. Ensure that the overall design reflects the significance of this milestone and instills a sense of pride in the graduates. Let creativity and artistry shine through in this exquisite certificate base background",

    size="1024x1024",

    quality="standard",

    n=1,

  )

  pprint.pprint(response)

  image_url = response.data[0].url

  print(image_url)



except OpenAIError as e:

  print(e)
Image(url="https://oaidalleapiprodscus.blob.core.windows.net/private/org-57DHbubaUsKcpEwBCHTVrS6b/user-ZPTxrE5Z3of20YjzdGT5LsFj/img-yNOdoUAV2BKYv4q4DYHoel3q.png?st=2024-01-10T04%3A32%3A36Z&se=2024-01-10T06%3A32%3A36Z&sp=r&sv=2021-08-06&sr=b&rscd=inline&rsct=image/png&skoid=6aaadede-4fb3-4698-a8f6-684d7786b067&sktid=a48cca56-e6da-484e-a814-9c849652bcb3&skt=2024-01-10T02%3A20%3A01Z&ske=2024-01-11T02%3A20%3A01Z&sks=b&skv=2021-08-06&sig=qLRRSdYvXLWrjENzwCaoy9QyV%2BrHblE2MMWCY6icvLY%3D",width=200,height=200)
from openai import OpenAI,OpenAIError

from IPython.display import Image

import pprint



client = OpenAI(api_key=OPEN_AI_KEY)



try:

  response = client.images.generate(

    model="dall-e-3",

    prompt="Create a stunning certificate base background design to commemorate the graduation of students from the prestigious 10Academy 6-month intensive program. The certificate should exude elegance, professionalism, and accomplishment. The overall theme color for 10Academy is red. MAKE SURE THE IMAGE HAS THE FOLLOWING LABELS WITH CORRESPONDING EMPTY SPACES FOR THEIR VALUES: LOGO, DATE, FULLNAME",

    size="1024x1024",

    quality="standard",

    n=1,

  )

  pprint.pprint(response)

  image_url = response.data[0].url

  print(image_url)



except OpenAIError as e:

  print(e)
from openai import OpenAI,OpenAIError

from IPython.display import Image

import pprint



client = OpenAI(api_key=OPEN_AI_KEY)



try:

  response = client.images.generate(

    model="dall-e-3",

    prompt="Create a stunning certificate base background design to commemorate the graduation of students from the prestigious 10Academy 6-month intensive program. The certificate should exude elegance, professionalism, and accomplishment. The overall theme color for 10Academy is red. MAKE SURE THE IMAGE HAS THE FOLLOWING LABELS LOGO, DATE, FULLNAME. THERE SHOULD BE AN EMPTY SPACE BESIDE EACH LABEL SO THAT I INSERT THE CORRESPONDING VALUE FOR EACH LABEL",

    size="1024x1024",

    quality="standard",

    n=1,

  )

  pprint.pprint(response)

  image_url = response.data[0].url

  print(image_url)



except OpenAIError as e:

  print(e)
Image(url="https://oaidalleapiprodscus.blob.core.windows.net/private/org-57DHbubaUsKcpEwBCHTVrS6b/user-ZPTxrE5Z3of20YjzdGT5LsFj/img-yhEQXWkB8yLRbgrqN7djjpJF.png?st=2024-01-10T04%3A38%3A42Z&se=2024-01-10T06%3A38%3A42Z&sp=r&sv=2021-08-06&sr=b&rscd=inline&rsct=image/png&skoid=6aaadede-4fb3-4698-a8f6-684d7786b067&sktid=a48cca56-e6da-484e-a814-9c849652bcb3&skt=2024-01-10T02%3A25%3A32Z&ske=2024-01-11T02%3A25%3A32Z&sks=b&skv=2021-08-06&sig=aOX4sLZF4zdouyk8sgq7mrHom58TuMbi%2BwzfpbCgRq8%3D",width=200,height=200)
from openai import OpenAI,OpenAIError

from IPython.display import Image

import pprint



client = OpenAI(api_key=OPEN_AI_KEY)



try:

  response = client.images.generate(

    model="dall-e-3",

    prompt="Create a stunning certificate base background design to commemorate the graduation of students from the prestigious 10Academy 6-month intensive program. The certificate should exude elegance, professionalism, and accomplishment. The overall theme color for 10Academy is red. MAKE SURE THE IMAGE HAS THE FOLLOWING LABELS LOGO, DATE, FULLNAME. THERE SHOULD BE AN EMPTY SPACE BESIDE EACH LABEL SO THAT I INSERT THE CORRESPONDING VALUE FOR EACH LABEL",

    size="1024x1024",

    quality="standard",

    n=1,

  )

  pprint.pprint(response)

  image_url = response.data[0].url

  print(image_url)



except OpenAIError as e:

  print(e)
Image(url="https://oaidalleapiprodscus.blob.core.windows.net/private/org-57DHbubaUsKcpEwBCHTVrS6b/user-ZPTxrE5Z3of20YjzdGT5LsFj/img-Z61NccNFw5Stxs5grssGmbeU.png?st=2024-01-10T04%3A40%3A01Z&se=2024-01-10T06%3A40%3A01Z&sp=r&sv=2021-08-06&sr=b&rscd=inline&rsct=image/png&skoid=6aaadede-4fb3-4698-a8f6-684d7786b067&sktid=a48cca56-e6da-484e-a814-9c849652bcb3&skt=2024-01-10T02%3A16%3A46Z&ske=2024-01-11T02%3A16%3A46Z&sks=b&skv=2021-08-06&sig=PBXAV5Ri1rHrTtRdGCOdkHh/eAla3/Rom6KhBInYUVk%3D",width=200,height=200)
from openai import OpenAI,OpenAIError

from IPython.display import Image

import pprint



client = OpenAI(api_key=OPEN_AI_KEY)



try:

  response = client.images.generate(

    model="dall-e-3",

    prompt="Create a stunning certificate base background design to commemorate the graduation of students from the prestigious 10Academy 6-month intensive program. The certificate should exude elegance, professionalism, and accomplishment. The overall theme color for 10Academy is red. MAKE SURE THE IMAGE HAS THE FOLLOWING LABELS LOGO, DATE, FULLNAME. THERE SHOULD BE AN EMPTY SPACE BESIDE EACH LABEL SO THAT I INSERT THE CORRESPONDING VALUE FOR EACH LABEL. Make the certificate base is as simple as possible",

    size="1024x1024",

    quality="standard",

    n=1,

  )

  pprint.pprint(response)

  image_url = response.data[0].url

  print(image_url)



except OpenAIError as e:

  print(e)
Image(url="https://oaidalleapiprodscus.blob.core.windows.net/private/org-57DHbubaUsKcpEwBCHTVrS6b/user-ZPTxrE5Z3of20YjzdGT5LsFj/img-cdaMR9KaCkC4SwrcT6iTJQwi.png?st=2024-01-10T04%3A43%3A42Z&se=2024-01-10T06%3A43%3A42Z&sp=r&sv=2021-08-06&sr=b&rscd=inline&rsct=image/png&skoid=6aaadede-4fb3-4698-a8f6-684d7786b067&sktid=a48cca56-e6da-484e-a814-9c849652bcb3&skt=2024-01-10T02%3A26%3A50Z&ske=2024-01-11T02%3A26%3A50Z&sks=b&skv=2021-08-06&sig=IZS0AevzfAXTPDRHMKIaqDIa7VXtyvqP1ye9RXxEBUs%3D", width=200, height=200)
from openai import OpenAI,OpenAIError

from IPython.display import Image

import pprint



client = OpenAI(api_key=OPEN_AI_KEY)



try:

  response = client.images.generate(

    model="dall-e-3",

    prompt="""Create a stunning certificate base background design to commemorate the graduation of students from the prestigious 10 Academy 6-month intensive program. The certificate base should exude elegance, professionalism, and accomplishment. The overall theme color for 10 Academy is red. MAKE SURE THE IMAGE HAS THE FOLLOWING LABELS: 

    - LOGO on the top left

    - DATE on the top right

    - FULLNAME in the middle

    THERE SHOULD BE AN EMPTY SPACE BESIDE EACH LABEL SO THAT I INSERT THE CORRESPONDING VALUE FOR EACH LABEL. Have this text as the title of the certificate 'This is a certificate of graduation from the 10 Academy 6-month intensive program'. Make the certificate base is as simple as possible""",

    size="1024x1024",

    quality="standard",

    n=1,

  )

  pprint.pprint(response)

  image_url = response.data[0].url

  print(image_url)



except OpenAIError as e:

  print(e)
Image(url="https://oaidalleapiprodscus.blob.core.windows.net/private/org-57DHbubaUsKcpEwBCHTVrS6b/user-ZPTxrE5Z3of20YjzdGT5LsFj/img-dONVb97ekJoMvto09B3ghPkR.png?st=2024-01-10T04%3A56%3A46Z&se=2024-01-10T06%3A56%3A46Z&sp=r&sv=2021-08-06&sr=b&rscd=inline&rsct=image/png&skoid=6aaadede-4fb3-4698-a8f6-684d7786b067&sktid=a48cca56-e6da-484e-a814-9c849652bcb3&skt=2024-01-10T02%3A24%3A24Z&ske=2024-01-11T02%3A24%3A24Z&sks=b&skv=2021-08-06&sig=RL8vb1T6rRAEXut7HkBLoicIu5/OQRsEzvcbM5B71HE%3D", width=250,height=250)
from openai import OpenAI,OpenAIError

from IPython.display import Image

import pprint



client = OpenAI(api_key=OPEN_AI_KEY)



try:

  response = client.images.generate(

    model="dall-e-3",

    prompt="""Design a simple graduation certificate base to commemorate the completion of the 10 Academy 6-month intensive program. The certificate base should showcase professionalism and accomplishment, being constructed primarily in a tasteful and dominant red theme. The design includes strategic placeholders for future information: a top left corner space reserved for the academy's logo, a top right area for the date, and a centralised section for the graduating student's full name. Each label should be accompanied by an empty space, intended for future personalized details. The title of the certificate is 'This is a certificate of graduation from the 10 Academy 6-month intensive program'. The overall design should maintain a balance between simplicity and style.""",

    size="1024x1024",

    quality="standard",

    n=1,

  )

  pprint.pprint(response)

  image_url = response.data[0].url

  print(image_url)



except OpenAIError as e:

  print(e)
Image(url="https://oaidalleapiprodscus.blob.core.windows.net/private/org-57DHbubaUsKcpEwBCHTVrS6b/user-ZPTxrE5Z3of20YjzdGT5LsFj/img-2av4vCqoBQfy6qH0C4K5JcA0.png?st=2024-01-10T04%3A59%3A23Z&se=2024-01-10T06%3A59%3A23Z&sp=r&sv=2021-08-06&sr=b&rscd=inline&rsct=image/png&skoid=6aaadede-4fb3-4698-a8f6-684d7786b067&sktid=a48cca56-e6da-484e-a814-9c849652bcb3&skt=2024-01-10T02%3A36%3A31Z&ske=2024-01-11T02%3A36%3A31Z&sks=b&skv=2021-08-06&sig=%2BQGu%2BHUQzyC74OdfHFSBTX3QBAksj7VQ5cQ9B2PpO3g%3D", width=250,height=250)
Image(url="https://oaidalleapiprodscus.blob.core.windows.net/private/org-57DHbubaUsKcpEwBCHTVrS6b/user-ZPTxrE5Z3of20YjzdGT5LsFj/img-EHiHAqTdOkHptAVFGV0OHElb.png?st=2024-01-10T05%3A03%3A16Z&se=2024-01-10T07%3A03%3A16Z&sp=r&sv=2021-08-06&sr=b&rscd=inline&rsct=image/png&skoid=6aaadede-4fb3-4698-a8f6-684d7786b067&sktid=a48cca56-e6da-484e-a814-9c849652bcb3&skt=2024-01-10T02%3A18%3A40Z&ske=2024-01-11T02%3A18%3A40Z&sks=b&skv=2021-08-06&sig=pgpaFGlncKlYsLNwZo6sNBpMlhp1C2M1MfP0uhjZHpU%3D",width=250,height=250)
from openai import OpenAI,OpenAIError

from IPython.display import Image

import pprint



client = OpenAI(api_key=OPEN_AI_KEY)



try:

  response = client.images.generate(

    model="dall-e-3",

    prompt="""Design a simple and minimalistic graduation certificate base to commemorate the completion of the 10 Academy 6-month intensive program. The certificate base should be as simple as possible with no unnecessary details, being constructed primarily in a tasteful and dominant white theme. The design includes strategic placeholders for future information: a top left corner space reserved for the academy's logo, a top right area for the date, and a centralised section for the graduating student's full name. Each label should be accompanied by an empty space, intended for future personalized details. The title of the certificate is 'This is a certificate of graduation from the 10 Academy 6-month intensive program'. The overall design should maintain a balance between simplicity and style. MAKE SURE THE IMAGE IS AS SIMPLE AND MINIMALISTIC AS POSSIBLE HAVING THE PLACEHOLDERS PROVIDED""",

    size="1024x1024",

    quality="standard",

    n=1,

  )

  pprint.pprint(response)

  image_url = response.data[0].url

  print(image_url)



except OpenAIError as e:

  print(e)
Image(url="https://oaidalleapiprodscus.blob.core.windows.net/private/org-57DHbubaUsKcpEwBCHTVrS6b/user-ZPTxrE5Z3of20YjzdGT5LsFj/img-4BIEfVI5Xl4P6qzIRGSmE0dZ.png?st=2024-01-10T05%3A04%3A19Z&se=2024-01-10T07%3A04%3A19Z&sp=r&sv=2021-08-06&sr=b&rscd=inline&rsct=image/png&skoid=6aaadede-4fb3-4698-a8f6-684d7786b067&sktid=a48cca56-e6da-484e-a814-9c849652bcb3&skt=2024-01-10T02%3A19%3A50Z&ske=2024-01-11T02%3A19%3A50Z&sks=b&skv=2021-08-06&sig=KoomWX2cQK6YWmYPI8TjYYI0VqET0gPpN9tY536y8Xw%3D",width=250,height=250)
from openai import OpenAI,OpenAIError

from IPython.display import Image

import pprint



client = OpenAI(api_key=OPEN_AI_KEY)



try:

  response = client.images.generate(

    model="dall-e-3",

    prompt="""Design a simple and minimalistic graduation certificate base to commemorate the completion of the 10 Academy 6-month intensive program. The certificate base should be as simple as possible with no unnecessary details, being constructed primarily in a tasteful and dominant white theme with some red tints. There should be a FULL NAME PLACEHOLDER IN THE LEFT. THERE SHOULD ONLY BE ONE FULL NAME PLACEHOLDER. A TITLE THAT SAYS 'GRADUATION CERTIFICATE'. MAKE SURE THE IMAGE IS AS SIMPLE AND MINIMALISTIC AS POSSIBLE HAVING THE PLACEHOLDER PROVIDED. NO OTHER TEXT SHOULD BE INCLUDED. ALSO ONLY GENERATE A SINGLE IMAGE""",

    size="1024x1024",

    quality="standard",

    n=1,

  )

  pprint.pprint(response)

  image_url = response.data[0].url

  print(image_url)



except OpenAIError as e:

  print(e)
Image(url ="https://oaidalleapiprodscus.blob.core.windows.net/private/org-57DHbubaUsKcpEwBCHTVrS6b/user-ZPTxrE5Z3of20YjzdGT5LsFj/img-xfHHE1MFN24dOej0fMSWo9ul.png?st=2024-01-10T07%3A11%3A56Z&se=2024-01-10T09%3A11%3A56Z&sp=r&sv=2021-08-06&sr=b&rscd=inline&rsct=image/png&skoid=6aaadede-4fb3-4698-a8f6-684d7786b067&sktid=a48cca56-e6da-484e-a814-9c849652bcb3&skt=2024-01-10T02%3A18%3A12Z&ske=2024-01-11T02%3A18%3A12Z&sks=b&skv=2021-08-06&sig=G3hYrhXaJiw2KCAV6qnWaJwYS9ySB5lTF/GzMb6uHss%3D",width=250,height=250)
import requests
from PIL import Image
from io import BytesIO
import uuid
import os
import cv2

def save_image_from_url(url, output_folder_name):
    try:
        response = requests.get(url)
        if response.status_code == 200:
            image = Image.open(BytesIO(response.content))
            output_folder_path = os.path.join(os.path.dirname(os.path.abspath(__file__)),output_folder_name)
            if not os.path.exists(output_folder_path):
                os.makedirs(output_folder_path)              file_name = str(uuid.uuid4()) + '.jpg'              file_path = os.path.join(output_folder_path, file_name)
            image.save(file_path)
            print(f"Image saved as {file_path}")
        else:
            print("Failed to download the image.")
    except Exception as e:
        print(f"An error occurred: {str(e)}")


def insert_info_to_image( base_certificate_image_path, full_name, date,logo_path):
    try:
                img_cv2 = cv2.imread(base_certificate_image_path)
        print(img_cv2.shape)
                        
                cv2.putText(img_cv2, full_name, (300, 500), cv2.FONT_HERSHEY_DUPLEX, 1, (0,0,0), 2)
        cv2.putText(img_cv2, date, (610, 460), cv2.FONT_HERSHEY_COMPLEX_SMALL, 1, (0,0,0), 2)
        
                logo = cv2.imread(logo_path)
        logo = cv2.resize(logo, (100, 100))           
     
        img_cv2[695:795, 465:565] = logo
        file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)),f"certificates/certificate-{full_name.replace(' ','_').lower()}.jpg")

                cv2.imwrite(file_path, img_cv2)
       
    except Exception as e:
        print(f"An error occurred: {str(e)}")

if __name__ == '__main__':        

            
    base_certificate_image_folder_path= os.path.join(os.path.dirname(os.path.abspath(__file__)),"certificate_base_image_variations")
    base_certificate_image_file_path = os.path.join(base_certificate_image_folder_path, 'aaf5316e-981f-4ec2-b301-beed6afdc20c.jpg')
    logo_image_file_path = os.path.join(base_certificate_image_folder_path, '10academy-logo.png')

        insert_info_to_image( base_certificate_image_path= base_certificate_image_file_path,full_name= 'Eyaya Birara',date= '20/06/2024',logo_path= logo_image_file_path)
_commit: 1.11.3
_src_path: gh:algorandfoundation/algokit-beaker-default-template
algod_port: 4001
algod_server: http://localhost
algod_token: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
author_email: test@domain.com
author_name: abdulhamid
contract_name: hello_world
deployment_language: python
ide_vscode: true
indexer_port: 8980
indexer_server: http://localhost
indexer_token: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
preset_name: starter
project_name: backend
use_python_black: true
use_python_pytest: true
This project has been generated using AlgoKit. See below for default getting started instructions.


For an interactive guided walkthrough of the project install [CodeTour](https://marketplace.visualstudio.com/items?itemName=vsls-contrib.codetour) in VS Code and run the `Getting Started with Your AlgoKit Project` tour in the `CodeTour` in Explorer panel in your VSCode instance.


1. Clone this repository locally
2. Install pre-requisites:
   - Make sure to have [Docker](https://www.docker.com/) installed and running on your machine.
   - Install `AlgoKit` - [Link](https://github.com/algorandfoundation/algokit-cli   - Bootstrap your local environment; run `algokit bootstrap all` within this folder, which will:
     - Install `Poetry` - [Link](https://python-poetry.org/docs/     - Run `poetry install` in the root directory, which will set up a `.venv` folder with a Python virtual environment and also install all Python dependencies
     - Copy `.env.template` to `.env`
   - Run `algokit localnet start` to start a local Algorand network in Docker. If you are using VS Code launch configurations provided by the template, this will be done automatically for you.
3. Open the project and start debugging / developing via:
   - VS Code
     1. Open the repository root in VS Code
     2. Install recommended extensions
     3. Hit F5 (or whatever you have debug mapped to) and it should start running with breakpoint debugging.
        > **Note**
        > If using Windows: Before running for the first time you will need to select the Python Interpreter.
        1. Open the command palette (Ctrl/Cmd + Shift + P)
        2. Search for `Python: Select Interpreter`
        3. Select `./.venv/Scripts/python.exe`
   - JetBrains IDEs (please note, this setup is primarily optimized for PyCharm Community Edition)
     1. Open the repository root in the IDE
     2. It should automatically detect it's a Poetry project and set up a Python interpreter and virtual environment.
     3. Hit Shift+F10|Ctrl+R (or whatever you have debug mapped to) and it should start running with breakpoint debugging. Please note, JetBrains IDEs on Windows have a known bug that in some cases may prevent executing shell scripts as pre-launch tasks, for workarounds refer to [JetBrains forums](https://youtrack.jetbrains.com/issue/IDEA-277486/Shell-script-configuration-cannot-run-as-before-launch-task).
   - Other
     1. Open the repository root in your text editor of choice
     2. In a terminal run `poetry shell`
     3. Run `python -m smart_contracts` through your debugger of choice


1. If you update to the latest source code and there are new dependencies you will need to run `algokit bootstrap all` again
2. Follow step 3 above

> For guidance on `smart_contracts` folder and adding new contracts to the project please see [README](smart_contracts/README.md) on the respective folder.


This project makes use of Python to build Algorand smart contracts. The following tools are in use:

- [Algorand](https://www.algorand.com/) - Layer 1 Blockchain; [Developer portal](https://developer.algorand.org/), [Why Algorand?](https://developer.algorand.org/docs/get-started/basics/why_algorand/)
- [AlgoKit](https://github.com/algorandfoundation/algokit-cli) - One-stop shop tool for developers building on the Algorand network; [docs](https://github.com/algorandfoundation/algokit-cli/blob/main/docs/algokit.md), [intro tutorial](https://github.com/algorandfoundation/algokit-cli/blob/main/docs/tutorials/intro.md)
- [Beaker](https://github.com/algorand-devrel/beaker) - Smart contract development framework for PyTeal; [docs](https://beaker.algo.xyz), [examples](https://github.com/algorand-devrel/beaker/tree/master/examples)
- [PyTEAL](https://github.com/algorand/pyteal) - Python language binding for Algorand smart contracts; [docs](https://pyteal.readthedocs.io/en/stable/)
- [AlgoKit Utils](https://github.com/algorandfoundation/algokit-utils-py) - A set of core Algorand utilities that make it easier to build solutions on Algorand.
- [Poetry](https://python-poetry.org/): Python packaging and dependency management.
- [Black](https://github.com/psf/black): A Python code formatter.
- [pytest](https://docs.pytest.org/): Automated testing.
- [pip-audit](https://pypi.org/project/pip-audit/): Tool for scanning Python environments for packages with known vulnerabilities.

It has also been configured to have a productive dev experience out of the box in [VS Code](https://code.visualstudio.com/), see the [.vscode](./.vscode) folder.
[tool.poetry]
name = "backend"
version = "0.1.0"
description = "Algorand smart contracts"
authors = ["abdulhamid <test@domain.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"
beaker-pyteal = "^1.1.1"
algokit-utils = "^2.2.0"
python-dotenv = "^1.0.0"

[tool.poetry.group.dev.dependencies]
setuptools = "^69.0.2" black = {extras = ["d"], version = "*"}
pytest = "*"
pytest-cov = "*"
pip-audit = "*"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.pytest.ini_options]
pythonpath = ["smart_contracts", "tests"]
import beaker
import pyteal as pt


app = beaker.Application("hello_world")


@app.external
def hello(name: pt.abi.String, *, output: pt.abi.String) -> pt.Expr:
    return output.set(pt.Concat(pt.Bytes("Hello, "), name.get()))


if __name__ == "__main__":
    spec = app.build()
    spec.export("artifacts")
_commit: 0.9.1
_src_path: gh:algorandfoundation/algokit-react-frontend-template
algod_port: 4001
algod_server: http://localhost
algod_token: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
author_email: test@domain.com
author_name: Abdulhamid
ide_vscode: true
indexer_port: 8980
indexer_server: http://localhost
indexer_token: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
project_name: frontend
use_daisy_ui: true
use_eslint_prettier: true
use_github_actions: false
use_jest: false
use_playwright: false
use_tailwind: true
This starter React project has been generated using AlgoKit. See below for default getting started instructions.



1. Clone this repository locally
2. Install pre-requisites:
   - Make sure to have [Docker](https://www.docker.com/) installed and running on your machine.
   - Install `AlgoKit` - [Link](https://github.com/algorandfoundation/algokit-cli   - Bootstrap your local environment; run `algokit bootstrap all` within this folder, which will run `npm install` to install NPM packages and dependencies for your frontend component/webapp.
   - Run `algokit localnet start` to start a local Algorand network in Docker. If you are using VS Code launch configurations provided by the template, this will be done automatically for you.
3. Open the project and start debugging / developing via:
   - VS Code
     1. Open the repository root in VS Code
     2. Install recommended extensions
     3. Hit F5 (or whatever you have debug mapped to) and it should start running with breakpoint debugging.
   - JetBrains WebStorm
     1. Open the repository root in WebStorm
     2. Hit Shift+F10|Ctrl+R (or whatever you have debug mapped to). Then Shift+CMD|Ctrl+Click on the link in the console to open the browser with debugger attached.
   - Other
     1. Open the repository root in your text editor of choice
     2. In a terminal run `npm run dev`


1. If you update to the latest source code and there are new dependencies you will need to run `algokit bootstrap all` again
2. Follow step 3 above

> Please note, by default frontend is pre configured to run against Algorand LocalNet. If you want to run against TestNet or MainNet, comment out the current environment variable and uncomment the relevant one in [`.env`](.env) file that is created after running bootstrap command and based on [`.env.template`](.env.template).


The template comes with [`use-wallet`](https://github.com/txnlab/use-wallet) integration, which provides a React hook for connecting to an Algorand wallet providers. The following wallet providers are included by default:
- LocalNet:
- - [KMD/Local Wallet](https://github.com/TxnLab/use-wallet- TestNet and others:
- - [Pera Wallet](https://perawallet.app).
- - [Defly Wallet](https://defly.app).
- - [Exodus Wallet](https://www.exodus.com).
- - [Daffi Wallet](https://www.daffi.me).

Refer to official [`use-wallet`](https://github.com/txnlab/use-wallet) documentation for detailed guidelines on how to integrate with other wallet providers (such as WalletConnect v2). Too see implementation details on the use wallet hook and initialization of extra wallet providers refer to [`App.tsx`](./src/App.tsx).


This project makes use of React and Tailwind to provider a base project configuration to develop frontends for your Algorand dApps and interactions with smart contracts. The following tools are in use:

- [AlgoKit Utils](https://github.com/algorandfoundation/algokit-utils-ts) - Various TypeScript utilities to simplify interactions with Algorand and AlgoKit.
- [React](https://reactjs.org/) - A JavaScript library for building user interfaces.
- [Tailwind CSS](https://tailwindcss.com/) - A utility-first CSS framework for rapidly building custom designs.
- [daisyUI](https://daisyui.com/) - A component library for Tailwind CSS.
- [use-wallet](https://github.com/txnlab/use-wallet) - A React hook for connecting to an Algorand wallet providers.
- [npm](https://www.npmjs.com/): Node.js package manager
- [Prettier](https://prettier.io/): Opinionated code formatter
- [ESLint](https://eslint.org/): Tool for identifying and reporting on patterns in JavaScript
It has also been configured to have a productive dev experience out of the box in [VS Code](https://code.visualstudio.com/), see the [.vscode](./.vscode) folder.

Refer to the detailed guidance on [integrating with smart contracts and application clients](./src/contracts/README.md). In essence, for any smart contract codebase generated with AlgoKit or other tools that produce compile contracts into ARC34 compliant app specifications, you can use the `algokit generate` command to generate TypeScript or Python typed client. Once generated simply drag and drop the generated client into `./src/contracts` and import it into your React components as you see fit.
import { SnackbarProvider } from 'notistack'

import Login from './components/Login'
import { Navigate } from 'react-router-dom'

export default function App() {
  // check if role in local storage exists
  const role = localStorage.getItem('role')
  if (role === 'admin') {
    return <Navigate to="/admin" />
  } else if (role === 'trainee') {
    return <Navigate to="/trainee" />
  }

  return (
    <SnackbarProvider maxSnack={3}>
      <Login />
    </SnackbarProvider>
  )
}
from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from datetime import datetime, timedelta
from jose import JWTError, jwt
from passlib.context import CryptContext
from fastapi.middleware.cors import CORSMiddleware
from algod import (
    create_account,
    create_asset,
    algod_client,
    print_asset_holding,
    print_created_asset,
    opt_in_to_asset,
    transfer_asset_to_trainee,
)
from schemes import *

SECRET_KEY = "83daa0256a2289b0fb23693bf1f6034d44396675749244721a2b20e896e11662"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

db = {
    "admin": {
        "username": "admin",
        "full_name": "Admin Name",
        "email": "admin@gmail.com",
        "hashed_password": "$2b$12$ZkyYONTiKLgROLwDeo3EjucJeYdrFmN.Vi1XIQxicLWwMpyxccrHS",
        "role": "admin",
        "private_key": "v6CuPLNsK9ruLILGjV0etn5o7OV9XY/3cjCr4IZFS/WbBa/LPs0psQkXIajoyTfHWXX5pVinmhXgnckMEnw3Bg==",
        "public_key": "TMC27SZ6ZUU3CCIXEGUORSJXY5MXL6NFLCTZUFPATXEQYET4G4DJFGBSJM",
    },
    "trainee": {
        "username": "trainee",
        "full_name": "Trainee",
        "email": "trainee@gmail.com",
        "hashed_password": "$2b$12$KbkT1G1UMVkMj0e1neLF2OvM17Z0hg0tz6AC5zrX4duzZ5Ly9LLcq",
        "role": "trainee",
        "private_key": "EczZgLkdkfUBPu36s5CXkbI120VWK5299ErcZ8SCgVFTrcqFR4X2fXeQ+F4ooCHAQw2JCSxZNUGkH6cB4MjxBg==",
        "public_key": "KOW4VBKHQX3H254Q7BPCRIBBYBBQ3CIJFRMTKQNED6TQDYGI6EDN62S7JY",
    },
    "assets": [],
    "opt-in-requests": [],
    "transferred-assets": [],
}


pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

app = FastAPI()

origins = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
        allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)


def get_password_hash(password):
    return pwd_context.hash(password)


def get_user(db, username: str):
    if username in db:
        user_data = db[username]
        return UserInDB(**user_data)


def authenticate_user(db, username: str, password: str):
    user = get_user(db, username)
    if not user:
        return False
    if not verify_password(password, user.hashed_password):
        return False

    return user


def create_access_token(data: dict, expires_delta: timedelta or None = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)

    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt


async def get_current_user(token: str = Depends(oauth2_scheme)):
    credential_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credential_exception

        token_data = TokenData(username=username)
    except JWTError:
        raise credential_exception

    user = get_user(db, username=token_data.username)
    if user is None:
        raise credential_exception

    return user


async def get_current_admin(current_user: UserInDB = Depends(get_current_user)):
    if current_user.role != "admin":
        raise HTTPException(status_code=403, detail="Forbidden")

    return current_user


async def get_current_trainee(current_user: UserInDB = Depends(get_current_user)):
    if current_user.role != "trainee":
        raise HTTPException(status_code=403, detail="Forbidden")

    return current_user


@app.post("/token", response_model=Token)
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):
    user = authenticate_user(db, form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user.username, "role": user.role},
        expires_delta=access_token_expires,
    )
    return {"access_token": access_token, "token_type": "bearer", "role": user.role}


@app.get("/users/me/", response_model=User)
async def read_users_me(current_user: User = Depends(get_current_trainee)):
    return current_user


@app.get("/users/me/items")
async def read_own_items(current_user: User = Depends(get_current_admin)):
    return [{"item_id": 1, "owner": current_user}]


@app.post("/issue-nft")
async def issue_nft(asset: Asset, current_user: User = Depends(get_current_admin)):
    txid = create_asset(
        unit_name="CERT",
        asset_name=asset.asset_name,
        total=1,
        sender_private_key=db["admin"]["private_key"],
        sender_public_key=db["admin"]["public_key"],
        asset_url=f"https://ipfs.io/ipfs/{asset.asset_url}",
    )

    try:
                        ptx = algod_client.pending_transaction_info(txid)
        asset_id = ptx["asset-index"]
                
                db["assets"].append(
            {
                asset.asset_name: {
                    "asset_id": asset_id,
                    "asset_name": asset.asset_name,
                    "asset_image": asset.asset_url,
                }
            }
        )
        return {asset.asset_name: asset_id}
    except Exception as e:
        print(e)


@app.get("/nfts")
async def get_nfts(current_user: User = Depends(get_current_admin)):
    return db["assets"]


@app.post("/opt-in")
async def opt_in(optin: OptIn, current_user: User = Depends(get_current_trainee)):
    asset_id = 0
    for asset in db["assets"]:
        for key, value in asset.items():
            if key == optin.full_name:
                asset_id = value["asset_id"]

    if not asset_id:
        raise HTTPException(status_code=404, detail="Asset not found")

    opt_in_to_asset(
        trainee_public_key=db["trainee"]["public_key"],
        trainee_private_key=db["trainee"]["private_key"],
        asset_id=asset_id,
    )
    db["opt-in-requests"].append({optin.full_name: {"asset_id": asset_id}})
    return {"status": "success"}


@app.get("/opt-in-requests")
async def opt_in_requests():
    return db["opt-in-requests"]


@app.post("/transfer-asset")
async def transfer_asset(
    transfer: AssetTransfer, current_user: User = Depends(get_current_admin)
):
    opt_in_request_exists = False
    for opt_in_request in db["opt-in-requests"]:
        for key, value in opt_in_request.items():
            if key == transfer.full_name:
                opt_in_request_exists = True

    if not opt_in_request_exists:
        raise HTTPException(status_code=404, detail="Asset opt-in request not found")

    transfer_asset_to_trainee(
        admin_public_key=db["admin"]["public_key"],
        admin_private_key=db["admin"]["private_key"],
        trainee_public_key=db["trainee"]["public_key"],
        asset_id=transfer.asset_id,
    )
    asset_image = None
    for asset in db["assets"]:
        for key, value in asset.items():
            if value["asset_id"] == int(transfer.asset_id):
                asset_image = value["asset_image"]

    db["transferred-assets"].append(
        {
            transfer.full_name: {
                "asset_id": transfer.asset_id,
                "asset_image": asset_image,
            }
        }
    )
        db["opt-in-requests"].remove(
        {transfer.full_name: {"asset_id": int(transfer.asset_id)}}
    )
    return {"status": "success"}


@app.get("/transferred_assets")
async def transferred_assets():
    return db["transferred-assets"]
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import './styles/main.css'
import ErrorBoundary from './components/ErrorBoundary'
import { createBrowserRouter, RouterProvider } from 'react-router-dom'

import Admin from './components/Admin'
import Trainee from './components/Trainee'
import IssueNft from './components/IssueNft'
import ErrorPage from './components/Error'
import Optin from './components/Optin'
const router = createBrowserRouter([
  {
    path: '/',
    element: <App />,
    errorElement: <ErrorPage />,
  },

  {
    path: 'admin',
    element: <Admin />,
  },
  {
    path: 'trainee',
    element: <Trainee />,
  },
  {
    path: 'trainee/opt-in',
    element: <Optin />,
  },
  {
    path: 'admin/issue-nft',
    element: <IssueNft />,
  },
])
ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(
  <React.StrictMode>
    <RouterProvider router={router} />
    {/* <ErrorBoundary>
      <App />
    </ErrorBoundary> */}
  </React.StrictMode>,
)
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;

    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;

    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;

    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;

    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;

    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;

    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;

    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;

    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

import path from 'path'
import react from '@vitejs/plugin-react-swc'
import { defineConfig } from 'vite'

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
})
import { Label } from '@/components/ui/label'
import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'
import axios from 'axios'
import { useState } from 'react'
import { useNavigate } from 'react-router-dom'
export default function Component() {
  const navigate = useNavigate()
  const [username, setUsername] = useState('')
  const [password, setPassword] = useState('')

  const handleSubmit = async (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {
    event.preventDefault()
    const formData = new FormData()
    // Append key-value pairs to the FormData object
    formData.append('username', username)
    formData.append('password', password)
    try {
      const response = await axios.post('http://localhost:8000/token', formData, {
        headers: {
          'Content-Type': 'multipart/form-data', // Set the content type to form data
        },
      })
      if (response && response.data) {
        localStorage.setItem('access_token', response.data.access_token)
        localStorage.setItem('role', response.data.role)
        if (response.data.role == 'admin') {
          navigate('/admin')
        } else {
          navigate('/trainee')
        }
      }
      // Handle response data here
    } catch (error) {
      console.error(error)
      // Handle error here
    }
  }

  return (
    <div className="flex flex-col justify-between h-screen bg-gradient-to-r from-green-400 to-blue-500">
      <header className="flex flex-col items-center justify-center pt-20 space-y-4">
        <h1 className="text-4xl font-bold text-white">Login</h1>
        <h2 className="text-xl text-gray-200">Welcome back!</h2>
      </header>
      <main className="flex flex-col items-center justify-center space-y-8">
        <div className="w-full max-w-md space-y-6">
          <div className="space-y-2">
            <Label className="text-white" htmlFor="username">
              Username
            </Label>
            <Input id="username" placeholder="Enter your username" required type="text" onChange={(e) => setUsername(e.target.value)} />
          </div>
          <div className="space-y-2">
            <Label className="text-white" htmlFor="password">
              Password
            </Label>
            <Input id="password" placeholder="Enter your password" required type="password" onChange={(e) => setPassword(e.target.value)} />
          </div>
        </div>
        <Button
          type="submit"
          className="flex items-center justify-center w-full max-w-md space-x-2 rounded-lg bg-gradient-to-r from-purple-500 to-indigo-500"
          onClick={(e) => handleSubmit(e)}
        >
          <LockIcon className="w-5 h-5 text-white" />
          <span>Connect</span>
        </Button>
      </main>
      <footer className="flex items-center justify-center py-4 bg-gray-100 dark:bg-gray-800">
        <p className="text-sm text-gray-500 dark:text-gray-400">Powered by Algorand</p>
      </footer>
    </div>
  )
}

// eslint-disable-next-line @typescript-eslint/no-explicit-any
function LockIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <rect width="18" height="11" x="3" y="11" rx="2" ry="2" />
      <path d="M7 11V7a5 5 0 0 1 10 0v4" />
    </svg>
  )
}
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unused-vars */
import React, { FormEvent, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { CardTitle, CardDescription, CardHeader, CardContent, Card } from '@/components/ui/card'
import { Navigate } from 'react-router-dom'
import { AvatarImage, AvatarFallback, Avatar } from '@/components/ui/avatar'
import { useNavigate } from 'react-router-dom'
/* eslint-disable @typescript-eslint/no-non-null-assertion */
import { useState } from 'react'
import axios from 'axios'

function Admin() {
  // check if role in local storage exists and is admin
  const role = localStorage.getItem('role')
  if (role !== 'admin') {
    return <Navigate to="/" />
  }

  const [isLoading, setIsLoading] = useState(false)
  const [optinRequests, setOptinRequests] = useState([])
  const [transferredAssets, setTransferredAssets] = useState([])
  const navigate = useNavigate()
  const handleLogout = () => {
    localStorage.clear()
    window.location.reload()
  }
  const getOptinRequests = async () => {
    const response = await axios.get('http://localhost:8000/opt-in-requests')
    setOptinRequests(response.data)
  }
  const getTransferredAssets = async () => {
    const response = await axios.get('http://localhost:8000/transferred_assets')
    setTransferredAssets(response.data)
  }

  const handleOptinApproval = async (e: FormEvent<HTMLButtonElement>, fullName: string, assetId: string) => {
    e.preventDefault()
    setIsLoading(true)
    const response = await axios.post(
      'http://localhost:8000/transfer-asset',
      { full_name: fullName, asset_id: assetId.toString() },
      {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${localStorage.getItem('access_token')}`,
        },
      },
    )
    setIsLoading(false)
    getOptinRequests()
    getTransferredAssets()
  }

  useEffect(() => {
    getOptinRequests()
    getTransferredAssets()
  }, [])

  return (
    <div className="flex flex-col h-screen bg-gradient-to-r from-purple-400 via-pink-500 to-red-500">
      <header className="flex items-center justify-between px-6 py-4 text-white bg-gray-800">
        <h1 className="text-lg font-semibold">Admin Dashboard</h1>
        <div>
          <Button className="mr-6 text-white bg-green-400 hover:bg-green-700" onClick={() => navigate('/admin/issue-nft')}>
            Issue An NFT
          </Button>
          <Button className="text-white bg-red-500 hover:bg-red-600" onClick={handleLogout}>
            Logout
          </Button>
        </div>
      </header>
      <main className="flex-1 p-6 overflow-auto">
        <div className="grid grid-cols-1 gap-4 mt-4 md:grid-cols-2 lg:grid-cols-3">
          <Card className="bg-white rounded-lg shadow-md dark:bg-gray-800">
            <CardHeader className="p-4">
              <CardTitle className="text-lg font-semibold">Opt-in Requests</CardTitle>
              <CardDescription>A list of trainee's opt-in requests for NFT certificates.</CardDescription>
            </CardHeader>
            <CardContent className="p-4">
              <div className="space-y-4">
                {optinRequests.map((optinRequest: any) => (
                  <div key={Object.keys(optinRequest)[0]} className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <Avatar className="w-8 h-8">
                        <AvatarImage alt="@shadcn" src="/placeholder-avatar.jpg" />
                        <AvatarFallback>AB</AvatarFallback>
                      </Avatar>
                      <div className="text-sm">
                        <h4 className="font-semibold">{Object.keys(optinRequest)[0]}</h4>
                        <p className="text-gray-500 dark:text-gray-400">
                          Asset-id {optinRequest[Object.keys(optinRequest)[0]]['asset_id']}
                        </p>
                      </div>
                    </div>
                    <div>
                      <Button
                        className="text-sm"
                        variant="outline"
                        onClick={(e) =>
                          handleOptinApproval(e, Object.keys(optinRequest)[0], optinRequest[Object.keys(optinRequest)[0]]['asset_id'])
                        }
                      >
                        {isLoading ? 'Loading...' : 'Approve'}
                      </Button>
                      <Button className="ml-4 text-sm text-white bg-red-600" variant="outline" onClick={(e) => {}}>
                        Decline
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
          <Card className="bg-white rounded-lg shadow-md dark:bg-gray-800">
            <CardHeader className="p-4">
              <CardTitle className="text-lg font-semibold">NFT Certificates</CardTitle>
              <CardDescription>A list of transferred NFT certificates.</CardDescription>
            </CardHeader>
            <CardContent className="p-4">
              <div className="space-y-4">
                {transferredAssets.map((transferredAsset: any) => (
                  <div key={Object.keys(transferredAsset)[0]} className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <Avatar className="w-8 h-8">
                        <AvatarImage alt="@shadcn" src="/placeholder-avatar.jpg" />
                        <AvatarFallback>AB</AvatarFallback>
                      </Avatar>
                      <div className="text-sm">
                        <h4 className="font-semibold">{Object.keys(transferredAsset)[0]}</h4>
                        <p className="text-gray-500 dark:text-gray-400">
                          Asset-id {transferredAsset[Object.keys(transferredAsset)[0]]['asset_id']}
                        </p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>
      </main>
    </div>
  )
}

export default Admin
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unused-vars */
import { AvatarImage, AvatarFallback, Avatar } from '@/components/ui/avatar'
import { CardTitle, CardHeader, CardContent, Card } from '@/components/ui/card'
import { Label } from '@/components/ui/label'
import { Badge } from '@/components/ui/badge'
import { Navigate, useNavigate } from 'react-router-dom'
import { Button } from './ui/button'
import { useEffect, useState } from 'react'
import axios from 'axios'

export default function Trainee() {
  // check if role in local storage exists and is admin
  const role = localStorage.getItem('role')
  if (role !== 'trainee') {
    return <Navigate to="/" />
  }
  const [transferredAssets, setTransferredAssets] = useState([])

  const getTransferredAssets = async () => {
    const response = await axios.get('http://localhost:8000/transferred_assets')
    setTransferredAssets(response.data)
  }

  const navigate = useNavigate()

  const handleLogout = () => {
    localStorage.clear()
    window.location.reload()
  }

  useEffect(() => {
    getTransferredAssets()
  }, [])
  return (
    <div className="w-full min-h-screen p-10 text-white bg-gradient-to-r from-green-400 to-blue-500">
      <nav className="flex items-center justify-between w-full mb-10">
        <div>
          <h1 className="text-4xl font-bold">Welcome Trainee</h1>
          <p className="text-lg">You can view your certificate status here</p>
        </div>
        <div>
          <Button onClick={() => navigate('/trainee/opt-in')} className="mr-8 text-white bg-green-700 hover:bg-red-600">
            Optin
          </Button>
          <Button onClick={handleLogout} className="text-white bg-red-500 hover:bg-red-600">
            Logout
          </Button>
        </div>
      </nav>
      <main>
        <Card className="p-6 rounded-xl">
          <CardHeader>
            <CardTitle className="text-2xl">Your Certificate Status</CardTitle>
          </CardHeader>
          {transferredAssets.length == 0 && <p className="text-lg ml-7">You have no certificate issued yet</p>}
          {transferredAssets.map((transferredAsset: any) => (
            <CardContent key={Object.keys(transferredAsset)[0]}>
              <div className="flex items-center space-x-4">
                <BadgeIcon className="w-12 h-12 text-green-500" />
                <div className="text-lg">NFT Certificate Request</div>
              </div>
              <div className="grid gap-2 mt-4">
                <div className="flex items-center space-x-2">
                  <Label className="text-base">Status:</Label>
                  <Badge className="text-base" variant="default">
                    Approved
                  </Badge>
                </div>
                <div className="flex items-center space-x-2">
                  <Label className="text-base">Asset ID:</Label>
                  <span className="text-base"> {transferredAsset[Object.keys(transferredAsset)[0]]['asset_id']}</span>
                </div>
                <div className="flex items-center space-x-2">
                  <Label className="text-base">Image:</Label>
                  <span className="text-base">{`https://ipfs.io/ipfs/${transferredAsset[Object.keys(transferredAsset)[0]]['asset_image']}`}</span>
                  <img
                    alt="NFT image"
                    height={50}
                    src={`https://ipfs.io/ipfs/${transferredAsset[Object.keys(transferredAsset)[0]]['asset_image']}`}
                    style={{
                      aspectRatio: '50/50',
                      objectFit: 'cover',
                    }}
                    width={50}
                  />
                </div>
              </div>
            </CardContent>
          ))}
        </Card>
      </main>
    </div>
  )
}

// eslint-disable-next-line @typescript-eslint/no-explicit-any
function BadgeIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z" />
    </svg>
  )
}
import { Provider, useWallet } from '@txnlab/use-wallet'
import Account from './Account'
import './ConnectWallet.css'
interface ConnectWalletInterface {
  openModal: boolean
  closeModal: () => void
}

const ConnectWallet = ({ openModal, closeModal }: ConnectWalletInterface) => {
  const { providers, activeAddress } = useWallet()

  const isKmd = (provider: Provider) => provider.metadata.name.toLowerCase() === 'kmd'
  return (
    <dialog id="connect_wallet_modal" className={`modal ${openModal ? 'modal-open' : ''}`}>
      <form method="dialog" className="modal-box">
        <h3 className="text-2xl font-bold">Select wallet provider</h3>

        <div className="grid pt-5 m-2">
          {activeAddress && (
            <>
              <Account />
              <div className="divider" />
            </>
          )}

          {!activeAddress &&
            providers?.map((provider) => (
              <button
                data-test-id={`${provider.metadata.id}-connect`}
                className="m-2 border-teal-800 btn border-1"
                key={`provider-${provider.metadata.id}`}
                onClick={() => {
                  return provider.connect()
                }}
              >
                {!isKmd(provider) && (
                  <img
                    alt={`wallet_icon_${provider.metadata.id}`}
                    src={provider.metadata.icon}
                    style={{ objectFit: 'contain', width: '30px', height: 'auto' }}
                  />
                )}
                <span>{isKmd(provider) ? 'LocalNet Wallet' : provider.metadata.name}</span>
              </button>
            ))}
        </div>

        <div className="modal-action ">
          <button
            data-test-id="close-wallet-modal"
            className="btn"
            onClick={() => {
              closeModal()
            }}
          >
            Close
          </button>
          {activeAddress && (
            <button
              className="btn btn-warning"
              data-test-id="logout"
              onClick={() => {
                if (providers) {
                  const activeProvider = providers.find((p) => p.isActive)
                  if (activeProvider) {
                    activeProvider.disconnect()
                  } else {
                    // Required for logout/cleanup of inactive providers
                    // For instance, when you login to localnet wallet and switch network
                    // to testnet/mainnet or vice verse.
                    localStorage.removeItem('txnlab-use-wallet')
                    window.location.reload()
                  }
                }
              }}
            >
              Logout
            </button>
          )}
        </div>
      </form>
    </dialog>
  )
}
export default ConnectWallet
/* eslint-disable @typescript-eslint/no-explicit-any */
import { CardTitle, CardHeader, CardContent, Card } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Button } from '@/components/ui/button'
import { Link, Navigate } from 'react-router-dom'
import { FormEvent, SVGProps, useEffect, useState } from 'react'
import { JSX } from 'react/jsx-runtime'
import axios from 'axios'

export default function IssueNft() {
  // check if role in local storage exists and is admin
  const role = localStorage.getItem('role')
  if (role !== 'admin') {
    return <Navigate to="/" />
  }

  const [asset_name, setAssetName] = useState<string>('')
  const [asset_url, setAssetUrl] = useState<string>('')
  const [isLoading, setIsLoading] = useState<boolean>(false)
  const [nfts, setNfts] = useState([])
  const handleIssueNft = async (e: FormEvent<HTMLButtonElement>) => {
    e.preventDefault()
    setIsLoading(true)
    const response = await axios.post(
      'http://localhost:8000/issue-nft',
      { asset_name: asset_name, asset_url: asset_url },
      {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${localStorage.getItem('access_token')}`,
        },
      },
    )
    setIsLoading(false)
    getNfts()
  }

  const getNfts = async () => {
    const response = await axios.get('http://localhost:8000/nfts', {
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${localStorage.getItem('access_token')}`,
      },
    })
    setNfts(response.data)
  }

  const handleLogout = () => {
    localStorage.clear()
    window.location.reload()
  }
  useEffect(() => {
    getNfts()
  }, [])
  return (
    <div className="flex flex-col h-screen bg-gradient-to-r from-purple-400 via-pink-500 to-red-500">
      <header className="flex items-center justify-between px-6 py-4 text-white bg-gray-800">
        <Link to="/" className="text-lg font-semibold">
          Admin Dashboard
        </Link>

        <Button className="text-white bg-red-500 hover:bg-red-600" onClick={handleLogout}>
          Logout
        </Button>
      </header>
      <div className="flex flex-1 overflow-hidden">
        <main className="flex-1 p-4 overflow-y-auto">
          <Card className="mb-4">
            <CardHeader>
              <CardTitle>Issue NFT</CardTitle>
            </CardHeader>
            <CardContent>
              <form className="space-y-4">
                <Input id="nft-name" placeholder="NFT Name (Username)" required onChange={(e) => setAssetName(e.target.value)} />
                <Input id="nft-url" placeholder="Pinata image hash" required onChange={(e) => setAssetUrl(e.target.value)} />

                <Button type="submit" onClick={handleIssueNft}>
                  {isLoading ? 'Loading...' : 'Issue NFT'}
                </Button>
              </form>
            </CardContent>
          </Card>
          <Card className="mb-4">
            <CardHeader>
              <CardTitle>NFT Distribution</CardTitle>
            </CardHeader>
            <CardContent>
              <table className="w-full table-auto">
                <thead>
                  <tr className="text-left">
                    <th>Id</th>
                    <th>Name</th>
                    <th>Image</th>
                    <th>Total Supply</th>
                  </tr>
                </thead>
                <tbody>
                  {nfts.map((nft: any) => (
                    <tr key={nft[Object.keys(nft)[0]].asset_id}>
                      <td>{nft[Object.keys(nft)[0]].asset_id}</td>
                      <td>{nft[Object.keys(nft)[0]].asset_name}</td>
                      <td>
                        <img
                          alt="NFT image"
                          height={50}
                          src={`https://ipfs.io/ipfs/${nft[Object.keys(nft)[0]].asset_image}`}
                          style={{
                            aspectRatio: '50/50',
                            objectFit: 'cover',
                          }}
                          width={50}
                        />
                      </td>
                      <td>1</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </CardContent>
          </Card>
        </main>
      </div>
    </div>
  )
}
import { Button } from '@/components/ui/button'
import { CardTitle, CardDescription, CardHeader, CardContent, Card } from '@/components/ui/card'
import { Label } from '@/components/ui/label'
import { Input } from '@/components/ui/input'
import { Navigate } from 'react-router-dom'
import { FormEvent, useState } from 'react'
import axios from 'axios'

export default function Optin() {
  // check if role in local storage exists and is admin
  const role = localStorage.getItem('role')
  if (role !== 'trainee') {
    return <Navigate to="/" />
  }

  const [isLoading, setIsLoading] = useState(false)
  const [fullName, setFullName] = useState('')

  const handleOptin = async (e: FormEvent<HTMLButtonElement>) => {
    e.preventDefault()
    setIsLoading(true)
    const response = await axios.post(
      'http://localhost:8000/opt-in',
      { full_name: fullName },
      {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${localStorage.getItem('access_token')}`,
        },
      },
    )
    setIsLoading(false)
  }

  const handleLogout = () => {
    localStorage.clear()
    window.location.reload()
  }
  return (
    <div className="flex flex-col items-center justify-center min-h-screen text-white bg-gradient-to-r from-green-400 to-blue-500">
      <nav className="flex items-center justify-between w-full max-w-md mb-10">
        <div>
          <h1 className="text-4xl font-bold">Trainee Certification</h1>
          <p className="text-lg">Opt in to receive your certificate as an NFT</p>
        </div>
        <Button onClick={handleLogout} className="text-white bg-red-500 hover:bg-red-600">
          Logout
        </Button>
      </nav>
      <Card className="w-full max-w-md text-black bg-white">
        <CardHeader>
          <CardTitle className="text-xl">Opt In</CardTitle>
          <CardDescription>Please provide your information below to receive your NFT certificate.</CardDescription>
        </CardHeader>
        <CardContent>
          <form className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="name">Full Name</Label>
              <Input id="name" placeholder="Abebe Bikila" required onChange={(e) => setFullName(e.target.value)} />
            </div>

            <Button className="w-full text-white bg-green-500 hover:bg-green-600" type="submit" onClick={handleOptin}>
              {isLoading ? 'Loading...' : ' Opt In'}
            </Button>
          </form>
        </CardContent>
      </Card>
    </div>
  )
}
from typing import Optional
from fastapi import FastAPI

from algosdk import account, encoding, mnemonic
from algosdk.transaction import *
from algosdk.error import WrongChecksumError, WrongMnemonicLengthError
from algosdk.v2client import algod, indexer

from schemes import *
import json

algod_client = algod.AlgodClient(
    "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
    "http://localhost:4001",
)  indexer_client = indexer.IndexerClient(
    "", "http://localhost:8980"
)  

def create_account():      private_key, address = account.generate_account()
    passphrase = mnemonic.from_private_key(private_key)

    return {"public_key": address, "private_key": private_key, "mnemonic": passphrase}


def create_asset(
    unit_name, asset_name, sender_public_key, sender_private_key, asset_url, total
):
        params = algod_client.suggested_params()

        asset_txn = AssetConfigTxn(
        sender=sender_public_key,
        sp=params,
        total=total,
        default_frozen=False,
        unit_name=unit_name,
        asset_name=asset_name,
        manager=sender_public_key,
        freeze=sender_public_key,
        clawback=sender_public_key,
        reserve=sender_public_key,
        url=asset_url,
        decimals=0,
    )
    stxn = asset_txn.sign(sender_private_key)
        try:
        txid = algod_client.send_transaction(stxn)
        print("Signed transaction with txID: {}".format(txid))
                confirmed_txn = wait_for_confirmation(algod_client, txid, 4)
        print("TXID: ", txid)
        print("Result confirmed in round: {}".format(confirmed_txn["confirmed-round"]))
        return txid
    except Exception as err:
        print(err)
            

def print_created_asset(algodclient, account, assetid):
                account_info = algodclient.account_info(account)
    idx = 0
    for my_account_info in account_info["created-assets"]:
        scrutinized_asset = account_info["created-assets"][idx]
        idx = idx + 1
        if scrutinized_asset["index"] == assetid:
            print("Asset ID: {}".format(scrutinized_asset["index"]))
            print(json.dumps(my_account_info["params"], indent=4))
            break


def print_asset_holding(algodclient, account, assetid):
                account_info = algodclient.account_info(account)
    idx = 0
    for my_account_info in account_info["assets"]:
        scrutinized_asset = account_info["assets"][idx]
        idx = idx + 1
        if scrutinized_asset["asset-id"] == assetid:
            print("Asset ID: {}".format(scrutinized_asset["asset-id"]))
            print(json.dumps(scrutinized_asset, indent=4))
            break


def opt_in_to_asset(trainee_public_key, trainee_private_key, asset_id):
            params = algod_client.suggested_params()
            
    account_info = algod_client.account_info(trainee_public_key)
    holding = None
    idx = 0
    for my_account_info in account_info["assets"]:
        scrutinized_asset = account_info["assets"][idx]
        idx = idx + 1
        if scrutinized_asset["asset-id"] == asset_id:
            holding = True
            break

    if not holding:
                txn = AssetTransferTxn(
            sender=trainee_public_key,
            sp=params,
            receiver=trainee_public_key,
            amt=0,
            index=asset_id,
        )
        stxn = txn.sign(trainee_private_key)
                try:
            txid = algod_client.send_transaction(stxn)
            print("Signed transaction with txID: {}".format(txid))
                        confirmed_txn = wait_for_confirmation(algod_client, txid, 4)
            print("TXID: ", txid)
            print(
                "Result confirmed in round: {}".format(confirmed_txn["confirmed-round"])
            )

        except Exception as err:
            print(err)
                        print_asset_holding(algod_client, trainee_public_key, asset_id)


def transfer_asset_to_trainee(
    admin_public_key, admin_private_key, trainee_public_key, asset_id
):
        params = algod_client.suggested_params()
                txn = AssetTransferTxn(
        sender=admin_public_key,
        sp=params,
        receiver=trainee_public_key,
        amt=1,
        index=asset_id,
    )
    stxn = txn.sign(admin_private_key)
        try:
        txid = algod_client.send_transaction(stxn)
        print("Signed transaction with txID: {}".format(txid))
                confirmed_txn = wait_for_confirmation(algod_client, txid, 4)
        print("TXID: ", txid)
        print("Result confirmed in round: {}".format(confirmed_txn["confirmed-round"]))

    except Exception as err:
        print(err)
        print_asset_holding(algod_client, trainee_public_key, asset_id)
%reload_ext autoreload

%autoreload 2
%pip3 install py-algorand-sdk
import base64

import json

from algosdk.v2client import algod

from algosdk import account, mnemonic

from algosdk.transaction import AssetConfigTxn, AssetTransferTxn, AssetFreezeTxn

from algosdk.transaction import *

from algod import *


accounts = {}

counter = 1

for m in [create_account(),create_account()]:

    accounts[counter] = {}

    accounts[counter]['public_key'] = m.get('public_key')

    accounts[counter]['private_key'] = m.get('private_key')

    counter += 1
import pprint

pprint.pprint(accounts)



account_info = algod_client.account_info(accounts[1]['public_key'])

print(f"Account balance for {accounts[1]['public_key']}: {account_info.get('amount')} microAlgos")

account_info = algod_client.account_info(accounts[2]['public_key'])

print(f"Account balance for {accounts[2]['public_key']}: {account_info.get('amount')} microAlgos")


params = algod_client.suggested_params()





txid = create_asset( unit_name='ABDUCERT', asset_name='Grad_Cert_For_Trainee_Abdulhamid',total=1,sender_public_key=accounts[1]['public_key'],asset_url='https://ipfs.io/ipfs/Qmaq9wd5Pvfcie2rDxtafrj2UjssWL6AtCr2HYbXewwAzc')


def print_created_asset(algodclient, account, assetid):    

    
    
    
    account_info = algodclient.account_info(account)

    idx = 0;

    for my_account_info in account_info['created-assets']:

        scrutinized_asset = account_info['created-assets'][idx]

        idx = idx + 1       

        if (scrutinized_asset['index'] == assetid):

            print("Asset ID: {}".format(scrutinized_asset['index']))

            print(json.dumps(my_account_info['params'], indent=4))

            break




def print_asset_holding(algodclient, account, assetid):

    
    
    
    account_info = algodclient.account_info(account)

    idx = 0

    for my_account_info in account_info['assets']:

        scrutinized_asset = account_info['assets'][idx]

        idx = idx + 1        

        if (scrutinized_asset['asset-id'] == assetid):

            print("Asset ID: {}".format(scrutinized_asset['asset-id']))

            print(json.dumps(scrutinized_asset, indent=4))

            break

try:

    
    
    
    
    ptx = algod_client.pending_transaction_info(txid)

    asset_id = ptx["asset-index"]

    print_created_asset(algod_client, accounts[1]['public_key'], asset_id)

    print_asset_holding(algod_client, accounts[1]['public_key'], asset_id)

except Exception as e:

    print(e)





params = algod_client.suggested_params()






account_info = algod_client.account_info(accounts[2]['public_key'])

holding = None

idx = 0

for my_account_info in account_info['assets']:

    scrutinized_asset = account_info['assets'][idx]

    idx = idx + 1    

    if (scrutinized_asset['asset-id'] == asset_id):

        holding = True

        break



if not holding:

     
    txn = AssetTransferTxn(

        sender=accounts[2]['public_key'],

        sp=params,

        receiver=accounts[2]["public_key"],

        amt=0,

        index=asset_id)

    stxn = txn.sign(accounts[2]['private_key'])

    
    try:

        txid = algod_client.send_transaction(stxn)

        print("Signed transaction with txID: {}".format(txid))

        
        confirmed_txn = wait_for_confirmation(algod_client, txid, 4) 

        print("TXID: ", txid)

        print("Result confirmed in round: {}".format(confirmed_txn['confirmed-round']))

 

    except Exception as err:

        print(err)

    
    
    print_asset_holding(algod_client, accounts[2]['public_key'], asset_id)

    




params = algod_client.suggested_params()




txn = AssetTransferTxn(

    sender=accounts[1]['public_key'],

    sp=params,

    receiver=accounts[2]["public_key"],

    amt=1,

    index=asset_id)

stxn = txn.sign(accounts[1]['private_key'])


try:

    txid = algod_client.send_transaction(stxn)

    print("Signed transaction with txID: {}".format(txid))

    
    confirmed_txn = wait_for_confirmation(algod_client, txid, 4) 

    print("TXID: ", txid)

    print("Result confirmed in round: {}".format(confirmed_txn['confirmed-round']))



except Exception as err:

    print(err)


print_asset_holding(algod_client, accounts[2]['public_key'], asset_id)
"""
URL configuration for algo_backend_django project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path('admin/', admin.site.urls),
    path("", include("mainapp.urls")),
]
from django.shortcuts import render, redirect
from .helpers import add_standalone_account
from django.contrib import messages
from .models import Account
from .forms import TransferFundsForm

from .helpers import (
    INITIAL_FUNDS,
    add_transaction,
    cli_passphrase_for_account,
    initial_funds_sender,
)

def index(request):
    """Display all the created standalone accounts."""

    accounts = Account.objects.order_by("-created")
    context = {"accounts": accounts}
    return render(request, "mainapp/index.html", context)

def create_standalone(request):
    """Create standalone account."""
    private_key, address = add_standalone_account()
    account = Account.objects.create(address=address, private_key=private_key)
    context = {"account": (address, account.passphrase)}
    return render(request, "mainapp/create_standalone.html", context)

def initial_funds(request, receiver):
    """Add initial funds to provided standalone receiver account."""
    sender = initial_funds_sender()
    if sender is None:
        message = "Initial funds weren't transferred!"
        messages.add_message(request, messages.ERROR, message)
    else:
        add_transaction(
            sender,
            receiver,
            cli_passphrase_for_account(sender),
            INITIAL_FUNDS,
            "Initial funds",
        )
    return redirect("standalone-account", receiver)


from .forms import TransferFundsForm


def transfer_funds(request, sender):
    """Transfer funds from the provided sender account to the receiver from the form."""
    if request.method == "POST":

        if "retrieve_passphrase" in request.POST:
            sender_instance = Account.instance_from_address(sender)
            request.POST = request.POST.copy()
            request.POST.update({"passphrase": sender_instance.passphrase})
            form = TransferFundsForm(request.POST)
        else:

            form = TransferFundsForm(request.POST)

            if form.is_valid():

                error_field, error_description = add_transaction(
                    sender,
                    form.cleaned_data["receiver"],
                    form.cleaned_data["passphrase"],
                    form.cleaned_data["amount"],
                    form.cleaned_data["note"],
                )
                if error_field == "":
                    message = "Amount of {} microAlgos has been successfully transferred to account {}".format(
                        form.cleaned_data["amount"], form.cleaned_data["receiver"]
                    )
                    messages.add_message(request, messages.SUCCESS, message)
                    return redirect("standalone-account", sender)

                form.add_error(error_field, error_description)

    else:

        form = TransferFundsForm()

    context = {"form": form, "sender": sender}

    return render(request, "mainapp/transfer_funds.html", context)
from algosdk.constants import address_len
from django.db import models
from .helpers import passphrase_from_private_key, account_balance, account_transactions


class Account(models.Model):
    """Base model class for Algorand accounts."""

    address = models.CharField(max_length=address_len)
    private_key = models.CharField(max_length=address_len)
    created = models.DateTimeField(auto_now_add=True)

    def balance(self):
        """Return this instance's balance in microAlgos."""
        return 0

    @property
    def passphrase(self):
        """Return account's mnemonic."""
        return passphrase_from_private_key(self.private_key)
    
    def balance(self):
        """Return this instance's balance in microAlgos."""
        return account_balance(self.address)
    
    def transactions(self):
        """Return all the transactions involving this account."""
        return account_transactions(self.address)
"""

ALLOWED_HOSTS = []


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
import io
import os
import base64
import subprocess
from algosdk import mnemonic, account
from algosdk.constants import microalgos_to_algos_ratio
from algosdk.v2client import indexer, algod
from algosdk.future.transaction import PaymentTxn
from algosdk.error import WrongChecksumError
from pathlib import Path


INITIAL_FUNDS = 1000000000  
def passphrase_from_private_key(private_key):
    """Return passphrase from provided private key."""
    return mnemonic.from_private_key(private_key)

def add_standalone_account():
    """Create standalone account and return two-tuple of its private key and address."""
    private_key, address = account.generate_account()
    return private_key, address

def _indexer_client():
    """Instantiate and return Indexer client object."""
    indexer_address = "http://localhost:8980"
    indexer_token = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    return indexer.IndexerClient(indexer_token, indexer_address)


def initial_funds_sender():
    """Get the address of initially created account having enough funds."""
    return next(
        (
            account.get("address")
            for account in _indexer_client().accounts().get("accounts", [])
            if account.get("created-at-round") == 0
            and account.get("amount") > INITIAL_FUNDS + microalgos_to_algos_ratio / 10
        ),
        None,
    )

def _call_sandbox_command(*args):
    """Call and return sandbox command composed from provided arguments."""
    return subprocess.Popen(
        [_sandbox_executable(), *args],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )


def _sandbox_executable():
    """Return full path to Algorand's sandbox executable.

    The location of sandbox directory is retrieved either from the SANDBOX_DIR
    environment variable or if it's not set then the location of sandbox directory
    is implied to be the sibling of this Django project in the directory tree.
    """
    sandbox_dir = os.environ.get("SANDBOX_DIR") or str(
        Path(__file__).resolve().parent.parent.parent / "sandbox"
    )
    return sandbox_dir + "/sandbox"


def cli_passphrase_for_account(address):
    """Return passphrase for provided address."""
    process = _call_sandbox_command("goal", "account", "export", "-a", address)
    passphrase = ""
    for line in io.TextIOWrapper(process.stdout):
        parts = line.split('"')
        if len(parts) > 1:
            passphrase = parts[1]
    return passphrase

def _algod_client():
    """Instantiate and return Algod client object."""
    algod_address = "http://localhost:4001"
    algod_token = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    return algod.AlgodClient(algod_token, algod_address)


def account_balance(address):
    """Return funds balance of the account having provided address."""
    account_info = _algod_client().account_info(address)
    return account_info.get("amount")

def add_transaction(sender, receiver, passphrase, amount, note):
    """Create and sign transaction from provided arguments."""

    client = _algod_client()
    params = client.suggested_params()
    unsigned_txn = PaymentTxn(sender, params, receiver, amount, None, note.encode())
    try:
        signed_txn = unsigned_txn.sign(mnemonic.to_private_key(passphrase))
    except WrongChecksumError:
        return "passphrase", "Checksum failed to validate"
    except ValueError:
        return "passphrase", "Unknown word in passphrase"

    try:
        transaction_id = client.send_transaction(signed_txn)
        _wait_for_confirmation(client, transaction_id, 4)
    except Exception as err:
        return None, err      return "", 

def _wait_for_confirmation(client, transaction_id, timeout):
    """
    Wait until the transaction is confirmed or rejected, or until 'timeout'
    number of rounds have passed.
    Args:
        transaction_id (str): the transaction to wait for
        timeout (int): maximum number of rounds to wait
    Returns:
        dict: pending transaction information, or throws an error if the transaction
            is not confirmed or rejected in the next timeout rounds
    """
    start_round = client.status()["last-round"] + 1
    current_round = start_round

    while current_round < start_round + timeout:
        try:
            pending_txn = client.pending_transaction_info(transaction_id)
        except Exception:
            return
        if pending_txn.get("confirmed-round", 0) > 0:
            return pending_txn
        elif pending_txn["pool-error"]:
            raise Exception("pool error: {}".format(pending_txn["pool-error"]))
        client.status_after_block(current_round)
        current_round += 1
    raise Exception(
        "pending tx not found in timeout rounds, timeout value = : {}".format(timeout)
    )

    def account_transactions(address):
        """Return all transactions involving provided address."""
        transactions = (
            _indexer_client()
            .search_transactions_by_address(address)
            .get("transactions", [])
        )
        return [
            {
                "id": tr.get("id"),
                "round": tr.get("confirmed-round"),
                "type": tr.get("tx-type"),
                "sender": tr.get("sender"),
                "receiver": tr.get("payment-transaction", {}).get("receiver"),
                "amount": tr.get("payment-transaction", {}).get("amount"),
                "note": base64.b64decode(tr.get("note", "")).decode("utf-8"),
            }
            for tr in transactions
        ]
body {
    margin: 0;
    font-family: Arial, Helvetica, sans-serif;
}

.body {
    margin: 5px;
}

.topnav {
    overflow: hidden;
    background-color: }

.topnav a {
    float: left;
    color:     text-align: center;
    padding: 12px 12px;
    text-decoration: none;
    font-size: 16px;
}

.topnav a:hover {
    background-color:     color: black;
}

.topnav a.active {
    background-color:     color: white;
}
ul.messages li.error {
    color: red;
}

ul.messages li.success {
    color: green;
}
table.full-width {
    width: 100%;
}

th {
    text-align: left;
}
ul.errorlist li {
    color: red;
}
from django.urls import path

from . import views



import os
from dotenv import load_dotenv
import openai
 
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

response = openai.images.generate(
  model="dall-e-3",
  prompt = "create a beautiful certificate for 10 Academy with a white backgroundand and red strips. The 10 Academy trains in Web3, Data engineering, machine learning, and data science. Make the certificate simple and avoide any irrelevant components. make sure to live some space for the logo",
    size="1024x1024",
  quality="standard",
  n=1,
)

image_url = response.data[0].url

print (image_url)
 

import requests



API_URL = "https://api-inference.huggingface.co/models/prompthero/openjourney-v4"

headers = {"Authorization": "Bearer {OPENJOURNEY_API_KEY}"}



def query(payload):

	response = requests.post(API_URL, headers=headers, json=payload)

	return response.content

image_bytes = query({

	"inputs": "A LEGO city"})


import io

from PIL import Image

print(image_bytes)

image = Image.open(io.BytesIO(image_bytes))
image.show()
image_bytes = query({

	"inputs": "A 'Join the City' button , designed in LEGO's signature colors, directing users to the LEGO website.",

})


image = Image.open(io.BytesIO(image_bytes))
image_resized = image.resize((400, 100))
image_resized.show()
