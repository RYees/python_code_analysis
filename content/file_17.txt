import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
 st.title('Telecom Dashboard')
df = pd.read_csv('telecom.csv')
st.subheader('First 5 rows of the data')
st.dataframe(df.head())
st.subheader("Dataset Information")
info_data = {
  "Number of Rows": [df.shape[0]],
  "Number of Columns": [df.shape[1]],
  "Number of Missing Values": [df.isnull().sum().sum()]
}
st.table(pd.DataFrame(info_data))
st.subheader("Column Data Types")
data_types = df.dtypes.reset_index()
data_types.columns = ['Column', 'Data Type']
st.table(data_types)
st.sidebar.header("Statistical Summary")
stat_summary = df.describe().T
stat_summary = stat_summary.round(2)
st.sidebar.table(stat_summary)
def fill_na(df):
  for col in df.columns:
  if pd.api.types.is_numeric_dtype(df[col]):
  col_mean = df[col].mean()
  df[col].fillna(value=col_mean, inplace=True)
  return df
df = fill_na(df)
st.subheader("Dataset after Filling Missing Values with Mean")
st.dataframe(df.head())
 
st.subheader('Bivariet analysis')
df['all_tot'] = df['Total DL (Bytes)'] + df['Total UL (Bytes)']
df.head()
x_column = st.selectbox("Select X-axis Column", df.columns)
y_column = st.selectbox("Select Y-axis Column", df.columns)
fig, ax = plt.subplots(figsize=(7, 5))
sns.scatterplot(data=df, x=x_column, y=y_column, hue=y_column, ax=ax)
plt.title(f"Scatter Plot: {y_column} vs {x_column}")
plt.xlabel(x_column)
plt.ylabel(y_column)
st.pyplot(fig)
df_sess = df[['MSISDN/Number','Dur. (ms)', 'all_tot']]
sess_group = pd.DataFrame(df_sess.groupby('MSISDN/Number')['Dur. (ms)'].sum())
sess_group['decile'] = pd.qcut(sess_group['Dur. (ms)'], q = [0.1, 0.2,0.3,0.4,0.5,1], labels=False)
print(sess_group)
st.subheader("Decile Cut Analysis Result")
df_merg = pd.merge(sess_group, df_sess[['all_tot', 'MSISDN/Number']], on='MSISDN/Number')
st.dataframe(df_merg.head())
df_merg_sum = pd.DataFrame(df_merg.groupby('decile')['all_tot'].sum())
st.subheader('grouping the dataframe per the decile cut')
st.dataframe(df_merg_sum)
selected_columns = st.multiselect("Select columns for correlation analysis", df.columns)
df_corr = df[selected_columns]
correl = df_corr.corr()
st.subheader("Correlation Matrix of Selected Columns")
st.dataframe(correl)
plt.figure(figsize=(10, 8))
sns.heatmap(correl, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap')
st.subheader("Correlation Heatmap")
st.pyplot() 